#!/bin/bash


TAB=$'\t'
IFS=''

set_ascii()
{
	verticalBar='|'
	horizontalBar='-'
	topleftCorner='+'
	toprightCorner='+'
	bottomleftCorner='+'
	bottomrightCorner='+'
	leftCross='+'
	middleCross='+'
	rightCross='+'
	topCross='+'
	bottomCross='+'
}
set_unicode()
{
	verticalBar='│'
	horizontalBar='─'
	topleftCorner='┌'
	toprightCorner='┐'
	bottomleftCorner='└'
	bottomrightCorner='┘'
	leftCross='├'
	middleCross='┼'
	rightCross='┤'
	topCross='┬'
	bottomCross='┴'
}


set_unicode

declare -A right_align_cols=()
right_align_guess=yes
horizontalLines=yes
margins=yes

while [ $# -gt 0 ]
do
case "$1" in
-a|--ascii)
	set_ascii
	;;
-u|--unicode)
	set_unicode
	;;
-H)
	horizontalLines=''
	;;
-M)
	margins=''
	;;
--align-right)
	right_align_guess=''
	shift
	while [ $# -gt 0 ] && [ "${1:0:1}" != - ]
	do
		right_align_cols[$1]=x
		shift
	done
	continue
	;;
-h|--help)
	echo "Usage: some_command | tabularize [-a | -u | -c] [<options>]
Options:
 -a, --ascii    7-bit ascii borders
 -u, --unicode  borders with nice graphical chars
 -H             no horizontal lines
 -M             no margins, ie. no right-most and left-most vertical borders
 --align-right NUM [NUM [...]]
                align these columns to the right, others to the left. turn off
                auto-detection. default is auto-detect based on numeric content."
	exit
	;;
-*)
	echo "Unknown option: $1" >&2
	exit -1
	;;
esac
shift
done


explode()
{
	local separator=$1
	local string=$2
	local new_string
	EXPLODE_ARRAY=()
	
	while [ -n "$string" ]
	do
		EXPLODE_ARRAY+=("${string%%$separator*}")
		new_string=${string#*$separator}
		if [ "$string" = "$new_string" ]
		then
			break
		fi
		string=$new_string
	done
	
	# return $EXPLODE_ARRAY
}


# compute width of each column

column_width=()
num_line=0
text=''
numericals_by_col=()
non_numericals_by_col=()
while read -r line
do
	text="$text${text:+$'\n'}$line"
	explode $'\t' "$line"
	
	column=0
	for cell in "${EXPLODE_ARRAY[@]}"
	do
		width=${#cell}
		if [ -z "${column_width[$column]}" ] || [ $width -gt "${column_width[$column]}" ]
		then
			column_width[$column]=$width
		fi
			
		# guess if this cell has numerical content (skip 1st line as it's likely a header)
		if [ "$right_align_guess" = yes -a $num_line -gt 0 -a -n "$cell" ]
		then
			if expr + "$cell" : '[+-]\?[0-9., ]\+$' >/dev/null 2>&1
			then
				let numericals_by_col[$column]++
			else
				let non_numericals_by_col[$column]++
			fi
		fi
		let column++
	done
	
	let num_line++
done

if [ $num_line = 0 ]
then
	# no input, no output
	exit 0
fi


set -u

# compose the format string

cellFmt=''
topFmt=''
innerFmt=''
bottomFmt=''
segments=()
sequentColumn=''
columnAlignment=()
for column in "${!column_width[@]}"
do
	if [ "$right_align_guess" = yes -a ${numericals_by_col[$column]:-0} -ge ${non_numericals_by_col[$column]:-0} ] || [ "$right_align_guess" != yes -a "${right_align_cols[$column]:-}" ]
	then
		columnAlignment[$column]=left
	else
		columnAlignment[$column]=right
	fi
	
	cellFmt="${cellFmt:-${margins:+$verticalBar}}${sequentColumn:+$verticalBar}%*s"
	topFmt="${topFmt:-${margins:+$topleftCorner}}${sequentColumn:+$topCross}%${column_width[$column]}s"
	innerFmt="${innerFmt:-${margins:+$leftCross}}${sequentColumn:+$middleCross}%${column_width[$column]}s"
	bottomFmt="${bottomFmt:-${margins:+$bottomleftCorner}}${sequentColumn:+$bottomCross}%${column_width[$column]}s"
	segments+=('')
	
	sequentColumn=yes
done
cellFmt="$cellFmt${margins:+$verticalBar}"
topFmt="$topFmt${margins:+$toprightCorner}"
innerFmt="$innerFmt${margins:+$rightCross}"
bottomFmt="$bottomFmt${margins:+$bottomrightCorner}"


topGrid=''
innerGrid=''
bottomGrid=''
if [ $horizontalLines ]
then
	topGrid=`printf -- "$topFmt" "${segments[@]}"`
	topGrid=${topGrid// /$horizontalBar}$'\n'
	innerGrid=`printf -- "$innerFmt" "${segments[@]}"`
	innerGrid=${innerGrid// /$horizontalBar}$'\n'
	bottomGrid=`printf -- "$bottomFmt" "${segments[@]}"`
	bottomGrid=${bottomGrid// /$horizontalBar}$'\n'
fi


# print the table

line_no=1
while read -r line
do
	if [ $line_no = 1 ]
	then
		echo -n "$topGrid"
	else
		echo -n "$innerGrid"
	fi
	
	explode $'\t' "$line"
	printf_args=()
	for column in "${!column_width[@]}"
	do
		[ $column -lt ${#EXPLODE_ARRAY[@]} ] && cell=${EXPLODE_ARRAY[$column]} || cell=''
		chars=${#cell}
		bytes=`LANG=C; echo "${#cell}"`
		swidth=$[ ${column_width[$column]} + ( $bytes - $chars ) ]
		[ ${columnAlignment[$column]} = left ] && swidth=-$swidth
		printf_args+=($swidth "$cell")
	done
	printf -- "$cellFmt\n" "${printf_args[@]}"
	
	let line_no++
done <<<"$text"

echo -n "$bottomGrid"
