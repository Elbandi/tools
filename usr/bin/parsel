#!/usr/bin/env python3

"""
This script takes a html document in STDIN and some CSS selectors in ARGV.
See 'parsel' and 'cssselector' python modules to see which selectors and
pseudo selectors are supported.

Each ARG selects a new part from the DOM, but does not move the pointer,
so a sequence of "p" "body" arguments selects the body at the end; in other
words it is NOT equivalent to the "p body" css selector.

Additionally it takes these special arguments as well:

'!print' first prints how many distinct html parts are being selected
currently and then prints the currently selected parts themself each in its
own line.
CR, LF, and Backslash chars are escaped by a Backslash char.
It's useful for programmatic procession, so you only have to fist read a line
which tells how many subsequent lines to read, each one is a selected DOM part
on its own; then unescape Backslash-R, Backslash-N, and double Backslashes to
get the html content.
'!print-text' is the same as '!print' except it removes all html tags and
leaves text content only.

A sole '|' (pipe) char takes the current selection as a base for the rest of
the arguments. So these arg sequence: "content" "|" "p" "div" selects only
those "p" and "div" tags which are inside a "content" tag. This is useful
because with css you can not group "p" and "div" together here; in other
words "content p, div" does not provide the same.

'!top' rewinds the pointer to the original DOM.
'!back' rewinds the pointer to the previous place.

Do not forget to escape shell-meta chars for your shell.
"""

import sys
from parsel import Selector
import w3lib.html


html = ''.join(sys.stdin.readlines())
whole_selection = Selector(text = html)

selection = whole_selection
new_selection = selection
prev_selections = []

for arg in sys.argv[1:]:
	if arg == '|':
		prev_selections.append(selection)
		selection = new_selection
		continue
	
	if arg == '!top':
		selection = whole_selection
		continue
	
	if arg == '!back':
		selection = prev_selections.pop()
		continue
	
	if arg.startswith('!print'):
		hits = new_selection.getall()
		print(len(hits))
		for hit in hits:
			out = hit
			if arg == '!print-text':
				out = w3lib.html.remove_tags(out)
			out = out.replace('\\', '\\\\')
			out = out.replace('\r', '\\r')
			out = out.replace('\n', '\\n')
			print(out)
		continue
	
	new_selection = selection.css(arg)
