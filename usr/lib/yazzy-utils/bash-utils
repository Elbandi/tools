#!/bin/bash

pipe()
{
	# SYNOPSIS
	#   mimic pipe(2) syscall
	# INVOCATION
	#   pipe <variable_name> <variable_name>
	# EXAMPLE
	#   pipe read_fd write_fd
	# DESCRIPTION
	#   create anonymous pipe
	#   reader end file descriptor stored in $read_fd
	#   writer end file descriptor stored in $write_fd
	
	local pid1 pid2 myin myout lnk0 lnk1
	[ "$1" = rdr ] || local rdr
	[ "$2" = wtr ] || local wtr
	
	myin=`readlink /proc/self/fd/0`
	myout=`readlink /proc/self/fd/1`
	
	sleep inf | sleep inf &
	pid2=$!
	pid1=$(jobs -p %+)
	
	while true
	do
		lnk0=`readlink /proc/$pid2/fd/0`
		lnk1=`readlink /proc/$pid1/fd/1`
		if [ "$lnk0" != "$myin" -a "$lnk1" != "$myout" ]
		then
			break
		fi
	done
	
	exec {wtr}>/proc/$pid1/fd/1 {rdr}</proc/$pid2/fd/0
	
	disown $pid2
	kill $pid1 $pid2
	
	eval $1=$rdr
	eval $2=$wtr
}

close()
{
	# SYNOPSIS
	#   mimic close(2) syscall
	# INVOCATION
	#   close <fd> [fd_2 [fd_3 [...]]]
	# EXAMPLE
	#   close 10
	# DESCRIPTION
	#   closes file descriptors given in arguments
	
	local fd
	for fd in "$@"
	do
		#eval "exec $fd>&-"
		exec {fd}>&-
	done
}

capture2()
{
	# SYNOPSIS
	#   store a command's stdout and stderr in separated variables
	#   without running it twice
	# INVOCATION
	#   capture2 <command> [arguments]
	# EXAMPLE
	#   capture2 ls -lRA /etc
	# DESCRIPTION
	#   use standard bash process substitution to get stdout,
	#   save it to $capture2_stdout
	#   use pipe() to get stderr, save it to $capture2_stderr
	# RETURN VALUE
	#   command's exit status
	# VARIABLES
	#   using the following shell global variables
	#   - capture2_stdout
	#   - capture2_stderr
	
	local x r w
	pipe r w
	capture2_stdout=$("$@" 2>&$w)
	x=$?
	close $w
	capture2_stderr=$(cat <&$r)
	close $r
	return $x
}

is_digit()
{
	[ "$1" = 0 -o "$1" = 1 -o "$1" = 2 -o "$1" = 3 -o "$1" = 4 -o "$1" = 5 -o "$1" = 6 -o "$1" = 7 -o "$1" = 8 -o "$1" = 9 ]
}

is_integer()
{
	[ "$1" -ge 0 -o "$1" -lt 0 ] 2>/dev/null
}

is_alpha()
{
	expr "$1" : '[a-zA-Z]\+$' >/dev/null 2>&1
}

warnx()
{
	# SYNOPSIS
	#   mimic warnx(3)
	echo "$0: $*" >&2
}

errx()
{
	# SYNOPSIS
	#   mimic errx(3)
	errno=$1
	shift
	warnx "$@"
	exit $errno
}

bash_isset()
{
	local sets=${2:-$-}
	sets=${sets//[!$1]/}
	echo ${sets:-_}
}

bash_defined()
{
	[ "${!1+x}" = x ]
}

bash_trapbody()
{
	local a
	a=`trap -p "$1"`
	if [ -z "$a" ]
	then
		echo -
		return
	fi
	a=${a:9}
	a=${a:0:-${#1}-2}
	echo "$a"
}

try()
{
	declare -g TRYSTACK
	local savesets=$-
	TRYSTACK+=($(bash_isset e $savesets)$(bash_isset E $savesets)"$(bash_trapbody ERR)")
	trap - ERR
	
	while [ -n "$1" ]
	do
		case "$1" in
		--except)
			shift
			trap "$1" ERR
			;;
		*)
			echo "Unknown option: $1" >&2
			set -o errexit
			false
			;;
		esac
		shift
	done
	
	set -o errexit
	set -o errtrace
}

untry()
{
	local trydata
	trydata=${TRYSTACK[-1]}
	unset TRYSTACK[${#TRYSTACK[@]}-1]
	[ "${trydata:0:1}" = _ ] && set +o errexit || set -o errexit
	[ "${trydata:1:1}" = _ ] && set +o errtrace || set -o errtrace
	trap "${trydata:2}" ERR
	return 0
}

template()
{
	cat "$@" |\
	{
		local line tvar var replace sedexpr
		while read line
		do
			sedexpr=""
			grep -Eo '%[a-zA-Z0-9\./_-]+%' <<<"$line" |\
			sort -u |\
			{
				while read tvar
				do
					# strip percent marks
					var=${tvar:1:$[${#tvar}-2]}
					# resolve bash variable
					replace=${!var}
					# compose sed expression like: s@%user\.name%@joe@g;s@%user\.email%@joe\@local@g;
					sedexpr="${sedexpr}s@${tvar//\./\\.}@${replace//@/\@}@g;"
				done
				# action
				sed -e "$sedexpr" <<<"$line"
			}
		done
	}
}

errorlevel()
{
	return $1
}
