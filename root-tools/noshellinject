#!/bin/bash

# This script, noshellinject, creates a mount namespace,
# in which common shell commands (/bin/sh, /bin/bash, ...) are bind-mounted over with "notashell".
#
# Using notashell(1) is supposed to prevent shell-injections.
#
# notashell(1) bypasses shell only when the program, which is called by noshellinject, does
# directly execute an over-mounted shell (notashell switches NOTASHELL_INTERCEPT environment off).
# So in your untrusted-argument-validator script and any of its subprocesses,
# sh(1)/bash(1) may be called at your convenience.
# This is safe, because it's your control what you pass to them from the validator.
#
# One notable thing in its mechanics is that this re-enablement of real shells
# is done not by switching back to the original mount namespace,
# because the neglegent program (which calls system(3) inconsiderately) may
# switch privilege level so its child process can not switch namespaces,
# but by keep calling notashell(1) in guise of sh(1)/bash(1)
# but no longer having NOTASHELL_INTERCEPT makes notashell(1) call the real boys
# from /var/lib/notashell where they were previously saved (bind-mounted).
# Therefore, don't allow users to change NOTASHELL_INTERCEPT environment either.

set -e

# where to save (bind-mount) read shell executables from /bin
real_shells_dir=/var/lib/notashell
# may extend if the neglegent program calls something else as shell
shellnames=(sh dash bash)

propagtype()
{
	findmnt --noheadings --output PROPAGATION "$1"
}

bind_mount_symlink()
{
	local src=$1
	local target=$2
	
	if type bindmount-v2 >/dev/null 2>&1
	then
		bindmount-v2 "$src" "$target"
	elif [ ! -L "$src" ]
	then
		mount --bind "$src" "$target"
	else
		echo "$0: $src is a symlink, which may unexpectedly leak out to the parent namespace if bind-mounted. stop." >&2
		return 1
	fi
}

if [ "$1" = --inner ]
then
	mkdir -p "$real_shells_dir"
	# bind-mount this dir over itself to be able to make private mounts under it
	mount --bind "$real_shells_dir" "$real_shells_dir"
	mount --make-private "$real_shells_dir"
	
	for shell in "${shellnames[@]}"
	do
		# can bind-mount existing paths only
		[ -f "$real_shells_dir/real-$shell" ] || true > "$real_shells_dir/real-$shell"
		# save the real shell for later use
		mount --bind /bin/$shell "$real_shells_dir/real-$shell"
	done
	
	# after sub-mounts are mounted, clean up the parent mount from the parent namespace
	nsenter -t $PPID -m umount -l "$real_shells_dir"
	
	# bind-mount this dir over itself to be able to make private mounts under it
	bind_mount_symlink /bin /bin
	mount --make-private /bin
	
	# over-mount shells to be able to intercept "sh -c commandLine" type calls
	for shell in "${shellnames[@]}"
	do
		bind_mount_symlink /usr/tool/notashell /bin/$shell
	done
	
	# after sub-mounts are mounted, clean up the parent mount from the parent namespace
	nsenter -t $PPID -m umount -l /bin
	
	shift
	export NOTASHELL_INTERCEPT=1
	exec "$@"
else
	propagation=`propagtype /`
	if [ "$propagation" != shared ]
	then
		echo "$0: mount events propagation of the root directory is $propagation, not shared." >&2
		exit 1
	fi
	
	exec unshare --mount --propagation=shared -- "$0" --inner "$@"
fi
