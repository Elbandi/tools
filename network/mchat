#!/usr/bin/perl

use Data::Dumper;
use Getopt::Long qw/:config no_ignore_case no_bundling no_getopt_compat no_auto_abbrev require_order/;
use Pod::Usage;
use IO::Socket::INET;
use IO::Socket::Multicast;
use IO::Select;
use Sys::Hostname;
use List::MoreUtils qw/all any none first_index/;
use Errno;
no if ($] >= 5.018), 'warnings' => 'experimental::smartmatch';

$NUL = chr  0;
$SOH = chr  1;
$STX = chr  2;
$ETX = chr  3;
$EOT = chr  4;
$LF  = "\n";
$CAN = chr 24;

$max_msg_len = 4096;
$relay_mark = " \x1B[1mâ†’\x1B[0m ";
$talk_mark = " \x1B[1m>>>\x1B[0m ";
$command_prefix = chr(0x1F);  # Ctrl-/
$input_prompt = '>>> ';
$multiline_input_prompt = '... ';


sub delete_first
{
	# delete the first occurrance of item in the array
	my $arrayref = shift;
	my $item = shift;
	splice @$arrayref, (first_index {$_ eq $item} @$arrayref), 1;
}

sub uuidgen
{
	open my $f, '<', '/proc/sys/kernel/random/uuid' or die "$0: open: $!\n";
	my $uuid = <$f>;
	chomp $uuid;
	close $f;
	return $uuid;
}

sub network_interfaces
{
	my @ifaces;
	for my $iface_path (glob "/sys/class/net/*")
	{
		my ($iface) = $iface_path =~ m{/([^/]+)$};
		push @ifaces, $iface;
	}
	return @ifaces;
}

sub local_ipv4_addresses
{
	return grep { /^[\d\.]+$/; } split /\s+/, `hostname -I`;
}

sub erase_prompt
{
	print STDERR "\r\x1B[K";
	$prompt_was_erased = 1;
}

sub socket_constant_name
{
	my $prefix = shift;
	my $num = shift;
	foreach my $const_name (keys %Socket::)
	{
		if($const_name =~ /^$prefix(.+)/)
		{
			my $name = $1;
			my $fullname = "Socket::$const_name";
			eval { &$fullname(); 1; } or next;
			return $name if $num == &$fullname();
		}
	}
	return "UNKNOWN($num)";
}

sub protocolname
{
	return socket_constant_name('IPPROTO_', $_[0]);
}

sub dump_io_socket
{
	my $s = shift;
	return {
		class => ref $s,
		endpoints => sprintf("%s:%d => %s:%d", $s->sockhost, $s->sockport, $s->peerhost, $s->peerport),
		timeout => $s->timeout,
		domain => socket_constant_name('AF_', $s->sockdomain),
		type => socket_constant_name('SOCK_', $s->socktype),
		protocol => protocolname($s->protocol),
	};
}

sub escape_nonsafe_chars
{
	# show non-terminal-safe chars as their ASCII representation in ANSI inverse
	# eg. 0x01 -> ^A, 0x1B -> ^[, 0x7F -> ^?
	my $s = shift;
	my $repl = shift || {};
	$s =~ s/[\x00-\x1F\x7F]/if(exists $repl->{$&}){ $repl->{$&} }else{ my $c = ord $&; sprintf "\x1B[7m^%c\x1B[27m", ($c+0x40) % 0x80 }/eg;
	return $s;
}



$anycast_addr = '0.0.0.0';
$broadcast_addr = '255.255.255.255';
$|++;

$OptPort = 1992;
$OptMulticastAddr = '239.199.2.0';  # i chose this address for this application
$OptBroadcastSend = 0;
$OptBroadcastRead = 0;
$OptNick = hostname;
@OptUnicast = ();

=pod

=head1 NAME

mchat - IP Multicast chat

=head1 OPTIONS

=over 4

=item -B, --broadcast-send

=item -b, --broadcast-read

Send and/or receive messages on broadcast.
Default is multicast-only.

=item --multicast-addr I<ADDR>

Default is B<239.199.2.0>.

=item -u, --unicast I<ADDR>[:I<PORT>][/[B<tcp> | B<udp>]]

Initiate connection to this target.
This option can be repeated.

=item -p, --port I<NUM>

Default port to communicate on.

=item -n, --nick I<STRING>

Specify this node's name.
Default is the hostname.

=back

=head1 DESCRIPTION

mchat(1) is a minimalistic peer-to-peer chat application
intended for small groups on trusted networks.
It operates over multicast, broadcast, and unicast IP channels.

It is designed to be small, self-contained, and suitable for quick communication
without the overhead of complex messaging systems.

=head1 FILES


=head1 WIRE PROTOCOL

Messages are directly put on datagram sockets (UDP, RAW IP, etc.) as ASCII text,
TCP is also supported but connection-oriented features are not relied upon.

Some ascii(7) control chars are used to indicate metadata or control data-flow.
Start Of Heading (B<SOH>) char is followed by metadata up to the next SOH, STX, or EOT.
Metadata is also ASCII text, at the beginning of message, in B<KEY>[=B<VALUE>] format,
ie. B<VALUE> is optional and B<KEY> can not contain equal sign (C<=>).

Start of TeXt (B<STX>) char is followed by the message submitted by a user.
End Of Transmission (B<EOT>) terminates the message.

Other control chars in the range of B<0x00>-B<0x1F> and B<0x7F> are reserved and
should not be expected to be neither preserved nor filtered out in user-submitted input.

=head1 KEYS

No line-editing is built in, but you may supplement it by running mchat(1) by a readline wrapper eg. rlwrap(1).
When using a readline addon, control keys go to it, not to mchat(1)'s input,
so you may press B<Ctrl-V> before control keys to make them go through.

=over 4

=item B<Ctrl-/>

Start control commands with this key-combination.
It usually appear as B<^_> on the terminal.
This produces the Unit Separator ascii(7) control char, but this is not related.
This is chosen because slash (C</>) is the command prefix is many chat applications.

=item B<Ctrl-X>

Cancel multiline message.
This produces the B<CAN>cel ascii(7) control char.

=item B<Ctrl-C>

Quit.

=item B<Ctrl-D>

Stop reading local input.
Incoming messages are still processed.

=back

=head1 CONTROL COMMANDS

=over 4

=item B<who>

Show learned node nick names and address.

=item B<dump>

Dump internal state on screen.

=item B<msg>

Start multiline message.

Terminate the message by [B<Ctrl-/>]B<end>.
It may appear at the end of a non-empty line, or on its own.
Content preceding it is included in the message.
Anything after it, including the final newline, is discarded.

If you changed your mind and don't want to send the already started multiline message,
type B<Ctrl-X> in a line on its own (trailing newline char is allowed).

=item B<scan>

=back

=head1 MESSAGE METADATA

=over 4

=item msgid

=item nick

=item scan

=item present

=item relay_from

=back

=head1 SECURITY

There is no rate limiting on incoming messages.

Control chars in incoming messages are escaped before displayed on the temrinal,
so remote users can not inject terminal control sequences in the local user's temrinal.
Escaping here means to replace chars to their caret-representation and printed in ANSI-inverse,
so eg. literal C<^[> can be distinguished visually from the escaped B<ESC> char,
which also look like C<^[> but printed in inverse colors.

Incoming message signs are also printed in an ANSI style, bold, which is never shown in incoming messages themself,
so a remote user can not trick the local user that an other message is also received.

If a nick name changed in respect of a peer node,
a notice is shown to the local user.

Messages are relayed to all peers (except on the socket where the message came in).
A node in the network can tamper with the relayed messages and the relay-chain information.
This is by design. If you want tamper-proof, build authentication/cryptography on top of it.

=head1 SEE ALSO

write(1), wall(1), rwall(1), rlwrap(1)

=cut

GetOptions(
	'B|broadcast-send!' => \$OptBroadcastSend,
	'b|broadcast-read!' => \$OptBroadcastRead,
	'multicast-addr=s' => \$OptMulticastAddr,
	'u|unicast=s@' => \@OptUnicast,
	'p|port=i' => \$OptPort,
	'n|nick=s' => \$OptNick,
	'help' => sub { pod2usage(-exitval=>0, -verbose=>99); },
	'<>' => sub { unshift @ARGV, @_[0]; die '!FINISH'; },
) or pod2usage(-exitval=>2, -verbose=>99);


sub system_message
{
	erase_prompt;
	print "\x1B[1;30m" . $_[0] . "\x1B[0m\n";
}

sub system_warning
{
	erase_prompt;
	print STDERR "\x1B[31m" . $_[0] . "\x1B[0m\n";
}

sub shout
{
	my $line = shift;
	my $meta = shift;
	my $only_senders = shift;
	
	$meta->{msgid} = uuidgen() unless exists $meta->{msgid};
	$meta->{nick} = $OptNick unless exists $meta->{nick};
	$sent_msgid{$meta->{msgid}} = 1;
	
	my $prepend = '';
	for my $metakey (keys %$meta)
	{
		$prepend .= $SOH . $metakey;
		$prepend .= '=' . $meta->{$metakey} if defined $meta->{$metakey};
	}
	my $data = $prepend . $STX . $line . $EOT;
	
	my $sent = 0;
	for my $writer (defined $only_senders ? @$only_senders : @net_writers)
	{
		if(ref $writer eq 'IO::Socket::Multicast')
		{
			for my $iface (network_interfaces())
			{
				if(eval { $writer->mcast_if($iface); 1 })
				{
					$writer->mcast_send($data, $mcast_dest);
					$sent++;
				}
				else
				{
					unless($!{EADDRNOTAVAIL} or $@ =~ /^interface is not multicast capable/)
					{
						system_warning "Could not set interface to $iface: $!: $@";
					}
				}
			}
		}
		else
		{
			if($writer->protocol == Socket::IPPROTO_TCP and not $writer->connected)
			{
			}
			else
			{
				$writer->send($data, 0);
				$sent++;
			}
		}
	}
	
	if($sent == 0)
	{
		system_warning "there was no working socket to send to";
	}
}


$read_handles = IO::Select->new();
$connecting_handles = IO::Select->new();
$read_handles->add(\*STDIN);
@net_readers = ();

if($OptBroadcastRead)
{
	my $bcast_reader = IO::Socket::INET->new(
		LocalPort => $OptPort,
		Proto	 => 'udp',
		ReuseAddr => 1,
		ReusePort => 1,
	) or die "Could not create broadcast receiver socket: $!\n";
	system_message "broadcast receiver created";
	$read_handles->add($bcast_reader);
	push @net_readers, $bcast_reader;
}

my $multicast_reader = IO::Socket::Multicast->new(
	LocalPort => $OptPort,
	Proto	 => 'udp',
	ReuseAddr => 1,
	ReusePort => 1,
) or die "Could not create multicast receiver socket: $!\n";
for my $local_ip (local_ipv4_addresses())
{
	unless($multicast_reader->mcast_add($OptMulticastAddr, $local_ip))
	{
		system_warning "Could not join to multicast group $OptMulticastAddr on local interface $local_ip: $!";
	}
}
system_message "multicast receiver created";
$read_handles->add($multicast_reader);
push @net_readers, $multicast_reader;


# TODO support icmp listener
# TODO support raw ip listener
my $anycast_listener_udp = IO::Socket::INET->new(
	LocalAddr => $anycast_addr,
	LocalPort => $OptPort,
	Proto	  => 'udp',
	ReuseAddr => 1,
	ReusePort => 1,
) or die "Could not create anycast receiver UDP socket: %s\n", $!;
system_message "anycast udp receiver created";
push @net_listeners, $anycast_listener_udp;
$read_handles->add($anycast_listener_udp);

my $anycast_listener_tcp = IO::Socket::INET->new(
	LocalAddr => $anycast_addr,
	LocalPort => $OptPort,
	Proto	  => 'tcp',
	Listen    => SOMAXCONN,
	ReuseAddr => 1,
	ReusePort => 1,
) or die "Could not create anycast receiver TCP socket: %s\n", $!;
system_message "anycast tcp receiver created";
push @net_listeners, $anycast_listener_tcp;
$read_handles->add($anycast_listener_tcp);



@net_writers = ();
if($OptBroadcastSend)
{
	for my $local_ip (local_ipv4_addresses())
	{
		my $net_write = IO::Socket::INET->new(
			LocalAddr => $local_ip,
			PeerPort  => $OptPort,
			PeerAddr  => $broadcast_addr,
			Broadcast => 1,
			ReuseAddr => 1,
			ReusePort => 1,
			Proto	 => 'udp',
		) or system_warning "Could not create broadcast sender socket on local interface $local_ip: $!";
		next unless $net_write;
		system_message "broadcast sender bound to local IP $local_ip";
		push @net_writers, $net_write;
	}
}

$mcast_dest = sockaddr_in($OptPort, inet_aton($OptMulticastAddr));
$multicast_write = IO::Socket::Multicast->new(
	LocalPort => $OptPort,
	Proto	 => 'udp',
	ReuseAddr => 1,
	ReusePort => 1,
) or system_warning "Could not create multicast sender socket: $!";
$multicast_write->mcast_loopback(0);
$multicast_write->mcast_add($OptMulticastAddr) or die "Could not join to multicast group $OptMulticastAddr: $!\n";
system_message "multicast sender created";
push @net_writers, $multicast_write;


sub create_unicast_sender
{
	my $target = shift;
	my $io_socket_inet_params = shift || {};
	my ($addr, $port, $proto) = $target =~ m{^([^:/]+)(?::(\d+))?(?:/(tcp|udp))?$};
	if(not length $addr)
	{
		die "unknown target address '$target'";
	}
	# TODO support icmp, raw ip
	my $proto = lc $proto || 'udp';
	my $blocking = $proto eq 'tcp' ? 0 : 1;
	my $port = $port || $OptPort;
	my $canon_target = sprintf "%s:%d/%s", $addr, $port, $proto;
	
	my $sock = IO::Socket::INET->new(
		PeerAddr  => $addr,
		PeerPort  => $port,
		Proto	  => $proto,
		ReuseAddr => 1,
		ReusePort => 1,
		Blocking  => $blocking,
		%$io_socket_inet_params,
	) or system_warning sprintf "Could not create unicast sender %s socket: %s", $canon_target, $!;
	$unicast_senders{$target} = { target=>$target, canon_target=>$canon_target, addr=>$addr, port=>$port, proto=>$proto, protonum=>$sock->protocol, } unless exists $unicast_senders{$target};
	$unicast_senders{$target}->{sock} = $sock;
	if($proto eq 'tcp')
	{
		# connection-oriented sockets need to be connected first
		$connecting_handles->add($sock);
	}
	else
	{
		# connection-less sockets can be read right away
		push @net_writers, $sock;
		$read_handles->add($sock);
	}
	return $sock;
}

sub schedule_connect
{
	my $sender = shift;
	my $reconnect_interval_base = 2;
	my $reconnect_interval = $reconnect_interval_base * $sender->{reconnect_count};
	$sender->{scheduled_reconnect} = $sender->{end} + $reconnect_interval;
}

sub manage_poll_timeout
{
	my @schedules = sort {$a<=>$b} grep {defined} map {$_->{scheduled_reconnect}} values %unicast_senders;
	if(@schedules)
	{
		my $soonest = $schedules[0];
		$poll_timeout = $soonest - time;
		$poll_timeout = 0 if $poll_timeout <= 0;
	}
	else
	{
		$poll_timeout = undef;
	}
}

sub manage_reconnects
{
	for my $sender (values %unicast_senders)
	{
		if(defined $sender->{scheduled_reconnect} and $sender->{scheduled_reconnect} le time)
		{
			if(eval { create_unicast_sender($sender->{target}); 1; })
			{
				delete $sender->{scheduled_reconnect};
			}
			else
			{
				system_warning $@;
			}
		}
	}
}

%unicast_senders = ();
for my $target (@OptUnicast)
{
	eval { create_unicast_sender($target); 1; } or die $@;
	system_message sprintf "unicast sender %s created", $unicast_senders{$target}->{canon_target};
}



%sent_msgid = ();
%received_msgid = ();
%nicks_are_from = ();
$prompt_was_erased = 1;
$poll_timeout = undef;
%unicast_back_senders = ();
$multiline_input_mode = 0;
$multiline_input = '';

shout(undef, {scan=>undef,});

while(1)
{
	if($prompt_was_erased and $read_handles->exists(\*STDIN))
	{
		print STDERR $multiline_input_mode ? $multiline_input_prompt : $input_prompt;
		$prompt_was_erased = 0;
	}
	
	manage_poll_timeout;
	my ($read_ready, $write_ready, undef) = IO::Select::select($read_handles, $connecting_handles, undef, $poll_timeout);
	manage_reconnects;
	
	for my $fh (@$write_ready)
	{
		my ($sender) = grep {;$_->{sock} eq $fh} values %unicast_senders;
		$connecting_handles->remove($fh);
		
		$! = unpack('i', getsockopt($fh, SOL_SOCKET, SO_ERROR));
		if($!)
		{
			system_warning sprintf "can not connect to %s, error %d: %s", $sender->{canon_target}, $!, $!;
			$fh->close;
			
			# restart connection
			$sender->{end} = time;
			$sender->{reconnect_count}++;
			schedule_connect($sender);
		}
		else
		{
			# TCP connection established.
			system_message sprintf "connected to %s", $sender->{canon_target};
			$sender->{reconnect_count} = 0;
			push @net_writers, $fh;
			$read_handles->add($fh);
			shout(undef, {scan=>undef,}, [$fh]);
		}
	}
	
	for my $fh (@$read_ready)
	{
		if ($fh eq \*STDIN)
		{
			my $line = <STDIN>;
			$prompt_was_erased = 1;
			unless(defined $line)
			{
				erase_prompt;
				$read_handles->remove(\*STDIN);
				next;
			}
			
			my $multiline_input_done = 0;
			if($multiline_input_mode)
			{
				if($line =~ m{^$CAN$/?$})
				{
					# discard input by Ctrl-X [Return]
					undef $line;
					$multiline_input_mode = 0;
					next;
				}
				if($line =~ s/\Q$command_prefix\Eend.*//)
				{
					$multiline_input_done = 1;
					$multiline_input_mode = 0;
				}
				$multiline_input .= $line;
				undef $line;
			}
			else
			{
				# support multiline messages by ending each input lines with backslash.
				while($line =~ s{\\($/)$}{$1})
				{
					print STDERR $multiline_input_prompt;
					my $nextline = <STDIN>;  # FIXME this blocks processing other filehandles
					if($nextline =~ m{^$CAN$/?$})
					{
						# discard input by Ctrl-X [Return]
						undef $line;
						last;
					}
					$line .= $nextline;
				}
			}
			
			if($multiline_input_done)
			{
				$line = $multiline_input;
			}
			
			next if $line eq $/ or not length $line;
			
			if($line =~ s/^\Q$command_prefix\E//)
			{
				$line =~ s/^(\S+)\s*//;
				my $cmd = $1;
				if($cmd eq "help")
				{
					print "Commands:\n" . join '', map {" ^/$_\n"} qw/who dump msg end/;
				}
				elsif($cmd eq "dump")
				{
					warn Dumper {
						'nicks_from_nodes' => \%nicks_are_from,
						'net_writers' => [map {dump_io_socket($_)} @net_writers],
						'net_listeners' => [map {dump_io_socket($_)} @net_listeners],
						'net_readers' => [map {dump_io_socket($_)} @net_readers],
						'unicast_senders' => {map {
							my $v = $unicast_senders{$_};
							$_=>{%$v, sock=>dump_io_socket($v->{sock})}
						} keys %unicast_senders},
					};
				}
				elsif($cmd eq "who")
				{
					print join '', map {sprintf "%s\t%s\n", ($nicks_are_from{$_}||'(anon)'), $_} sort {lc $nicks_are_from{$a} cmp lc $nicks_are_from{$b}} keys %nicks_are_from;
				}
				elsif($cmd eq "msg")
				{
					$multiline_input_mode = 1;
					$multiline_input = '';
				}
				elsif($cmd eq "scan")
				{
					shout(undef, {scan=>undef,});
				}
				next;
			}
			
			shout($line, {});
		}
		else
		{
			if($fh->protocol == Socket::IPPROTO_TCP)
			{
				if(any {;$fh eq $_} @net_listeners)
				{
					# this is a TCP listener socket, receiving a new client.
					
					if(my $connection = $fh->accept)
					{
						$connection->autoflush(1);
						system_message sprintf "new connection from %s:%d on %s:%d/%s listener",
							$connection->peerhost, $connection->peerport,
							$connection->sockhost, $connection->sockport, protocolname($connection->protocol);
						push @net_writers, $connection;
						$read_handles->add($connection);
					}
					else
					{
						system_warning sprintf "can not accept connection on %s:%s/%s listener: %s", $fh->sockaddr, $fh->sockport, protocolname($fh->protocol), $!;
					}
					next;
				}
			}
			
			my $datagrams;
			my $peer_ip;
			my $remote = $fh->recv($datagrams, $max_msg_len);
			if($fh->protocol == Socket::IPPROTO_TCP)
			{
				$peer_ip = $fh->peerhost;
			}
			else
			{
				if(not defined $remote)
				{
					# could not read anything from the socket
					if($!{ECONNREFUSED})
					{
						my ($back_sender) = grep {;$_ eq $fh} values %unicast_back_senders;
						if(defined $back_sender)
						{
							# remove expired connection-less client
							$read_handles->remove($fh);
							delete_first \@net_writers, $fh;
							system_message sprintf "connection from %s:%d on %s:%d/%s listener closed",
								$fh->peerhost, $fh->peerport,
								$fh->sockhost, $fh->sockport, protocolname($fh->protocol);
							$fh->close;
						}
					}
					# TODO handle other type of errors
					next;
				}
				
				my ($peerport, $peeraddr) = sockaddr_in($remote);
				$peer_ip = inet_ntoa($peeraddr);
				
				# add connection-less unicast peer if it is not there yet:
				if(not grep {$_->{addr} eq $peer_ip and $_->{port} eq $peerport and $_->{protonum} eq $fh->protocol} values %unicast_senders)
				{
					my $proto = lc protocolname($fh->protocol);
					my $target = "$peer_ip:$peerport/$proto";
					if(eval { create_unicast_sender($target, {LocalPort=>$fh->sockport}); 1; }) {
						system_message sprintf "unicast sender %s created", $unicast_senders{$target}->{canon_target};
						$unicast_back_senders{$target} = $unicast_senders{$target}->{sock};
					}
					else { system_warning $@; }
				}
			}
			
			for my $data (split $EOT, $datagrams)
			{
				if($fh->protocol == Socket::IPPROTO_TCP and not length $data)
				{
					# this is TCP client connection (accepted or initiated) closed the connection.
					# if an accepted connection got closed, just drop it.
					# if an initiated connection got closed, restart it.
					
					my ($sender) = grep {;$_->{sock} eq $fh} values %unicast_senders;
					
					$read_handles->remove($fh);
					delete_first \@net_writers, $fh;
					
					if(defined $sender)
					{
						system_message sprintf "unicast sender %s:%d/%s closed",
							$fh->peerhost, $fh->peerport, protocolname($fh->protocol);
					}
					else
					{
						system_message sprintf "connection from %s:%d on %s:%d/%s listener closed",
							$fh->peerhost, $fh->peerport,
							$fh->sockhost, $fh->sockport, protocolname($fh->protocol);
					}
					$fh->close;
				
					if(defined $sender)
					{
						# restart TCP unicast sender
						$sender->{end} = time;
						schedule_connect($sender);
					}
					
					next;
				}
				
				my %metadata = ();
				while($data =~ s/^$SOH([^=\x00-\x1F]+)(?:=([^$SOH$STX]*))?//)
				{
					$metadata{$1} = $2;
				}
				$data =~ s/^$STX//;
				
				my $msgid = $metadata{msgid} || uuidgen();
				next if exists $sent_msgid{$msgid};
				my $nick = $metadata{nick};
				my $nickprint = escape_nonsafe_chars($nick) || '(anon)';
				
				
				my @relay_chain = split /\s+/, $metadata{relay_from};
				my $relay_chain_print = join(' â†’ ', (map {escape_nonsafe_chars($_)} @relay_chain), $peer_ip);
				my $nick_is_from = $peer_ip;
				if($metadata{relay_from})
				{
					$nick_is_from = join ' ', @relay_chain, $peer_ip;
				}
				
				if(not $nick_is_from ~~ [keys %nicks_are_from])
				{
					system_message sprintf "%s is from %s", $nickprint, $relay_chain_print;
				}
				
				if(defined $nicks_are_from{$nick_is_from} and $nicks_are_from{$nick_is_from} ne $nick)
				{
					system_message sprintf "instead of %s, %s is transmitting from %s",
						escape_nonsafe_chars($nicks_are_from{$nick_is_from}) || '(anon)', 
						$nickprint, $relay_chain_print;
				}
				$nicks_are_from{$nick_is_from} = $nick;
				
				
				next if exists $received_msgid{$msgid};
				$received_msgid{$msgid} = 1 if defined $metadata{msgid};  # remember this message only if the sender set the msgid, not us.
				
				my $dataprint = $data =~ s/$LF$//r;
				if(length $dataprint)
				{
					$dataprint = escape_nonsafe_chars($dataprint, {$LF=>$LF,});
					$dataprint = $LF . $dataprint if $dataprint =~ /$LF/;  # place the first line of a multiline message on its own separate line as well, not only subsequent lines, so char columns line-up just like for the sender.
					erase_prompt;
					printf "%s%s%s%s%s%s\n",
						(exists $metadata{relay_from} ? join '', map {escape_nonsafe_chars($_).$relay_mark} @relay_chain : ''),
						$peer_ip, $relay_mark,
						$nickprint, $talk_mark, $dataprint;
				}
				
				if(exists $metadata{scan})
				{
					shout(undef, {present=>1,});
				}
				
				# relay message on all sockets other than the one the message came in
				my @relay_sockets = grep {$fh ne $_} @net_writers;
				$metadata{msgid} = $msgid unless defined $metadata{msgid};
				$metadata{relay_from} .= ' ' if $metadata{relay_from}; $metadata{relay_from} .= $peer_ip;
				shout($data, \%metadata, \@relay_sockets);
			}
		}
	}
}
