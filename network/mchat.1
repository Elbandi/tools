.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "STDIN 1"
.TH STDIN 1 "2025-04-26" "perl v5.36.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
mchat \- IP Multicast chat
.SH "OPTIONS"
.IX Header "OPTIONS"
.IP "\-B, \-\-broadcast\-send" 4
.IX Item "-B, --broadcast-send"
.PD 0
.IP "\-b, \-\-broadcast\-read" 4
.IX Item "-b, --broadcast-read"
.PD
Send and/or receive messages on broadcast.
Default is multicast-only.
.IP "\-\-multicast\-addr \fI\s-1ADDR\s0\fR" 4
.IX Item "--multicast-addr ADDR"
Default is \fB239.199.2.0\fR.
.IP "\-u, \-\-unicast \fI\s-1ADDR\s0\fR[:\fI\s-1PORT\s0\fR][/[\fBtcp\fR | \fBudp\fR]]" 4
.IX Item "-u, --unicast ADDR[:PORT][/[tcp | udp]]"
Initiate connection to this target.
This option can be repeated.
.IP "\-p, \-\-port \fI\s-1NUM\s0\fR" 4
.IX Item "-p, --port NUM"
Default port to communicate on.
.IP "\-n, \-\-nick \fI\s-1STRING\s0\fR" 4
.IX Item "-n, --nick STRING"
Specify this node's name.
Default is the hostname.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\fBmchat\fR\|(1) is a minimalistic peer-to-peer chat application
intended for small groups on trusted networks.
It operates over multicast, broadcast, and unicast \s-1IP\s0 channels.
.PP
It is designed to be small, self-contained, and suitable for quick communication
without the overhead of complex messaging systems.
.SH "FILES"
.IX Header "FILES"
.SH "WIRE PROTOCOL"
.IX Header "WIRE PROTOCOL"
Messages are directly put on datagram sockets (\s-1UDP, RAW IP,\s0 etc.) as \s-1ASCII\s0 text,
\&\s-1TCP\s0 is also supported but connection-oriented features are not relied upon.
.PP
Some \fBascii\fR\|(7) control chars are used to indicate metadata or control data-flow.
Start Of Heading (\fB\s-1SOH\s0\fR) char is followed by metadata up to the next \s-1SOH, STX,\s0 or \s-1EOT.\s0
Metadata is also \s-1ASCII\s0 text, at the beginning of message, in \fB\s-1KEY\s0\fR[=\fB\s-1VALUE\s0\fR] format,
ie. \fB\s-1VALUE\s0\fR is optional and \fB\s-1KEY\s0\fR can not contain equal sign (\f(CW\*(C`=\*(C'\fR).
.PP
Start of TeXt (\fB\s-1STX\s0\fR) char is followed by the message submitted by a user.
End Of Transmission (\fB\s-1EOT\s0\fR) terminates the message.
.PP
Other control chars in the range of \fB0x00\fR\-\fB0x1F\fR and \fB0x7F\fR are reserved and
should not be expected to be neither preserved nor filtered out in user-submitted input.
.SH "KEYS"
.IX Header "KEYS"
No line-editing is built in, but you may supplement it by running \fBmchat\fR\|(1) by a readline wrapper eg. \fBrlwrap\fR\|(1).
When using a readline addon, control keys go to it, not to \fBmchat\fR\|(1)'s input,
so you may press \fBCtrl-V\fR before control keys to make them go through.
.IP "\fBCtrl\-/\fR" 4
.IX Item "Ctrl-/"
Start control commands with this key-combination.
It usually appear as \fB^_\fR on the terminal.
This produces the Unit Separator \fBascii\fR\|(7) control char, but this is not related.
This is chosen because slash (\f(CW\*(C`/\*(C'\fR) is the command prefix is many chat applications.
.IP "\fBCtrl-X\fR" 4
.IX Item "Ctrl-X"
Cancel multiline message.
This produces the \fB\s-1CAN\s0\fRcel \fBascii\fR\|(7) control char.
.IP "\fBCtrl-C\fR" 4
.IX Item "Ctrl-C"
Quit.
.IP "\fBCtrl-D\fR" 4
.IX Item "Ctrl-D"
Stop reading local input.
Incoming messages are still processed.
.SH "CONTROL COMMANDS"
.IX Header "CONTROL COMMANDS"
.IP "\fBwho\fR" 4
.IX Item "who"
Show learned node nick names and address.
.IP "\fBdump\fR" 4
.IX Item "dump"
Dump internal state on screen.
.IP "\fBmsg\fR" 4
.IX Item "msg"
Start multiline message.
.Sp
Terminate the message by [\fBCtrl\-/\fR]\fBend\fR.
It may appear at the end of a non-empty line, or on its own.
Content preceding it is included in the message.
Anything after it, including the final newline, is discarded.
.Sp
If you changed your mind and don't want to send the already started multiline message,
type \fBCtrl-X\fR in a line on its own (trailing newline char is allowed).
.SH "MESSAGE METADATA"
.IX Header "MESSAGE METADATA"
.IP "msgid" 4
.IX Item "msgid"
.PD 0
.IP "nick" 4
.IX Item "nick"
.IP "scan" 4
.IX Item "scan"
.IP "present" 4
.IX Item "present"
.IP "relay_from" 4
.IX Item "relay_from"
.PD
.SH "SECURITY"
.IX Header "SECURITY"
There is no rate limiting on incoming messages.
.PP
Control chars in incoming messages are escaped before displayed on the temrinal,
so remote users can not inject terminal control sequences in the local user's temrinal.
Escaping here means to replace chars to their caret-representation and printed in ANSI-inverse,
so eg. literal \f(CW\*(C`^[\*(C'\fR can be distinguished visually from the escaped \fB\s-1ESC\s0\fR char,
which also look like \f(CW\*(C`^[\*(C'\fR but printed in inverse colors.
.PP
Incoming message signs are also printed in an \s-1ANSI\s0 style, bold, which is never shown in incoming messages themself,
so a remote user can not trick the local user that an other message is also received.
.PP
If a nick name changed in respect of a peer node,
a notice is shown to the local user.
.PP
Messages are relayed to all peers (except on the socket where the message came in).
A node in the network can tamper with the relayed messages and the relay-chain information.
This is by design. If you want tamper-proof, build authentication/cryptography on top of it.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fBwrite\fR\|(1), \fBwall\fR\|(1), \fBrwall\fR\|(1), \fBrlwrap\fR\|(1)
