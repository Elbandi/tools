#!/usr/bin/env perl

=pod

=head1 NAME

td-env - Add tabular data fields to environment and invoke a command for each record

=head1 SYNOPSIS

td-env [I<OPTIONS>] [--] I<COMMAND> [I<ARGS>]

=head1 DESCRIPTION

Takes Tabular Data on its input
and adding fields to the environment for I<COMMAND>
and executes it for each input record.

=head1 EXAMPLE

Data:

  | username | score |
  |----------|-------|
  | joe      | 1.0   |
  | james    | 2.1   |
  | jeremy   | n/a   |

Command:

  td-env sh -c 'Hi $username, your score is $score!'

Output:

  Hi joe, your score is 1.0!
  Hi james, your score is 2.1!
  Hi jeremy, your score is n/a!

=head1 OPTIONS

=over 4

=item -p, --prefix I<PREFIX>

Prefix environment variable names by I<PREFIX>

=item -e, --errexit

Stop processing records once a command failed.
td-env(1) exit with the last command's exit code
(or 128 + signal number if terminated by a signal).

=back

=head1 SECURITY

td-env(1) does not do any measure to protect critical environment variables,
such as PATH, HOME, etc.
They (probably) won't affect td-env(1) itself (perhaps the perl interpreter is affected)
but the called I<COMMAND> does.
It's the user's responsibility to feed tabular data into it with safe header names.

=head1 SEE ALSO

env(1), environ(7)

=cut


no if ($] >= 5.018), 'warnings' => 'experimental::smartmatch';


$OptErrexit = 0;
$OptPrefix = '';
%OptionDefs = (
	'e|errexit!' => \$OptErrexit,
	'p|prefix=s' => \$OptPrefix,
);

do '/usr/lib/tool/perl5/tabdata/common.pl' or die "$@";


process_header(scalar <STDIN>);

RECORD:
while(not eof STDIN)
{
	my @row = read_record(\*STDIN);
	my $status = 0;
	
	# localize the given keys in %ENV, so they won't affect other parts of the code,
	# and still inherited by system() call.
	{
		# this assigment drop extra columns (if a row has more fields than the header)
		# and undef a given $ENV{FIELDNAME} if there is not that many fields in a certain row.
		local @ENV{map {$OptPrefix.$_} @Header} = @row;
		system {$ARGV[0]} @ARGV;
		$status = $?;
	}
	
	if($OptErrexit and $status != 0)
	{
		if($status == -1)
		{
			my ($errno, $errmsg) = (int $!, $!);
			warn "$0: exec: $ARGV[0]: $errmsg\n";
			exit $errno;
		}
		else
		{
			my $signal = $status & 127;
			if($signal)
			{
				warn "$0: $ARGV[0]: killed by signal $signal\n";
				exit 128+$signal;
			}
			else
			{
				my $exitcode = $status >> 8;
				warn "$0: $ARGV[0]: exit $exitcode\n";
				exit $exitcode;
			}
		}
	}
}
