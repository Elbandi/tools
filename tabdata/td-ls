#!/usr/bin/env perl

=pod

=head1 NAME

td-ls - ls(1)-like file list but more machine-parseable

=head1 SYNOPSIS

td-ls [I<OPTIONS>] [I<PATHS>] [-- I<FIND-OPTIONS>]

=head1 OPTIONS, ls(1)-compatible

=over 4

=item -A, --almost-all

=item -g

=item -G, --no-group

=item -i, --inode

=item -l (implied)

=item -n, --numeric-uid-gid

=item -o

=item --time=[atime, access, use, ctime, status, birth, creation, mtime, modification]

=item -R, --recursive

=item -U (implied, pipe to sort(1) if you want)

=back

=head1 OPTIONS, not ls(1)-compatible

=over 4

=item --devnum

=item -H, --no-header

=item --no-symlink-target

=item --add-field I<FIELD-NAME>

Add extra fields by name.
See field names by B<--help-field-names> option.
May be added multiple times.

=item --add-field-macro I<FORMAT>

Add extra fields by find(1)-style format specification.
For valid I<FORMAT>s, see B<-printf> section in find(1).
May be added multiple times.
Putting C<\\0> (backslash-zero) in I<FORMAT> screws up the output; don't do that.

=item --help-field-names

Show valid field names to be used for B<--add-field> option.

=back

=head1 DESCRIPTION

Columns are similar to good old ls(1):
PERMS (symbolic representation),
LINKS,
USERNAME (USERID if B<-n> option is given),
GROUPNAME (GROUPID if B<-n> option is given),
SIZE (in bytes),
time field is either ATIME, CTIME, or default MTIME (in full-iso format),
BASENAME (or RELPATH in B<--recursive> mode),
and SYMLINKTARGET (unless B<--no-symlink-target> option is given).

Column names are a bit different than td-trans-ls(1) produces, but this is intentional,
because fields by these 2 tools have slightly different meaning.
td-trans-ls(1) is less smart because it just transforms ls(1)'s output and
does not always know what is in the input exactly; while td-ls(1) itself controls
what data goes to the output.

No color support.

=head1 FORMAT

Output format is tabular data: a table, in which fields are delimited by TAB
and records by newline (LF).

Meta chars may occur in some fields (path, filename, symlink target, etc),
these are escaped this (perl-compatible) way:

 | Raw char  | Substituted to |
 |-----------|----------------|
 | ESC       | \e             |
 | TAB       | \t             |
 | LF        | \n             |
 | CR        | \r             |
 | Backslash | \\             |

Other control chars (charcode below 32 in ASCII)
including NUL, vertical-tab, and form-feed are left as-is.

=head1 ENVIRONMENT

=over 4

=item TIME_STYLE

B<TIME_STYLE> is ignored as well as I<--time-style> option.
Always show date-time in C<%F %T %z> strftime(3) format!
It's simply the most superior.
Equivalent to B<TIME_STYLE=full-iso>.

=back

=head1 SEE ALSO

td-select(1), td-filter(1), td-trans-ls(1)

=cut


use Getopt::Long qw/:config no_ignore_case bundling no_getopt_compat/;
use Pod::Usage;
use Data::Dumper;
no if ($] >= 5.018), 'warnings' => 'experimental::smartmatch';
$TabdataCommonSkipGetopt = 1;
do '/usr/lib/tool/perl5/tabdata/common.pl' or die "$@";


%field_macro = (qw/devnum %D inode %i perms %M links %n username %u userid %U groupname %g groupid %G size %s 
	basename %f relpath %p dirpath %h symlinktarget %l
	depth %d fstype %F perms-octal %m ftype %y ltype %Y/,
	'atime', '%AF %AT %Az',
	'btime', '%BF %BT %Bz',
	'ctime', '%CF %CT %Cz',
	'mtime', '%TF %TT %Tz');

%time_types = qw/atime a access a use a ctime c status c birth b creation b mtime m modification m/;


@depthopts = qw/-mindepth 1 -maxdepth 1/;
$show_inode = 0;
$show_devnum = 0;
$uidgid_numeric = 0;
$hide_user = 0;
$hide_group = 0;
$recursive = 0;
$show_symlink_target = 1;
$show_header = 1;
$time_type = 'm';
@extra_fields = ();
@extra_macros = ();
%ignore_name = ('dotfiles'=>'.*',);

GetOptions(
	'A|almost-all' => sub{ delete $ignore_name{'dotfiles'}; },
	'l' => sub{},
	'i|inode' => \$show_inode,
	'devnum' => \$show_devnum,
	'n|numeric-uid-gid' => \$uidgid_numeric,
	'G|no-group' => \$hide_group,
	'g' => \$hide_user,
	'o' => \$hide_group,
	'symlink-target!' => \$show_symlink_target,
	'R|recursive' => \$recursive,
	'header!' => \$show_header,
	'c' => sub{ $time_type = 'c'; },
	'u' => sub{ $time_type = 'a'; },
	'time=s' => sub{ $time_type = $time_types{$_[1]} or die "$0: unknown time type: $_[0]\n"; },
	'add-field=s@' => \@extra_fields,
	'add-field-macro=s@' => \@extra_macros,
	'help|?' => sub{ pod2usage(-exitval=>0, -verbose=>99); },
	'help-field-names' => sub{ print "$_\n" for sort keys %field_macro; exit 0; },
) or pod2usage(-exitval=>2, -verbose=>99);


@depthopts = () if $recursive;
@fields = ();

push @fields, 'devnum' if $show_devnum;
push @fields, 'inode' if $show_inode;
push @fields, 'perms', 'links';
push @fields, ($uidgid_numeric ? 'uid' : 'username') if not $hide_user;
push @fields, ($uidgid_numeric ? 'gid' : 'groupname') if not $hide_group;
push @fields, 'size';
push @fields, $time_type.'time';
push @fields, ($recursive ? 'relpath' : 'basename');
push @fields, 'symlinktarget' if $show_symlink_target;
push @fields, @extra_fields;

@field_macros = ();
push @field_macros, map {$field_macro{$_}} @fields;
push @field_macros, @extra_macros;

$FS = "\t";
$RS = "\n";

if($show_header)
{
	@header = ();
	push @header, map {uc} @fields;
	push @header, @extra_macros;
	print join($FS, @header).$RS;
}

# since we can't ask find(1) to escape meta chars properly
# (replaces all LF/TAB/ESC/â€¦ uniformly to "?" if output is a terminal, and
# does not escapes anything if output is pipe or file),
# and there probably will be data fields which may contain arbitrary bytes,
# eg. paths, file names, link targets, etc,
# we delimit fields by NUL
# (NUL hopefully won't be in them).
# Then escape them properly
# and output in tabular data format to the user.

open $fh, '-|', 'find', @ARGV, @depthopts, 
	(map {('!', '-name', $_)} values %ignore_name), 
	'-printf', join("\\0", @field_macros)."\\0"
or die "$0: $!\n";

$/ = "\0";

RECORD:
while(1)
{
	FIELD:
	for my $colnum (0..$#field_macros)
	{
		my $arbitrary_data = <$fh>;
		last RECORD if $arbitrary_data eq '';
		chomp $arbitrary_data;
		my $tabular_data = escape_tabdata($arbitrary_data);
		print $FS if $colnum > 0;
		print $tabular_data;
	}
	print $RS;
}
