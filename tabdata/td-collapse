#!/usr/bin/env perl

=pod

=head1 NAME

td-collapse - Collapse multiple tabular data records with equivalent keys into one.

=head1 SYNOPSIS

td-collapse [I<OPTIONS>]

=head1 DESCRIPTION

It goes row-by-row on a sorted tabular data stream
and if 2 or more subsequent rows' first (key) cell are
the same then collapse them into one row.
This is done by joining corresponding cells' data from each row into one
cell, effectively keeping every column's data in the same column.

If you want to group by an other column, not the first one, then first
reorder the columns by td-select(1). Eg. C<td-select KEYCOLUMN +REST>.

=head1 OPTIONS

=over 4

=item -g, --glue I<STR>

Delimiter character or string between joined cell data.
Default is space.

=item -u, --distribute-unique-field I<FIELD>

Take the I<FIELD> column's cells from the first collapsed group,
and multiplicate all other columns as many times as many rows are in this group,
in a way that each cell goes under a new column corresponding to that cell's original row.
I<FIELD> field's cells need to be unique within each groups.

If an unexpected value found during processing the 2nd row group and onwards,
ie. a value which was not there in the first group,
it won't be distibuted into the new column, since the header is already sent,
but left in the original column just like B<-u> option would not be in effect.
See "pause" and "resume" in the example below.

B<Example>:

 ID | EVENT  | TIME  | STATUS
 15 | start  | 10:00 |
 15 | end    | 10:05 | ok
 16 | start  | 11:00 |
 16 | end    | 11:06 | err
 16 | pause  | 11:04 |
 16 | resume | 11:05 |
 
 td-collapse -u EVENT
 
 COUNT | ID | EVENT        | TIME        | TIME_start | TIME_end | STATUS | STATUS_start | STATUS_end
 2     | 15 |              |             | 10:00      | 10:05    |        |              | ok
 4     | 16 | pause resume | 11:04 11:05 | 11:00      | 11:06    |        |              | err

=item -s, --distributed-column-name-separator I<STR>

When generating new columns as described at B<-u> option,
join the original column name with each of the unique field's values
by I<STR> string.
See example at B<-u> option description.
Default is underscore C<_>.

=back

=head1 EXAMPLES

This pipeline shows which users are using each of the configured default
shells, grouped by shell path.

  # get the list of users
  getent passwd |\
  
  # transform into tabular data stream
  tr : "\t" |\
  td-add-headers USER X UID GID GECOS HOME SHELL |\
  
  # put the shell in the first column, and sort, then collapse
  td-select SHELL USER | td-keepheader sort | td-collapse -g ' ' |\
  
  # change header name "USER" to "USERS"
  td-alter USERS=USER | td-select +ALL -USER
  
B<Output>:
  
  | COUNT | SHELL             | USERS                                        |
  | 4     | /bin/bash         | user1 user2 nova root                        |
  | 5     | /bin/false        | fetchmail hplip sddm speech-dispatcher sstpc |
  | 1     | /bin/sync         | sync                                         |
  | 1     | /sbin/rebootlogon | reboot                                       |
  | 6     | /usr/sbin/nologin | _apt avahi avahi-autoipd backup bin daemon   |

=head1 CAVEATS

Have to sort input data first.

Group key is always the first input column.

If a row in the input data has more cells than the number of columns, those are ignored.

=head1 SEE ALSO

td-expand(1) is a kind of an inverse to td-collapse(1).

=head1 REFERENCES

td-collapse(1) roughly translates to SELECT COUNT(*) + GROUP_CONCAT() + GROUP BY in SQL.

=cut


$OptGlue = " ";
$OptDistUniqueField = undef;
$OptDistColumnNameSeparator = "_";
%OptionDefs = (
	'g|glue=s' => \$OptGlue,
	'u|distribute-unique-field=s' => \$OptDistUniqueField,
	's|distributed-column-name-separator=s' => \$OptDistColumnNameSeparator,
);

use Data::Dumper;
no if ($] >= 5.018), 'warnings' => 'experimental::smartmatch';
do '/usr/lib/tool/perl5/tabdata/common.pl' or die "$@";

process_header(scalar <STDIN>);
$last_input_column_idx = $#Header;

if(defined $OptDistUniqueField)
{
	die "$0: no such column: $OptDistUniqueField\n" if not exists $Header{$OptDistUniqueField};
	$uniq_field_idx = $Header{$OptDistUniqueField};
}


sub commit_group
{
	if($group_count == 0)
	{
		if($OptDistUniqueField)
		{
			for my $colidx (1..$#Header)
			{
				next if $colidx == $uniq_field_idx;
				@distributed_cells = @{$group_members[$uniq_field_idx]};
				for my $uniq_cell (@distributed_cells)
				{
					my $distrib_colname = $Header[$colidx] . $OptDistColumnNameSeparator . $uniq_cell;
					push @Header, $distrib_colname;
					$Header{$distrib_colname} = $#Header;
				}
			}
		}
		print join($FS, "COUNT", @Header).$RS;
	}
	
	if($OptDistUniqueField)
	{
		for my $uniq_cell_idx (0..$#{$group_members[$uniq_field_idx]})
		{
			my $uniq_cell = $group_members[$uniq_field_idx]->[$uniq_cell_idx];
			next if not $uniq_cell ~~ @distributed_cells;
			for my $colidx (1..$last_input_column_idx)
			{
				my $colname = $Header[$colidx];
				my $distrib_colname = $colname . $OptDistColumnNameSeparator . $uniq_cell;
				$group_members[$Header{$distrib_colname}]->[0] = $group_members[$colidx]->[$uniq_cell_idx];
				$group_members[$colidx]->[$uniq_cell_idx] = undef;
			}
			$group_members[$uniq_field_idx]->[$uniq_cell_idx] = undef;
		}
		for my $colidx (1..$last_input_column_idx)
		{
			@{$group_members[$colidx]} = grep {defined} @{$group_members[$colidx]};
		}
		@{$group_members[$uniq_field_idx]} = grep {defined} @{$group_members[$uniq_field_idx]};
	}
	
	print $collapsed_rows . $FS . $prev_group_key . $FS . join($FS, map { join $OptGlue, @$_ } @group_members[1..$#group_members]) . $RS;
	@group_members = ();
	$collapsed_rows = 0;
	$group_count++;
}

$group_key = undef;
$prev_group_key = undef;
@group_members = ();
$collapsed_rows = 0;
$group_count = 0;
@distributed_cells = ();


while(not eof STDIN)
{
	my @input_row = read_record(\*STDIN);
	
	$group_key = $input_row[0];
	
	if(defined $prev_group_key and $group_key ne $prev_group_key)
	{
		commit_group;
	}

	for my $cell_idx (1..$last_input_column_idx)
	{
		my $cell = $input_row[$cell_idx];
		$cell = '' unless defined $cell;
		push @{$group_members[$cell_idx]}, $cell;
	}
	
	$collapsed_rows++;
	$prev_group_key = $group_key;
}

END { commit_group; }
