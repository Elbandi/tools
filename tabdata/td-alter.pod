=pod

=head1 NAME

td-alter - Add new columns and fields to tabular data stream, and modify value of existing fields.

=head1 USAGE

td-alter I<COLUMN>=I<EXPR> [I<COLUMN>=I<EXPR> [I<COLUMN>=I<EXPR> [...]]]

=head1 DESCRIPTION

On each data row, sets field in I<COLUMN> to the value resulted by I<EXPR>
Perl expression.

In I<EXPR>, you may refer to other fields by C<$F{NAME}> where I<NAME> is the column name;
or by C<$F[INDEX]> where I<INDEX> is the 0-based column index number.
Furthermore you may refer to uppercase alpha-numeric field names, simply by bareword C<COLUMN>,
well, enclosed in paretheses like C<(COLUMN)> to avoid parsing unambiguity in Perl.
It's possible because these column names are set up as subroutines internally.

Topic variable (C<$_>) initially is set to the current value of I<COLUMN> in I<EXPR>.
So for example C<N='-$_'> makes the field N the negative of itself.

You can create new columns simply by referring to a I<COLUMN> name that does not exist yet.
You can refer to an earlier defined I<COLUMN> in subsequent I<EXPR> expressions.

=head1 EXAMPLES

Add new columns: TYPE and IS_BIGFILE.
IS_BIGFILE depends on previously defined TYPE field.

 ls -l | td-trans-ls | td-alter TYPE='substr MODE,0,1' IS_BIGFILE='SIZE>10000000 && TYPE ne "d" ? "yes" : "no"'

Strip sub-seconds and timezone from DATETIME field:

 TIME_STYLE=full-iso ls -l | td-trans-ls | td-alter DATETIME='s/\..*//; $_'

=head1 OPTIONS

=over 4

=item -H, --no--header

do not show headers

=item -h, --header

show headers (default)

=back

=head1 REFERENCES

"Alter" in td-alter comes from SQL.
td-alter(1) can change the "table" column layout.
But contrary to SQL's ALTER TABLE, td-alter(1) can modify the records too, so akin to SQL UPDATE as well.

=cut
