#!/usr/bin/env perl

=pod

=head1 NAME

kvpairs2td - Transform lines of key-value pairs to tabular data stream

=head1 OPTIONS

=over 4

=item -i, --ignore-non-existing-columns

Do not fail when encounters a new field after the first record.

=item -w, --warn-non-existing-columns

=item -c, --column I<COLUMN>

Indicate that there will be a column by the name I<COLUMN>.
This is useful if the first record does not have I<COLUMN>.
This option is repeatable.

=item -r, --restcolumn I<NAME>

Name of the column where the rest of the input line will be put
which is not part of key-value pairs.
Default is B<_REST>.

=item -u, --unknown-to-rest

Put unknown (non-existing) fields in the "rest" column
(see B<-r> option).

=back

=head1 SEE ALSO

td2mrkv(1), td2kvpairs(1)

=cut


sub parse_next_key_value
{
	local $_ = shift;
	# to support backslash-escaped quotes in quoted strings, we need to bookkeep what is the minimum length
	# of the string which does not end with an odd number of backslashes, which would mean that the trailing
	# quote is in fact an escaped quote and should be part of the string.
	# regexp lookbehind does not work well when need to look behind to an arbitrary distance.
	my %min = (key => 0, value => 0);
	MATCH_NEXT_KEY_VALUE:
	/(^|(?'spacebefore'\s*))(?'rawkey'(?'keyquote'[""''])(?'key'.{$min{key},}?)\g{keyquote}|(?'key'[^\s=]+))=(?'rawvalue'(?'valuequote'[""''])(?'value'.{$min{value},}?)\g{valuequote}|(?'value'\S*))((?'spaceafter'\s*)|$)/
		or return ();
	my %m = %+;
	$m{_before} = $`;
	$m{_after} = $';
	#print Dumper [$key_min, $val_min, \%m];
	for my $elem ('key', 'value')
	{
		# check if the key (value) is quoted and does not end with odd number of backslashes,
		# because if so, then increase the minimum length that it should be,
		# then try to match it again.
		if($m{$elem.'quote'} and not $m{$elem} =~ /(?<!\\)(\\{2})*$/)
		{
			$min{$elem} = length($m{$elem})+1;
			goto MATCH_NEXT_KEY_VALUE;
		}
	}
	# return a hash of all named capture groups,
	# plus the substring before and after the regexp match in the _before and _after keys respectively.
	return %m;
}


$OptWarnBadColumnNames = 1;
$OptFailBadColumnNames = 1;
@OptPredefColumns = ();
$OptRestColumnName = "_REST";
$OptUnknownToRest = 0;
%OptionDefs = (
	'i|ignore-non-existing-columns' => sub { $OptFailBadColumnNames = 0; $OptWarnBadColumnNames = 0; },
	'w|warn-non-existing-columns' => sub { $OptFailBadColumnNames = 0; $OptWarnBadColumnNames = 1; },
	'c|column=s@' => \@OptPredefColumns,
	'r|restcolumn=s' => \$OptRestColumnName,
	'u|unknown-to-rest' => \$OptUnknownToRest,
);

use Data::Dumper;
no if ($] >= 5.018), 'warnings' => 'experimental::smartmatch';
do '/usr/lib/tool/perl5/tabdata/common.pl' or die "$@";

@Headers = ();
$RN = 0;
$rest_column_idx = undef;

while(my $Line = <STDIN>)
{
	chomp $Line;
	my @record = ();
	my $Rest = '';


	while(my %m = parse_next_key_value($Line))
	{
		$Rest .= $m{_before} . $m{'spacebefore'};
		$Line = $m{_after};
		my ($key, $value) = (kvpair_unescape($m{'rawkey'}), kvpair_unescape($m{'rawvalue'}));
		my $spaceafter = $m{'spaceafter'};
		
		if($RN == 0)
		{
			push @Headers, $key;
		}
		
		my $cell_set = 0;
		my $colinstances = 0;
		for my $colidx (0 .. $#Headers)
		{
			if($Headers[$colidx] eq $key)
			{
				$colinstances++;
				if(not defined $record[$colidx])
				{
					$record[$colidx] = $value;
					$cell_set = 1;
					last;
				}
			}
		}
		
		if(not $cell_set)
		{
			$colinstances++;
			warn "$0: column (instance $colinstances) is not initialized: $key\n" if $OptWarnBadColumnNames;
			if($OptUnknownToRest)
			{
				$Rest .= kvpair_escape($key) . '=' . kvpair_escape($value) . $spaceafter;
			}
			else
			{
				exit 3 if $OptFailBadColumnNames;
			}
		}
	}
	
	if($RN == 0)
	{
		push @Headers, grep { not $_ ~~ @Headers } @OptPredefColumns, $OptRestColumnName;
		$rest_column_idx = $#Headers;
		print join($FS, map {escape_tabdata($_)} @Headers).$RS;
	}
	
	$record[$rest_column_idx] = $Rest . $Line;
	
	print join($FS, map {escape_tabdata($_)} @record) . $RS;
	
	$RN++;
}
