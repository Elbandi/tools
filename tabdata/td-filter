#!/usr/bin/env perl

=pod

=head1 NAME

td-filter - Show only those records from the input tabular data stream which match to the conditions.

=head1 USAGE

td-filter [<OPTIONS>] [--] <COLUMN> <OPERATOR> <R-VALUE> [<COLUMN> <OPERATOR> <R-VALUE> [...]]

td-filter [<OPTIONS>] --perl <EXPR>

=head1 DESCRIPTION

Pass through only those records which match to all of the conditions.
Evaluate the Perl expression in the second form.
Each field's value is in @F and in %F by column name.

=head1 OPTIONS

=over 4

=item -H, --no--header

do not show headers

=back

=head1 OPERATORS

These operators are supported, semantics are the same as in Perl, see perlop(1).

== != <= >= < > =~ !~ eq ne gt lt

For your convenience, not to bother with escaping, you may also use these operators as alternatives to the canonical ones above:

-eq : numerical equal to

-ne : numerical not equal to

<>  : numerical not equal to

-gt : numerical greater than

-ge : numerical greater or equal

-lt : numerical less than

-le : numerical less or equal

match : regexp match

notmatch : negated regexp match

=head1 CAVEATS

<R-VALUE> does not need quoting or escaping.
If there is no <COLUMN> column in the input data, it's silently considered empty.

=cut

do '/usr/lib/tool/perl5/tabdata/common.pl' or die "$@";

@Filter = ();
$Expr = undef;

%operator_alias = (
	'<>', '!=',
	'-ne', '!=',
	'-eq', '==',
	'-gt', '>',
	'-lt', '<',
	'-ge', '>=',
	'-le', '<=',
	'notmatch', '!~',
	'match', '=~',
);

if($ARGV[0] eq '--perl')
{
	shift @ARGV;
	$Expr = join ';', @ARGV;
}
else
{
	while(scalar @ARGV)
	{
		my $column = shift @ARGV;
		my $operator = shift @ARGV or die "$0: missing operator for: $column\n";
		my $rvalue = shift @ARGV or die "$0: missing r-value for: $column $operator\n";
		
		# operator aliases
		$operator = $operator_alias{$operator} if exists $operator_alias{$operator};
		
		unless($operator ~~ [qw/== != <= >= < > =~ !~ eq ne gt lt/])
		{
			die "$0: unknown operator: $operator\n";
		}
		
		push @Filter, {'field'=>$column, 'operator'=>$operator, 'value'=>$rvalue,};
	}
}

process_header(scalar <STDIN>);

unless($OptNoHeader)
{
	print $HeaderLine.$/;
}

while($line = <STDIN>)
{
	chomp $line;
	
	@Field = split $FS, $line;
	
	$pass = 1;
	
	if(defined $Expr)
	{
		my @F = @Field;
		my %F = map {$_=>$Field[$Header{$_}]} keys %Header;
		$pass = eval $Expr;
	}
	else
	{
		for my $filter (@Filter)
		{
			my $left_data = exists $Header{$filter->{'field'}} ? $Field[$Header{$filter->{'field'}}] : '';
			my $right_data = $filter->{'value'};
			my $operator = $filter->{'operator'};
			my $left_code = '$left_data';
			my $right_code = '$right_data';
			$right_code = "/$right_code/" if $operator ~~ ['=~', '!~'];
			unless(eval "$left_code $operator $right_code")
			{
				$pass = 0;
				last;
			}
		}
	}
	
	if($pass)
	{
		print $line.$/;
	}
}
