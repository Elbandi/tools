#!/usr/bin/env perl

=pod

=head1 NAME

vcf2td - Transform VCF to tabular data format.

=head1 OPTIONS

=over 4

=item -c, --column I<COLUMN>

Indicate that there will be a column by the name I<COLUMN>.
Useful if the first record does not contain all fields
which are otherwise occur in the whole data stream.
By default, vcf2td(1) recognize fields which are in the first record in the VCF input,
does not read ahead more records before sending the header.
This option is repeatable.

=item -i, --ignore-non-existing-columns

Don't fail and don't warn when ecountering new field names.

Tabular data format declares all of the field names in the column headers,
so it can not introduce new columns later on in the data stream
(unless some records were buffered which are not currently).
However in VCF, each record may have fields different from the first record.
That's why vcf2td(1) fails itself by default
if it encounters a field it can not convert to tabular.

=item -w, --warn-non-existing-columns

Only warns on new fields, but don't fail.

=item -g, --multivalue-glue I<STR>

A string to glue repeated fields' values together
when the repeated fields are handled by uniting their content into one tabdata column.
Default is newline.

Note, eventhough newline is the default glue, but
if you want to be explicit about it (or want to set an other glue I<STR> expressed often by some backslash sequence),
C<vcf2td -g "\n" ...> probably won't quite work as one may expect (depending on one's shell),
because the shell passes the "backslash" + "n" 2-chars string,
instead of a string consisting just 1 "newline" char.
So, in bash, put it as C<vcf2td -g $'\n' ...>.

=back

=head1 COMMON vCard FIELDS

=over 4

=item N

B<N> is for a contact's name, different parts separated by C<;> semicolon.
vcf2td(1) simplifies the B<N> field by removing excess semicolons.
If you need one or more name parts precisely,
request the B<N.family>, B<N.given>, B<N.middle>, B<N.prefixes> fields
by the B<-c> option if you want,
but this name partitioning method is not quite internationally useful,
use the B<FN> (full name) field for persons' names as much as you can.

=back

=cut


$OptMultiValueGlue = "\n";
$OptWarnBadColumnNames = 1;
$OptFailBadColumnNames = 1;
@OptPredefColumns = ();
%OptionDefs = (
	'g|multivalue-glue=s' => \$OptMultiValueGlue,
	'i|ignore-non-existing-columns' => sub { $OptFailBadColumnNames = 0; $OptWarnBadColumnNames = 0; },
	'w|warn-non-existing-columns' => sub { $OptFailBadColumnNames = 0; $OptWarnBadColumnNames = 1; },
	'c|column=s@' => \@OptPredefColumns,
);

use Data::Dumper;
use Encode;
use MIME::QuotedPrint;
use Switch;
no if ($] >= 5.018), 'warnings' => 'experimental::smartmatch';
do '/usr/lib/tool/perl5/tabdata/common.pl' or die "$@";

@columns = @OptPredefColumns;
@warned_fields = ();
%record = ();
$RN = 0;


sub write_record
{
	my $record = shift;
	
	if($RN == 0)
	{
		output_record(@columns);
	}
	
	output_record(map {$record->{$_}} @columns);
}


while(<STDIN>)
{
	s/\r?\n//;
	
	if(my($field, $data) = /^(\S[^:]*):(.*)$/)
	{
		my($field_name, @params) = split /;/, $field;
		my %param = map {split /=/, $_, 2} @params;
		
		if(not $field_name ~~ @columns)
		{
			if(not $field_name ~~ [qw/BEGIN VERSION END/])
			{
				if($RN == 0)
				{
					push @columns, $field_name 
				}
				else
				{
					unless($field_name ~~ @warned_fields)
					{
						warn "$0: column not defined: $field_name\n" if $OptWarnBadColumnNames;
						push @warned_fields, $field_name;
					}
					die if $OptFailBadColumnNames;
					next;
				}
			}
		}
		
		switch($param{'ENCODING'})
		{
			case('QUOTED-PRINTABLE') { $data = decode_qp($data); }
			case(undef) { 1; }
			else { die "$0: unknown encoding: $param{'ENCODING'}, line $., record $RN\n"; }
		}
		
		if($field_name eq 'N')
		{
			my ($family_name, $given_name, $middle_name, $prefixes) = split /;/, $data;
			$record{'N.family'} = $family_name;
			$record{'N.given'} = $given_name;
			$record{'N.middle'} = $middle_name;
			$record{'N.prefixes'} = $prefixes;
			
			$data =~ s/;+/;/g;
			$data =~ s/;$//;
			$data =~ s/^;//;
		}
		
		if(exists $record{$field_name})
		{
			$record{$field_name} .= $OptMultiValueGlue.$data;
		}
		else
		{
			$record{$field_name} = $data;
		}
		
		if($field_name eq 'END')
		{
			write_record(\%record);
			%record = ();
			$RN++;
			next;
		}
	}
}

# write last incomplete record
if(%record)
{
	write_record(\%record);
}
