#!/usr/bin/env perl

=pod

=head1 NAME

td-alter - Add new columns and fields to tabular data stream, and modify value of existing fields.

=head1 USAGE

td-alter I<COLUMN>=I<EXPR> [I<COLUMN>=I<EXPR> [I<COLUMN>=I<EXPR> [...]]]

=head1 DESCRIPTION

On each data row, sets field in I<COLUMN> to the value resulted by I<EXPR>
Perl expression.

In I<EXPR>, you may refer to other columns by C<$F{NAME}> where I<NAME> is the column name;
or by C<$F[INDEX]> where I<INDEX> is the 0-based column index number;
or in case of uppercase alpha-numeric field names, simply by bareword C<COLUMN>
(because these are set up as subroutines internally).
Topic variable (C<$_>) is set to the current value of I<COLUMN>.

You can create new columns simply by referring to a I<COLUMN> name that does not yet exist.
You can refer to an earlier defined I<COLUMN> in subsequent I<EXPR> expressions.

=head1 EXAMPLES

Add new columns: TYPE and IS_BIGFILE.
IS_BIGFILE depends on previously defined TYPE field.

 ls -l | td-trans-ls | td-alter TYPE='substr MODE,0,1' IS_BIGFILE='SIZE>10000000 && TYPE ne "d" ? "yes" : "no"'

Strip sub-seconds and timezone from DATETIME field.

 TIME_STYLE=full-iso ls -l | td-trans-ls | td-alter DATETIME='s/\..*//; $_'

=head1 OPTIONS

=over 4

=item -H, --no--header

do not show headers

=item -h, --header

show headers (default)

=back

=cut

no if ($] >= 5.018), 'warnings' => 'experimental::smartmatch';
do '/usr/lib/tool/perl5/tabdata/common.pl' or die "$@";

process_header(scalar <STDIN>);

@Derives = ();

while(scalar @ARGV)
{
	if($ARGV[0] =~ /^([^=]+)=(.*)/)
	{
		my $column = $1;
		my $expr = $2;
		
		if(not exists $Header{$column})
		{
			push @Header, $column;
			$Header{$column} = $#Header;
		}
		
		push @Derives, {'column'=>$column, 'expr'=>$expr};
	}
	else
	{
		pod2usage(-exitval=>2, -verbose=>99, -msg=>"$0: unknown parameter: $ARGV[0]");
	}
	shift @ARGV;
}

if($OptShowHeader and @Header)
{
	print join($FS, @Header).$RS;
}

while($line = <STDIN>)
{
	chomp $line;
	
	@F = split $FS, $line;
	%F = map {$_=>$F[$Header{$_}]} keys %Header;
	
	for my $d (@Derives)
	{
		my $cidx = $Header{$d->{'column'}};
		my $expr_prerun = '';
		for my $col (grep {/^[A-Z_][A-Z0-9_]*$/} @Header)
		{
			# define all (uppercase alpha-numeric only) column name as a subroutine
			# which return the given field's value.
			$expr_prerun .= sprintf('sub %s { $F{"%s"} };', $col, $col);
		}
		$expr_prerun .= '$_ = $F[$cidx];';
		my $expr = $expr_prerun . $d->{'expr'};
		
		$F[$cidx] = $F{$d->{'column'}} = eval $expr;
		warn $@ if $@;
	}
	
	# undefined is empty string in tab-data format.
	for my $idx (0..$#F)
	{
		$F[$idx] = '' if not defined $F[$idx];
	}
	
	print join($FS, @F).$RS;
}
