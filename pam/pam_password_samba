#!/usr/bin/env perl
#
# pam_password_samba [backup | restore] [file=<cleartext_file>] [user=<username>]
#

use Fcntl qw(:DEFAULT :flock :seek);
use Switch;
use constant { PAM_SUCCESS=>0, PAM_SERVICE_ERR=>3, PAM_SYSTEM_ERR=>4, PAM_PERM_DENIED=>6, PAM_AUTH_ERR=>7, PAM_USER_UNKNOWN=>10, PAM_IGNORE=>25, };


$passwd_file = "/var/lib/samba/tmppasswd";  # FIXME lock or use unique filename
$mode = undef;
$User = undef;


sub save_fds()
{
	open STDIN_SAVE,  '<&STDIN';
	open STDOUT_SAVE, '>&STDOUT';
	open STDERR_SAVE, '>&STDERR';
	open STDIN,  '<', "/dev/null";
	open STDOUT, '>', "/dev/null";
	open STDERR, '>', "/dev/null";
}
sub restore_fds()
{
	open STDIN,  '<&STDIN_SAVE';
	open STDOUT, '>&STDOUT_SAVE';
	open STDERR, '>&STDERR_SAVE';
}
sub samba_user_exists($)
{
	save_fds;
	my $cmd = system("pdbedit", "-d", "0", "-w", $_[0]);
	restore_fds;
	return !$cmd;
}
sub set_samba_password($$)
{
	my $user = shift;
	my $pass = shift;
	
	my $pipe = pipe $rh, $wh;
	printf $wh "%s\n%s\n", $pass, $pass;
	close $wh;
	open STDIN, '<&='.fileno($rh);
	my $cmd = system("smbpasswd", "-L", "-s", $user);
	return !$cmd;
}
sub load_data(*)
{
	my %data;
	my $fh = shift;
	while(<$fh>)
	{
		if(/^([^:]+):(.*)$/)
		{
			$data{$1} = $2;
		}
	}
	return %data;
}


while(my $arg = shift)
{
	switch($arg)
	{
		case /^(backup|restore)$/i
		{
			$mode = lc $arg;
		}
		case /^file=\S/
		{
			($passwd_file) = ($arg =~ /=(\S+)$/);
		}
		case /^user=\S/
		{
			($User) = ($arg =~ /=(\S+)$/);
		}
		else
		{
			print STDERR "Invalid option: $arg\n";
			exit PAM_SERVICE_ERR;
		}
	}
}


switch($mode)
{
	case 'backup'
	{
		# save cleartext password if samba user does not exist yet
	
		my $pam_password = <STDIN>;
		$pam_password =~ s/[\r\n\x00]//g;
		if(not defined $User)
		{
			$User = $ENV{'PAM_USER'};
		}
		
		if(not samba_user_exists($User))
		{
			umask 0177;
			if(sysopen my $fh, $passwd_file, O_RDWR|O_CREAT)
			{
				if(flock $fh, LOCK_EX)
				{
					my %data = load_data($fh);
					$data{$User} = $pam_password;
					
					seek $fh, 0, SEEK_SET;
					for my $key (keys %data)
					{
						printf $fh "%s:%s\n", $key, $data{$key};
					}
					truncate $fh, tell $fh;
					close $fh;
				}
				else
				{
					print STDERR "$passwd_file: flock: $!\n";
					exit PAM_SYSTEM_ERR;
				}
			}
			else
			{
				print STDERR "$passwd_file: $!\n";
				exit PAM_SYSTEM_ERR;
			}
		}
		else
		{
			# samba user already exists,
			# further pam rules could set password directly.
			exit PAM_IGNORE;
		}
	}

	case 'restore'
	{
		if(not defined $User)
		{
			print STDERR "No 'user' parameter was specified.\n";
			exit PAM_SERVICE_ERR;
		}

		if(open my $fh, '+<', $passwd_file)
		{
			if(flock $fh, LOCK_EX)
			{
				my %data = load_data($fh);
				
				my $status;
				if(defined $data{$User})
				{
					my $ok = set_samba_password($User, $data{$User});
					if($ok)
					{
						delete $data{$User};
						seek $fh, 0, SEEK_SET;
						for my $key (keys %data)
						{
							printf $fh "%s:%s\n", $key, $data{$key};
						}
						truncate $fh, tell $fh;
					}
					else
					{
						$status = PAM_SYSTEM_ERR;
					}
				}
				else
				{
					print STDERR "User not found in $passwd_file: $User\n";
					$status = PAM_USER_UNKNOWN;
				}
				
				close $fh;
				
				if(defined $status)
				{
					exit $status;
				}
			}
			else
			{
				print STDERR "$passwd_file: flock: $!\n";
				exit PAM_SYSTEM_ERR;
			}
		}
		else
		{
			print STDERR "$passwd_file: $!\n";
			exit PAM_SYSTEM_ERR;
		}
	}

	else
	{
		print STDERR "Neither 'backup' or 'restore' parameter was specified.\n";
		exit PAM_SERVICE_ERR;
	}
}

exit PAM_SUCCESS;

