#!/bin/bash

#exit 95
#exec 2>/tmp/e ; set -x

mk_cache_key()
{
	local x=$1
	local cachekey=${x//%/%25}
	cachekey=${cachekey//./%2E}
	cachekey=${cachekey//\//%2F\/}
	echo "$cachekey"
}

cache-s3-ls()
{
	local s3uri
	local cachekey
	local cachedir
	local cachefile
	declare -a ps
	local ec
	
	s3uri=$1
	cachekey=`mk_cache_key "$s3uri"`
	cachedir=$cache_basedir/$cachekey
	mkdir -p "$cachedir"
	cachefile=$cachedir/data
	
	if [ -f "$cachefile" ]
	then
		stat -c %Y "$cachefile"
		cat "$cachefile"
	else
		echo 0
		aws s3 ls "$s3uri" | tee "$cachefile"
		ps=(${PIPESTATUS[@]})
		ec=${ps[0]}
		if [ $ec != 0 ]
		then
			mv -f "$cachefile" "$cachedir/data.error"
			echo -n $ec > "$cachedir/err"
		fi
		return $ec
	fi
}

print_base_dir_attr()
{
	echo -ne "ino=1 mode=$dmode nlink=2 uid=$UID gid=$GID rdev=0 size=0 blksize=512 blocks=0 atime=$cache_timestamp mtime=$mtime ctime=0${1:+ $1\0}"
}

fmode=-rw-r--r--
dmode=drwxr-xr-x
#GID=`id -g`
GID=0
fuseop=${0##*/}
cache_timestamp=0
cache_basedir=~/.cache/execfuse-s3
mtime=0

case "$fuseop" in
readdir)

case "$1" in
/)
	print_base_dir_attr .
	
	cache-s3-ls s3:// |\
	{
		read cache_timestamp
		while read -r date time bucket
		do
			mtime=`date +%s -d "$date $time"`
			echo -ne "ino=1 mode=$dmode nlink=2 uid=$UID gid=$GID rdev=0 size=0 blksize=512 blocks=0 atime=$cache_timestamp mtime=$mtime ctime=0 $bucket\0"
		done
	}
	;;
*)
	path=${1:1}
	bucket=${path%%/*}
	if [[ $path =~ / ]]
	then
		key=${path#*/}/
	else
		key=''
	fi
	
	cache-s3-ls s3://$bucket/$key |\
	sed -e 's/^\s\+PRE/0 0 PRE/' |\
	{
		read cache_timestamp
		while read -r date time size fname
		do
			if [ "$size" = PRE ]
			then
				fname=${fname:0:-1}
				if [ -n "$fname" ]
				then
					# NOTE: mtime is 0 here
					print_base_dir_attr "$fname"
				fi
			else
				if [ -n "$fname" ]
				then
					mtime=`date +%s -d "$date $time"`
					echo -ne "ino=1 mode=$fmode nlink=1 uid=$UID gid=$GID rdev=0 size=$size blksize=512 blocks=0 atime=$cache_timestamp mtime=$mtime ctime=0 $fname\0"
				fi
			fi
		done
	}
	;;
esac
;; # readdir

getattr)
case "$1" in
/)
	print_base_dir_attr
	;;
*)
	path=${1:1}
	bucket=${path%%/*}
	if [[ $path =~ / ]]
	then
		key=${path#*/}
	else
		key=''
	fi
	
	if [ -z "$key" ]
	then
		# viewing a bucket folder
		# ensure the bucket exists based on the default bucket list
		# TODO: support cross-account buckets
		
		cache-s3-ls s3:// |\
		{
			read cache_timestamp
			while read -r date time this_bucket
			do
				if [ "$this_bucket" = "$bucket" ]
				then
					mtime=`date +%s -d "$date $time"`
					print_base_dir_attr
					exit 0
				fi
			done
			exit 2
		}
		ps=(${PIPESTATUS[@]})
		if [ ${ps[0]} != 0 ]
		then
			exit 1
		else
			exit ${ps[1]}
		fi
	else
		# viewing an s3 object
		# find its type: keyprefix (dir) or object key (file)
		# lookup the parent dir
		
		if [[ $key =~ / ]]
		then
			key_dirname=${key%/*}/
		else
			key_dirname=''
		fi
		key_basename=${key##*/}
		
		{
			cache-s3-ls s3://$bucket/$key_dirname |\
			sed -e 's/^\s\+PRE/0 0 PRE/'
			exit ${PIPESTATUS[0]}
		}|\
		{
			read cache_timestamp
			while read -r date time size fname
			do
				if [ "$size" = PRE ]
				then
					fname=${fname:0:-1}
				fi
				if [ "$fname" = "$key_basename" ]
				then
					if [ "$size" = PRE ]
					then
						# it's a key prefix, show there is a dir
						# get mtime from the listing of this current keyprefix, only if it's cached
						cachekey=`mk_cache_key "s3://$bucket/$key/"`
						cachefile=$cache_basedir/$cachekey/data
						if [ -f "$cachefile" ]
						then
							datetime=`sed -ne '/^\S\+ \S\+\s\+0 $/{s/\s\+0 $//p;q}' "$cachefile"`
							if [ -n "$datetime" ]
							then
								mtime=`date +%s -d "$datetime"`
							fi
						fi
						print_base_dir_attr
					else
						# it's an object key, show there is a file
						mtime=`date +%s -d "$date $time"`
						echo -ne "ino=1 mode=$fmode nlink=1 uid=$UID gid=$GID rdev=0 size=$size blksize=512 blocks=0 atime=$cache_timestamp mtime=$mtime ctime=0"
					fi
					exit 0
				fi
			done
			exit 2
		}
		ps=(${PIPESTATUS[@]})
		if [ ${ps[0]} != 0 ]
		then
			exit 1
		else
			exit ${ps[1]}
		fi
	fi
	# notreached
	;;
esac
;; # getattr

read_file)
	aws s3 cp s3:/$1 -
;; # read_file

chmod)
	cachekey=`mk_cache_key "s3:/$1"`
	case ".$2" in
	.00000)
		find "$cache_basedir/$cachekey" -type f -name "data" -delete
		;;
	.00001)
		rm "$cache_basedir/$cachekey/data"
		;;
	*)	exit 1;;
	esac
	exit 0
;; # chmod

*)	exit 95;;
esac
