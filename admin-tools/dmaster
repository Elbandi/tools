#!/usr/bin/env perl

=pod

=head1 NAME

dmaster - Manage continuously running processes

=head1 SYNOPSIS

dmaster

=head1 DESCRIPTION

Daemon master.
Start programs defined in B<daemontab> file.
Restart them when ended.

Re-read the B<daemontab> file on B<HUP> signal,
stops processes which are no longer in it (or I<ID> changed),
and starts new ones.
Those daemons whose I<COMMAND> I<ARGS> changed, are not restarted automatically.

Automatically respawn a daemon when it exits.
If a daemon exits too often, suppress it a little while.
Default parameters: at most 5 spawns in 2 sec, hold up for 10 sec.

=head1 FILES

=over 4

=item F</etc/daemontab>

Format is I<ID> I<COMMAND> I<ARGS>, delimited by any amount of space/tab, one line per each.
I<ID> is an arbitrary word choosed by the user, to identify daemon commands across reloads.
Command arguments may enclosed in double quotes (C<">), but not part of the argument. See:

 d1 my-daemon --param="foo bar"

is invalid (parsed as 2 parameters: C<--param="foo> and C<bar"> with dangling quotes).

 d1 my-daemon "--param=foo bar"

is what you want.

It's not recommended to write complex scripts directly in daemontab.
Put them in F</etc/daemons> directory instead.

=back

=head1 SIGNALS

=over 4

=item USR1

Write internal state into F</var/run/shm/dmaster.state> file.

=item TERM, INT

Terminate managed daemons (always with B<TERM> signal).

=item HUP

Re-read B<daemontab>, stop daemons which are disappeared and start new ones.
Leave running others.

=back

=head1 EXAMPLE INSTALLATION

Put this in your inittab(5):

 dm:2345:respawn:loggerexec daemon dmaster /sbin/dmaster

=head1 SEE ALSO

supervisor(1), supervise(8), daemon(1), runit(1)

=cut


use Data::Dumper;
use POSIX ":sys_wait_h";
no if ($] >= 5.018), 'warnings' => 'experimental::smartmatch';
use Socket;

$pidfd_support = eval { use Linux::FD::Pid; 1; };
warn "deprecating PIDFD support: $@\n" if $@;


$0 = 'dmaster';
%Daemon = ();
$respawn_burst_period = 2;
$respawn_burst_limit = 5;
$respawn_burst_hold = 10;


sub logger
{
	my $s = shift;
	warn "$0: $s\n";
}

sub append_fixsizelist
{
	my ($listref, $size, @items) = @_;
	push @$listref, @items;
	while(scalar @$listref > $size)
	{
		shift @$listref;
	}
}

sub stop_daemon
{
	my $id = shift;
	my $pid = $Daemon{$id}->{'pid'};
	if(defined $pid)
	{
		logger "terminating $id PID $pid";
		kill 'TERM', $pid;
	}
	else
	{
		logger "daemon $id has no PID";
	}
}

sub start_daemon
{
	my $id = shift;
	my $cmd_args = $Daemon{$id}->{'cmd_args'};
	logger "starting $id: @$cmd_args";
	
	my $pid = fork;
	if($pid == 0)
	{
		close $management_socket;
		close $_ for map {$Daemon->{$_}->{'pidfd'}} grep {exists $Daemon->{$_}->{'pidfd'}} keys %Daemon;
		# leave STDIO there for convenience
		
		exec @$cmd_args;
		exit 127;
	}
	elsif(not defined $pid)
	{
		logger "fork: $!";
	}
	else
	{
		logger "started $id PID $pid";
		$Daemon{$id}->{'pid'} = $pid;
		$Daemon{$id}->{'pidfd'} = Linux::FD::Pid->new($pid) if $pidfd_support;
		append_fixsizelist \@{$Daemon{$id}->{'starttimes'}}, $respawn_burst_limit, time;
	}
}

sub parse_cmd_string
{
	my $cmd = shift;
	my @cmd_args = ();
	while($cmd =~ /^("([^""]*)"|\S+)\s*/)
	{
		my $arg = defined $2 ? $2 : $1;
		push @cmd_args, $arg;
		$cmd = $';
	}
	return @cmd_args;
}

sub read_daemon_inittab
{
	my $path = shift;
	# TODO: lock
	open my $fh, '<', $path or logger "open $path: $!";
	return unless $fh;
	my %new_daemon = ();
	while(<$fh>)
	{
		next if /^\s*(#|$)/;
		if(my ($id, $cmd) = /^(\S+)\s+(.+)$/)
		{
			my @cmd_args = parse_cmd_string $cmd;
			$new_daemon{$id}->{'cmd_args'} = \@cmd_args;
		}
		else
		{
			logger "can not parse line $.";
		}
	}
	close $fh;
	return %new_daemon;
}

sub reload
{
	my $daemontab = ($ENV{'XDG_CONFIG_HOME'} || '/etc').'/daemontab';
	logger "reloading $daemontab";
	my %new_daemon = read_daemon_inittab $daemontab;
	
	for my $id (keys %Daemon)
	{
		if($id ~~ [keys %new_daemon])
		{
			logger "keep $id";
			$Daemon{$id}->{'cmd_args'} = $new_daemon{$id}->{'cmd_args'};
			delete $new_daemon{$id};
		}
		else
		{
			logger "terminate $id as it's no longer managed";
			delete $Daemon{$id}->{'cmd_args'};
			stop_daemon $id;
		}
	}
	
	for my $id (keys %new_daemon)
	{
		$Daemon{$id}->{'cmd_args'} = $new_daemon{$id}->{'cmd_args'};
	}
	for my $id (keys %new_daemon)
	{
		start_daemon $id;
	}
}

sub handle_children
{
	for my $id (keys %Daemon)
	{
		my $daemon_pid = $Daemon{$id}->{'pid'};
		next unless defined $daemon_pid;
		
		my $pid = waitpid($daemon_pid, WNOHANG);
		my $status = ${^CHILD_ERROR_NATIVE};
		if($pid == $daemon_pid)
		{
			my $exitcode = WIFEXITED($status) ? WEXITSTATUS($status) : undef;
			my $exitsignal = WIFSIGNALED($status) ? WTERMSIG($status) : undef;
			logger sprintf "daemon %s PID %d deceased, exit status %s signal %s",
				$id, $daemon_pid, $exitcode // 'none', $exitsignal // 'none';
			$Daemon{$id}->{'exitcode'} = $exitcode;
			$Daemon{$id}->{'exitsignal'} = $exitsignal;
			append_fixsizelist \@{$Daemon{$id}->{'exittimes'}}, $respawn_burst_limit, time;
			delete $Daemon{$id}->{'pid'};
		}
	}
}

sub mrkv_dump
{
	my $objref = shift;
	my $prefix = shift;
	my $cb_ref = shift;
	
	my $ref = ref $objref;
	
	if($ref eq '')
	{
		$cb_ref->("$prefix	$objref\n");
	}
	elsif($ref eq 'SCALAR')
	{
		$cb_ref->("$prefix	$$objref\n");
	}
	elsif($ref eq 'ARRAY')
	{
		my $idx = 0;
		for my $elem (@$objref)
		{
			mrkv_dump($elem, "$prefix.$idx", $cb_ref);
			$idx++;
		}
	}
	elsif($ref eq 'HASH')
	{
		for my $key (keys %$objref)
		{
			mrkv_dump($objref->{$key}, "$prefix.$key", $cb_ref);
		}
	}
	else
	{
		$cb_ref->("$prefix	$ref\n");
	}
}

sub init_management_socket
{
	my $management_socket_path = chr(0).'dmaster-management-socket';
	#my $management_socket_addr = sockaddr_un($management_socket_path);
	my $management_socket_addr = pack('S', AF_UNIX) . $management_socket_path;
	socket(my $management_socket, AF_UNIX, SOCK_STREAM, 0) or die "socket: $!\n";
	bind($management_socket, $management_socket_addr) or die "bind: $management_socket_file: $!\n";
	#chmod(0660, $management_socket_file) or die "chmod: $management_socket_file: $!\n";
	listen($management_socket, SOMAXCONN) or die "listen: $!\n";
	return $management_socket;
}


$NextAlarm_ts = 0;

sub wakeup_at_most
{
	my $sec = shift;
	my $now = time;
	my $next_alarm_ts = $now + $sec;
	if($NextAlarm_ts <= $now or $next_alarm_ts < $NextAlarm_ts)
	{
		$NextAlarm_ts = $next_alarm_ts;
		alarm $sec;
	}
}


$SIG{'HUP'} = sub { $do_reload = 1 unless $do_shutdown; };
$SIG{'CHLD'} = sub { $do_handle_children = 1; };
$SIG{'TERM'} = sub { $do_shutdown = 1; };
$SIG{'INT'} = $SIG{'TERM'};
$SIG{'ALRM'} = sub { 1; };
$SIG{'USR1'} = sub { $do_dump_state = 1; };
#$SIG{'PIPE'} = TODO


logger "init";
my $management_socket = init_management_socket();


logger "start";
reload;

while(1)
{
	# go idle. but it will be interrupted by signals.
	my $management_client_addr = accept(my $management_client_socket, $management_socket);
	
	if(defined $management_client_addr)
	{
		mrkv_dump(\%Daemon, 'daemon', sub { print {$management_client_socket} $_[0]; });
		close $management_client_socket;
		undef $management_client_socket;
	}
	
	if($do_handle_children)
	{
		$do_handle_children = 0;
		handle_children;
	}
	
	if($do_shutdown)
	{
		my $subprocesses = 0;
		for my $id (keys %Daemon)
		{
			if(exists $Daemon{$id}->{'pid'})
			{
				stop_daemon $id;
				$subprocesses++;
			}
		}
		if($subprocesses == 0)
		{
			logger "exit";
			exit;
		}
	}
	
	if($do_dump_state)
	{
		$do_dump_state = 0;
		my $dump_path = '/var/run/shm/dmaster.state';
		open my $fh, '>', $dump_path or warn "$dump_path: $!\n";
		if($fh)
		{
			print {$fh} Dumper \%Daemon;
			close $fh;
		}
	}
	
	if($do_reload)
	{
		$do_reload = 0;
		reload;
	}
	
	# check if daemons need respawn
	for my $id (keys %Daemon)
	{
		my $dmon = $Daemon{$id};
		if(not exists $dmon->{'pid'})
		{
			if(exists $dmon->{'cmd_args'})
			{
				if(scalar @{$dmon->{'exittimes'}} >= $respawn_burst_limit and $dmon->{'exittimes'}->[0] > time - $respawn_burst_period)
				{
					my $hold_sec = $dmon->{'exittimes'}->[0] + $respawn_burst_hold - time;
					$hold_sec = 1 if $hold_sec < 1;  # you can't do alarm(0)
					logger "daemon $id respawned too often, hold up for $hold_sec sec";
					wakeup_at_most $hold_sec;
				}
				else
				{
					start_daemon $id;
				}
			}
			else
			{
				# it's ended and command deleted, so
				# we no longer manage this daemon
				delete $Daemon{$id};
			}
		}
	}
}
