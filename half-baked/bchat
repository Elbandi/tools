#!/usr/bin/perl

use IO::Socket::INET;
use IO::Select;
no if ($] >= 5.018), 'warnings' => 'experimental::smartmatch';

sub uuidgen
{
	open my $f, '<', '/proc/sys/kernel/random/uuid' or die "$0: open: $!\n";
	my $uuid = <$f>;
	chomp $uuid;
	close $f;
	return $uuid;
}

$port = 1992;
$broadcast_addr = '255.255.255.255';
$|++;

$net_read = IO::Socket::INET->new(
    LocalPort => $port,
    Proto     => 'udp',
    ReuseAddr => 1,
) or die "Could not create receiver socket: $!\n";

@net_writers = ();
for my $local_ip (split /\s+/, `hostname -I`)
{
	next unless $local_ip =~ /^[\d\.]+$/;
	my $net_write = IO::Socket::INET->new(
	    LocalPort => $port,
    	LocalAddr => $local_ip,
	    PeerPort  => $port,
	    PeerAddr  => $broadcast_addr,
	    Proto     => 'udp',
	    Broadcast => 1,
	    ReuseAddr => 1,
	) or warn "Could not create sender socket on local interface $iface_ip: $!\n";
	warn "bound to $local_ip\n";
	push @net_writers, $net_write;
}

die "no any network interface to bind to\n" unless @net_writers;

$select = IO::Select->new();
$select->add(\*STDIN);
$select->add($net_read);

%sent_msgid = ();


$prompt_was_erased = 1;

while (1)
{
	print STDERR ">>> " if $prompt_was_erased and $select->exists(\*STDIN);
	$prompt_was_erased = 0;
	
    my @ready = $select->can_read();
    for my $fh (@ready)
    {
        if ($fh eq \*STDIN)
        {
            my $line = <STDIN>;
            $prompt_was_erased = 1;
            unless(defined $line)
            {
	            print "\r\x1B[K"; $prompt_was_erased = 1;
	            $select->remove(\*STDIN);
	            next;
            }
            chomp $line;
            next if $line eq '';
            
            my $msgid = uuidgen();
            $line = sprintf "[msgid=%s]%s", $msgid, $line;
            $sent_msgid{$msgid} = 1;
            
            $_->send("$line\n", 0) for @net_writers;
        }
        elsif ($fh eq $net_read)
        {
            # Receive UDP packet
            my $remote = $net_read->recv(my $data, 4096);
            my ($peerport, $peeraddr) = sockaddr_in($remote);
            my $ip = inet_ntoa($peeraddr);
            
            my $msgid;
            if($data =~ s/^\[msgid=(.+?)\]//)
            {
            	$msgid = $1;
            }
            next if exists $sent_msgid{$msgid} or exists $received_msgid{$msgid};
            
            chomp $data;
            $data =~ s/[\x00-\x1F\x7F]/sprintf "\\x%02X", ord $&/eg;
            print "\r\x1B[K"; $prompt_was_erased = 1;
            print "$ip >>> $data\n";
            $received_msgid{$msgid} = 1 if defined $msgid;
        }
    }
}
