#!/usr/bin/env perl

use Switch;
use Data::Dumper;
use Getopt::Long qw/:config no_ignore_case bundling no_getopt_compat require_order/;
use Pod::Usage;
use IPC::Run qw/run/;
use JSON;

no if ($] >= 5.018), 'warnings' => 'experimental::smartmatch';


$host = "gateway.localdomain";
$user = '';
$pass = '';

=pod

=head1 SYNOPSIS

ZXHN-H108L [-h I<HOST>] [-u I<USER>] [-P I<PASS>] I<COMMAND>

=head1 COMMANDS

=over 4

=item reboot

=item info [ip|gw|dns1|dns2|downlink|uplink]

=item log

=item pfwd

=item pfwd I<app_name> I<start_port>[-I<end_port>] I<dest_ip> [TCP|UDP|ALL]

=item pfwd --remove [--id I<num> | --name I<app_name> | --match-name I<pattern> | --port I<start_port>]

=back

=cut

GetOptions(
	'h|host=s' => \$host,
	'u|user=s' => \$user,
	'P|pass=s' => \$pass,
) or pod2usage(-exitval=>2, -verbose=>99);

if(not @ARGV)
{
	pod2usage(-exitval=>2, -verbose=>99);
}

sub dispatch;

sub dispatch
{
	my $path = shift;
	my $param = shift;
	my @curl_args = map {('-d', $_.'='.$param->{$_})} keys %$param;
	my $resp;
	run ['curl', '-sS', '-u', "$user:$pass", "http://$host$path", '--connect-timeout', '4', '--max-time', '5', @curl_args, @_], \undef, \$resp;
	return $resp;
}

sub fetch_pfwd
{
	my $html = dispatch "/advanced/adv_nat_virsvr.htm";
	my $resp;
	run ['pup', 'table table td.tabdata:not([width]) json{}'], \$html, \$resp;
	return $resp;
}

@pfwd_fields = qw/id label proto start_port end_port dest/;

sub pfwd_table
{
	my $pfwd_table_json = fetch_pfwd();
	my $html_elements = decode_json $pfwd_table_json;
	my @pfwd_lines = map { $_->{'text'} } @$html_elements;
	my @pfwd = ();
	for my $line_num (0 .. $#pfwd_lines)
	{
		my $line = $pfwd_lines[$line_num];
		$line =~ s/^\s*//;
		$line =~ s/\s*$//;
		my $pfwd_row_num = int($line_num / 6);
		my $pfwd_col_num = $line_num % 6;
		$pfwd[$pfwd_row_num][$pfwd_col_num] = $line;
	}
	return @pfwd;
}

sub pfwd_hashlist
{
	my @pfwd = pfwd_table();
	my @pfwd = map { my $tr = $_; my $hr = {}; $hr->{$pfwd_fields[$_]} = $tr->[$_] for 0 .. $#pfwd_fields; $hr } @pfwd;
	return @pfwd;
}

switch(shift @ARGV)
{
	case "reboot"
	{
		$resp = dispatch "/Forms/tools_system_1", {restoreFlag=>0}, "-L";
		$resp =~ /The system is restarting. Please wait./;
		print "$&\n";
	}
	case "log"
	{
		$resp = dispatch "/status/syslog.log";
		print $resp;
	}
	case "pfwd"
	{
		my ($remove, $remove_id, $remove_name, $remove_name_pattern, $remove_start_port);
		
		GetOptions(
			'remove' => \$remove,
			'id=i' => \$remove_id,
			'name=s' => \$remove_name,
			'match-name=s' => \$remove_name_pattern,
			'port=i' => \$remove_start_port,
		)
		or pod2usage(-exitval=>2, -verbose=>99);
		
		if($remove)
		{
			if(not defined $remove_id)
			{
				my @pfwd = pfwd_hashlist();
				if(defined $remove_name)			{ ($remove_id) = map {$_->{'id'}} grep {$_->{'label'} eq $remove_name} @pfwd }
				elsif(defined $remove_name_pattern)	{ ($remove_id) = map {$_->{'id'}} grep {$_->{'label'} =~ $remove_name_pattern} @pfwd }
				elsif(defined $remove_start_port)	{ ($remove_id) = map {$_->{'id'}} grep {$_->{'start_port'} eq $remove_start_port} @pfwd }
			}
			
			if(defined $remove_id)
			{
				warn "Removing pfwd #$remove_id ...\n";
				dispatch "/Forms/adv_nat_virsvr_1", {VIRTUALSVR_index=>$remove_id, VIRTUALSVR_IndexFlag=>2};
			}
			else
			{
				die "not found\n";
			}
		}
		elsif(@ARGV)
		{
			my ($label, $portrange, $dest_ip, $proto) = @ARGV;
			my ($start_port, $end_port);
			if($portrange =~ /^(\d+)-(\d+)$/)
			{
				$start_port = $1;
				$end_port = $2;
			}
			else
			{
				pod2usage(-exitval=>2, -verbose=>99) unless $portrange =~ /^\d+$/;
				$start_port = $end_port = $portrange;
			}
			$proto = 'ALL' unless $proto;
			$proto = uc $proto;
			pod2usage(-exitval=>2, -verbose=>99) unless $proto ~~ ['TCP', 'UDP', 'ALL'];
			
			my @pfwd = pfwd_hashlist();
			
			my ($next_id) = map {$_->{'id'}} grep {$_->{'start_port'} eq 0} @pfwd;
			die "no more slot\n" unless $next_id;
			
			warn "Adding pfwd #$next_id ...\n";
			my $httpresp = dispatch "/Forms/adv_nat_virsvr_1", {
				VIRTUALSVR_index=>$next_id,
				VIRTUALSVR_IndexFlag=>0,
				VIRTUALSVR_Application=>$label,
				VIRTUALSVR_App_idx=>'-',
				VSProtocolIndex=>$proto,
				VIRTUALSVR_startPort=>$start_port,
				VIRTUALSVR_endPort=>$end_port,
				VIRTUALSVR_localIP=>$dest_ip,
			}, '-i';
			
			if($httpresp =~ /^Location:.*error/m)
			{
				warn "$&\n";
				exit 1;
			}
		}
		else
		{
			my @pfwd = pfwd_table();
			print join("\t", @pfwd_fields)."\n";
			for my $row (@pfwd)
			{
				print join("\t", @$row)."\n";
			}
		}
	}
	case "info"
	{
		my $requested_info = shift @ARGV;
		my %info;
		my $html = dispatch "/status/status_deviceinfo.htm";
		
		if($html =~ /WAN.*?IP Address.*?\n\s*(?'ip'[^<\s]+).*Default Gateway.*?\n\s*(?'gw'[^<\s]+).*Primary DNS.*?\n\s*(?'dns1'[^<\s]+).*Secondary DNS.*?\n\s*(?'dns2'[^<\s]+).*Data Rate.*?\n\s*(?'downlink'[^<]+).*?\n\s*(?'uplink'[^<]+)/s)
		{
			$info{$_} = $+{$_} for keys %+;
		}
		
		$info{'downlink'} = int $info{'downlink'};
		$info{'uplink'} = int $info{'uplink'};
		
		if(defined $requested_info)
		{
			print $info{$requested_info}."\n";
		}
		else
		{
			my %unit = (qw{downlink kbit/s uplink kbit/s});
			for my $k (qw/ip gw dns1 dns2 downlink uplink/)
			{
				print "$k\t$info{$k}\t$unit{$k}\n";
			}
		}
	}
	else
	{
		pod2usage(-exitval=>2, -verbose=>99);
	}
}
