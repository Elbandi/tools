#!/usr/bin/env python2.7
# -*- coding: utf-8 -*-

import os
import sys
import signal
import gtk
import gobject
import glib
import pango
import gettext
import re
import time
from datetime import datetime, timedelta
from dateutil.relativedelta import relativedelta
import math


def win_main_show():
	pass


def act_quit():
	if len(running_timers()) > 0:
		pass
	else:
		gtk.main_quit()
	return True


def add_key_binding(widget, keyname, callback):
	accelgroup = gtk.AccelGroup()
	key, modifier = gtk.accelerator_parse(keyname)
	accelgroup.connect_group(key, modifier, gtk.ACCEL_VISIBLE, callback)
	widget.add_accel_group(accelgroup)


class StockButton(gtk.Button):
	def __init__(self, label=None, stock=None, use_underline=True, icon_size=None, tooltip=None):
		if stock is not None and stock in gtk.stock_list_ids():
			stock_tmp = stock
		else:
			stock_tmp = gtk.STOCK_ABOUT
		super(self.__class__, self).__init__(stock=stock_tmp, use_underline=use_underline)
		if label is not None:
			self.set_markup(label)
		if stock is None:
			self.set_icon('')
		elif stock not in gtk.stock_list_ids():
			self.set_icon(stock)
		if icon_size is not None:
			self.set_icon(stock, icon_size)
		if tooltip is not None:
			self.set_tooltip_text(tooltip)
	def __get_children(self):
		align = self.get_children()[0]
		hbox = align.get_children()[0]
		return hbox.get_children()
	def set_label(self, label):
		x, lbl = self.__get_children()
		lbl.set_label(label)
	def set_markup(self, label):
		x, lbl = self.__get_children()
		lbl.set_markup(label)
	def set_icon(self, icon, size=gtk.ICON_SIZE_BUTTON):
		img, x = self.__get_children()
		if type(icon) == str:
			if icon == '':
				img.props.visible = False
			else:
				img.set_from_icon_name(icon, size)
				img.props.visible = True
		else:
			img.set_from_pixbuf(icon)
			img.props.visible = True



class Clock(gtk.Label):
	name = "Clock"
	
	def __init__(self):
		super(gtk.Label, self).__init__()
		self._format = '%H:%M:%S'
		self._running = False
		self._draining = False
		self._update()
	
	@property
	def is_running(self):
		return self._running
	
	def _next_update_interval_ms(self):
		now = time.time()
		nextsecond = 1 - (now - int(now))
		return int(nextsecond * 1000)
	
	def update_display(self):
		face = time.strftime(self._format, time.localtime(time.time()))
		self.set_markup("<span size='32000'><b>" + face + "</b></span>")
	
	def _update(self):
		if not self._draining:
			self.update_display()
			glib.timeout_add(self._next_update_interval_ms(), self._update, priority=glib.PRIORITY_DEFAULT_IDLE)
		return False
	
	def drain(self):
		self._draining = True


class AlarmClock(gtk.HBox, Clock):
	name = "Alarm"
	
	__gsignals__ = {
		'turned-on': (gobject.SIGNAL_RUN_LAST, gobject.TYPE_BOOLEAN, ()),
		'turned-off': (gobject.SIGNAL_RUN_LAST, gobject.TYPE_BOOLEAN, ()),
		'alarm': (gobject.SIGNAL_RUN_LAST, gobject.TYPE_BOOLEAN, ()),
	}
	
	def __init__(self):
		self.face = AdjustableClock()
		super(gtk.HBox, self).__init__()
		super(Clock, self).__init__()
		self.pack_start(self.face, expand=False, fill=False)
		now = datetime.now()
		self.face.set(now.hour, now.minute, now.second)
		self.show_all()
	
	def turn_on(self):
		now = datetime.now()
		h, m, s = self.face.components
		set_datetime = now.replace(hour=h, minute=m, second=s)
		if set_datetime < now:
			set_datetime += timedelta(days=1)
		self.set_time = int(set_datetime.strftime('%s'))
		self.face.lock()
		self.alarmer = Alarmer()
		self._running = True
		self.emit('turned-on')
	
	def turn_off(self):
		self.face.format_labels(None, None, None)
		self.face.unlock()
		self._running = False
		self.emit('turned-off')
	
	def update_display(self):
		if self._running:
			now = time.time()
			if self.set_time <= now:
				if not self.alarmer.alarmed:
					self.emit('alarm')
					self.alarmer.text = "It's passed %02d:%02d:%02d !!" % self.face.components
					self.alarmer.alarm()
					self.turn_on()
				self.face.format_labels(None, None, None, foreground='red')


class Stopper(Clock):
	name = "Stopper"
	
	__gsignals__ = {
		'started': (gobject.SIGNAL_RUN_LAST, gobject.TYPE_BOOLEAN, ()),
		'paused': (gobject.SIGNAL_RUN_LAST, gobject.TYPE_BOOLEAN, ()),
	}
	
	def __init__(self):
		self._start_time = 0
		self._behind_interval = 0
		self._running = False
		self._last_paused_time = 0
		super(self.__class__, self).__init__()
	
	def run(self):
		if not self._running:
			now = time.time()
			if self._start_time == 0:
				self._start_time = now
			if self._last_paused_time > 0:
				self._behind_interval += now - self._last_paused_time
			self._running = True
			self.emit('started')
			self._update()
	
	def pause(self):
		if self._running:
			self._last_paused_time = time.time()
			self._running = False
			self.emit('paused')
			self._update()
	
	def _next_update_interval_ms(self):
		return 10
	
	def update_display(self):
		if self._start_time > 0:
			if self._running:
				display_time = time.time() - self._start_time - self._behind_interval
			else:
				display_time = self._last_paused_time - self._start_time - self._behind_interval
			hours = display_time / 3600
			face = '%s%02d:%02d.%02d' % (
				('%dh ' % hours) if hours >= 1 else '', 
				display_time / 60 % 60, 
				display_time % 60, 
				(display_time - int(display_time)) * 100,
			)
		else:
			face = '00:00.00'
		self.set_markup("<span size='32000'><b>" + face + "</b></span>")


class SpinLabel(gtk.EventBox):
	def __init__(self, start_value):
		self.format = '%d'
		self._value = start_value
		self._locked = False
		self.range = (0, 59)
		self.label = gtk.Label()
		super(self.__class__, self).__init__()
		self.add(self.label)
		self.connect('scroll-event', self._event_scroll)
		self.connect('motion-notify-event', self._event_drag)
		self.motion_last_pos = 0
		self.drag_sensitivity = 30
		self.show_all()
		self._update_label()
	def __str__(self):
		return str(self._value)
	def __int__(self):
		return self._value
	@property
	def value(self):
		return self._value
	@value.setter
	def value(self, x):
		x = int(x)
		if x > self.range[1]: x = self.range[0]
		if x < self.range[0]: x = self.range[1]
		self._value = x
		self._update_label()
	def lock(self):
		self._locked = True
	def unlock(self):
		self._locked = False
	def _event_scroll(self, X, event):
		if self._locked: return
		delta = +1 if event.direction == gtk.gdk.SCROLL_UP else -1
		self.value += delta
	def _event_drag(self, X, event):
		if self._locked: return
		print event.y
		diff = event.y - self.motion_last_pos
		if abs(diff) > self.drag_sensitivity:
			delta = +1 if diff < 0 else -1
			self.motion_last_pos = event.y
			self.value += delta
	def _update_label(self):
		self.label.set_markup(self.format % self._value)


class AdjustableClock(gtk.HBox):
	def __init__(self, color=None):
		self.hours = SpinLabel(0)
		self.minutes = SpinLabel(0)
		self.seconds = SpinLabel(0)
		self.format_labels('%d:', '%02d:', '%02d')
		super(gtk.HBox, self).__init__()
		self.pack_start(self.hours, expand=False, fill=False)
		self.pack_start(self.minutes, expand=False, fill=False)
		self.pack_start(self.seconds, expand=False, fill=False)
	def format_labels(self, fmt_h, fmt_m, fmt_s, **pango_attrs):
		span_attr = ''.join([" %s='%s'" % (attr.replace('_', '-'), val) for attr, val in pango_attrs.iteritems()])
		fmt = "<span size='32000'%s><b>%%s</b></span>" % (span_attr,)
		if fmt_h is not None: self.fmt_h = fmt_h
		if fmt_m is not None: self.fmt_m = fmt_m
		if fmt_s is not None: self.fmt_s = fmt_s
		self.hours.format = fmt % self.fmt_h
		self.minutes.format = fmt % self.fmt_m
		self.seconds.format = fmt % self.fmt_s
		self.hours.value = self.hours.value
		self.minutes.value = self.minutes.value
		self.seconds.value = self.seconds.value
	@property
	def components(self):
		return int(self.hours), int(self.minutes), int(self.seconds)
	def lock(self):
		for comp in self.hours, self.minutes, self.seconds:
			comp.lock()
	def unlock(self):
		for comp in self.hours, self.minutes, self.seconds:
			comp.unlock()
	def set(self, h, m, s):
		self.hours.value = h
		self.minutes.value = m
		self.seconds.value = s


class KitchenTimer(gtk.HBox, Clock):
	name = "Timer"
	
	__gsignals__ = {
		'started': (gobject.SIGNAL_RUN_LAST, gobject.TYPE_BOOLEAN, ()),
		'stopped': (gobject.SIGNAL_RUN_LAST, gobject.TYPE_BOOLEAN, ()),
		'due': (gobject.SIGNAL_RUN_LAST, gobject.TYPE_BOOLEAN, ()),
	}
	
	def __init__(self):
		self.face = AdjustableClock()
		self.alarmer = Alarmer()
		super(gtk.HBox, self).__init__()
		super(Clock, self).__init__()
		self.pack_start(self.face, expand=False, fill=False)
		self.show_all()
	
	@property
	def scheduled_time(self):
		h, m, s = self.face.components
		return h * 3600 + m * 60 + s
	
	def start(self):
		if not self._running and not self.alarmer.alarmed:
			self.scheduled_time_components = self.face.components
			self.face.lock()
			self._future_time = time.time() + self.scheduled_time
			self._running = True
			self.emit('started')
	
	def stop(self):
		self.face.format_labels(None, None, None)
		self._running = False
		self.emit('stopped')
	
	def update_display(self):
		if self._running:
			display_time = self._future_time - time.time()
			if display_time <= 0:
				if not self.alarmer.alarmed:
					self.emit('due')
					self.alarmer.text = "Your %d:%02d:%02d timer is due!" % self.scheduled_time_components
					self.alarmer.alarm()
				self.face.format_labels('-%d:', None, None, foreground='red')
			self.face.set(abs(display_time) / 3600, abs(display_time) / 60 % 60, abs(display_time) % 60)


class Alarmer(object):
	def __init__(self):
		self.alarmed = False
		self.title = 'Alarm'
		self.text = 'alarm!'
	
	def alarm(self):
		dialog = gtk.MessageDialog(flags=gtk.DIALOG_DESTROY_WITH_PARENT, type=gtk.MESSAGE_WARNING, buttons=gtk.BUTTONS_OK, message_format=self.title)
		dialog.set_type_hint(gtk.gdk.WINDOW_TYPE_HINT_TOOLBAR)
		dialog.set_keep_above(True)
		dialog.set_skip_taskbar_hint(False)
		dialog.set_icon_name('alarm-clock')
		dialog.get_image().set_from_icon_name('alarm-clock', gtk.ICON_SIZE_DIALOG)
		dialog.set_title(self.title)
		dialog.format_secondary_text(self.text)
		btn_ok = dialog.get_widget_for_response(gtk.RESPONSE_OK)
		btn_ok.connect('clicked', lambda *X: dialog.destroy())
		dialog.show_all()
		win_main.present()
		dialog.present()
		self.alarmed = True


class ClockUI(Clock):
	@property
	def clock(self):
		return self


class StopperUI(gtk.HBox):
	name = Stopper.name
	
	def __init__(self, *pargs, **kwargs):
		super(gtk.HBox, self).__init__(*pargs, **kwargs)
		self.clock = Stopper()
		self.btn_start = StockButton(stock=gtk.STOCK_MEDIA_PLAY, label='')
		self.btn_pause = StockButton(stock=gtk.STOCK_MEDIA_PAUSE, label='')
		self.btn_start.connect('clicked', lambda *X: self.clock.run())
		self.btn_pause.connect('clicked', lambda *X: self.clock.pause())
		self.pack_start(self.clock, expand=True, fill=True)
		self.pack_start(self.btn_start, expand=False, fill=False)
		self.pack_start(self.btn_pause, expand=False, fill=False)
		
		self.clock.connect('started', lambda *X: self.manage_button_states())
		self.clock.connect('paused', lambda *X: self.manage_button_states())
		self.manage_button_states()
	
	def manage_button_states(self):
		running = self.clock.is_running
		self.btn_start.set_sensitive(not running)
		self.btn_pause.set_sensitive(running)
	

class KitchenTimerUI(gtk.HBox):
	name = KitchenTimer.name
	
	def __init__(self, *pargs, **kwargs):
		super(gtk.HBox, self).__init__(*pargs, **kwargs)
		self.clock = KitchenTimer()
		self.btn_start = StockButton(stock=gtk.STOCK_MEDIA_PLAY, label='')
		self.btn_start.connect('clicked', lambda *X: self.clock.start())
		self.btn_stop = StockButton(stock=gtk.STOCK_MEDIA_STOP, label='')
		self.btn_stop.connect('clicked', lambda *X: self.clock.stop())
		self.pack_start(self.clock, expand=True, fill=True)
		self.pack_start(self.btn_start, expand=False, fill=False)
		self.pack_start(self.btn_stop, expand=False, fill=False)
		
		self.clock.connect('started', lambda *X: self.manage_button_states())
		self.clock.connect('stopped', lambda *X: self.manage_button_states())
		self.manage_button_states()
	
	def manage_button_states(self):
		running = self.clock.is_running
		self.btn_start.set_sensitive(not running)
		self.btn_stop.set_sensitive(running)
	

class AlarmClockUI(gtk.HBox):
	name = AlarmClock.name
	
	def __init__(self, *pargs, **kwargs):
		super(gtk.HBox, self).__init__(*pargs, **kwargs)
		self.clock = AlarmClock()
		self.btn_set = gtk.ToggleButton()
		img = gtk.Image()
		img.set_from_icon_name('alarm-clock', size=gtk.ICON_SIZE_BUTTON)
		self.btn_set.set_image(img)
		self.btn_set.connect('clicked', lambda event: self.clock.turn_on() if self.btn_set.get_active() else self.clock.turn_off())
		self.pack_start(self.clock, expand=True, fill=True)
		self.pack_start(self.btn_set, expand=False, fill=False)
		self.show_all()


class MultiClassInstantiatorBox(gtk.HBox):
	def __init__(self, classes):
		super(self.__class__, self).__init__(homogeneous=True, spacing=2)
		self._items = []
		for cls in classes:
			column = gtk.VBox()
			add_widget_button = StockButton(stock=gtk.STOCK_ADD, label=cls.name)
			add_widget_button.connect('clicked', lambda X, column, cls: self.new_item(column, cls), column, cls)
			column.pack_start(add_widget_button, expand=False, fill=False)
			self.pack_start(column, expand=False, fill=False)
			self.new_item(column, cls)
		self.show_all()
	
	def new_item(self, column, cls):
		item = cls()
		self._items.append(item)
		removable_box = gtk.HBox()
		removable_box.inner_widget = item
		button_remove = StockButton(stock=gtk.STOCK_REMOVE, label='')
		button_remove.connect('clicked', lambda X, removable_box: self.remove_item(removable_box), removable_box)
		removable_box.pack_start(item, expand=True, fill=True)
		removable_box.pack_start(button_remove, expand=False, fill=False)
		column.pack_start(removable_box, expand=False, fill=False)
		column.show_all()
	
	@property
	def items(self):
		return self._items
	
	def remove_item(self, removable_box):
		item = removable_box.inner_widget
		if not item.clock.is_running:
			self.items.remove(item)
			item.clock.drain()
			item.destroy()
			removable_box.destroy()


def running_timers():
	return [item for item in multibox.items if item.clock.is_running]


win_main = gtk.Window(gtk.WINDOW_TOPLEVEL)
box0 = gtk.VBox()

win_main.set_size_request(800, -1)
win_main.set_type_hint(gtk.gdk.WINDOW_TYPE_HINT_TOOLBAR)
win_main.set_keep_above(True)
win_main.set_icon_name('alarm-clock')

start_evt = win_main.connect('map-event', lambda w,e: (win_main.disconnect(start_evt), win_main_show()))
win_main.connect('delete-event', lambda w,e: act_quit())
add_key_binding(win_main, '<Ctrl><Shift>Q', lambda *x: act_quit())

box0.pack_start(ClockUI(), expand=False, fill=True)
multibox = MultiClassInstantiatorBox(classes=(StopperUI, KitchenTimerUI, AlarmClockUI))
box0.pack_start(multibox, expand=True, fill=True)
win_main.add(box0)
win_main.show_all()

gtk.main()
