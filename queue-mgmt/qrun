#!/bin/bash

usage_help_text="qrun [<OPTIONS>]
Run next task in the queue.
OPTIONS:
  -q, --quiet
  -qq, --very-quiet
  -d, --queue-dir <DIR>
  -s, --suppress-output
  -n, --dry-run
  -E, --no-task-exit-code"

qrun_suppress_output=''
qrun_return_task_status=yes

. qadd-common



shopt -s nullglob
next_item_id=''


for itemfile in $(find "$queue_dir" -maxdepth 1 -name '*.comm' -printf '%f\n' | sort -n -t '.')
do
	item_id=`basename "$itemfile" .comm`
	state=`qtask_state "$item_id"`
	
	if [ "$state" = running ]
	then
		# it's a running task. don't start any more.
		if [ ! $quiet ]
		then
			pid=`cat "$queue_dir/$item_id.pid"`
			pidns=`cat "$queue_dir/$item_id.pidns"`
			this_pidns=`readlink /proc/self/ns/pid`
			if [ "$pidns" = "$this_pidns" ]
			then
				pidns_info=''
			else
				pidns_info=" pidns=${pidns#*:}"
			fi
			task_command=`cat "$queue_dir/$item_id.comm" | { read -r -d $'\0' task_command rest; echo "$task_command"; }`
			echo "qrun: task $item_id (pid=$pid$pidns_info cmd=$task_command) is running. not starting new one." >&2
		fi
		exit -6
	fi
	
	if [ "$state" = queued ]
	then
		if [ -z "$next_item_id" ]
		then
			next_item_id=$item_id
			break
		fi
	fi
done

if [ -z "$next_item_id" ]
then
	if [ ! $quiet ]
	then
		echo "qrun: no next item found to run" >&2
	fi
	exit -5
fi


pwd=`cat "$queue_dir/$next_item_id.pwd"`
umask=`cat "$queue_dir/$next_item_id.umask"`
load_command_global "$queue_dir/$next_item_id.comm"

{
	if [ $dryrun ]
	then
		exit 0
	fi
	
	pidfile=$queue_dir/$next_item_id.pid
	echo $BASHPID > "$pidfile"
	readlink /proc/self/ns/pid > "${pidfile}ns"
	
	set -e
	
	# lock our pidfile and release the lock on queue_dir
	exec {task_lock_fd}>>"$pidfile"
	flock --exclusive "$task_lock_fd"
	exec {lock_fd}>&-
	
	if [ $qrun_suppress_output ]
	then
		exec >/dev/null
		exec 2>/dev/null
	fi
	
	# now we are turning into a task
	. "$queue_dir/$next_item_id.env.bash"
	if [ -e "$queue_dir/$next_item_id.func.bash" ]; then . "$queue_dir/$next_item_id.func.bash"; fi
	cd "$pwd"
	umask "$umask"
	
	# setsid prevents SIGINT to sent to us when the user types ctrl-c on the main foreground process,
	# so leaving it to the main qrun process to reape our exit status.
	exec -- setsid "${command[@]}"
	exit 127
} &

task_pid=$!

if [ ! $very_quiet ]
then
	echo "qrun:${dryrun:+ DRYRUN} starting task $next_item_id, pid: $task_pid, command: ${command[*]}" >&2
fi

# release the lock on queue_dir, letting other queue management happen while running the task
exec {lock_fd}>&-

signal_handler()
{
	interrupted=yes
}

trap signal_handler INT

while true
do
	interrupted=''
	set +e
	wait $task_pid
	task_exit_code=$?
	set -e
	
	if [ $interrupted ]
	then
		task_exit_code=''
		kill -s INT $task_pid || true
	else
		break
	fi
done

if [ $dryrun ]
then
	exit 0
fi

echo -n $task_exit_code > "$queue_dir/$next_item_id.end"

if [ ! $very_quiet ]
then
	echo "qrun: task $next_item_id returned $task_exit_code" >&2
fi

if [ $qrun_return_task_status ]
then
	exit $task_exit_code
else
	exit 0
fi
