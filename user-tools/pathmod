#!/usr/bin/env perl

=pod

=head1 NAME

pathmod - Run command with a modified PATH

=head1 SYNOPSIS

pathmod [I<OPTIONS>] [--] I<COMMAND> [I<ARGS>]

=head1 DESCRIPTION

=head1 OPTIONS

=over 4

=item -d, --direct

Lookup only I<COMMAND> according to the modified B<PATH>.
Command calls by I<COMMAND> and its children still inherits B<PATH> environment variable from pathmod(1)'s caller.
Unless of course I<COMMAND> changes it on its own.

If neither B<-d> nor B<-s> is given, the default mode is B<-d>.

=item -s, --subsequent

Modify B<PATH> environment for I<COMMAND>,
so I<COMMAND> is still looked up according to the same B<PATH> as pathmod(1),
but its children are going to be looked up according to the modified path.

=item -d -s

Simultaneous B<--direct> and B<--subsequent> is supported.
In this case I<COMMAND> is looked up according to the modified B<PATH>
and the B<PATH> environment is changed too.
This is nearly the same as C<env PATH=MOD_PATH COMMAND ARGS>.

=item -r, --remove I<DIR>

Remove I<DIR> directory from the B<PATH>.
Note, items in B<PATH> are normalized first.
Normalization rules:

=item --remove-regex I<PATTERN>

=item -a, --append I<DIR>

=item -p, --prepend I<DIR>

=item -i, --insert-before I<PATTERN>:I<DIR>

Insert I<DIR> before each item in the B<PATH> which matches to I<PATTERN> regexp.

=over 8

=item empty item is the self (F<.> "dot") directory

=item remove trailing slash

=back

=back

=head1 LIMITATIONS

=head1 SEE ALSO

=cut


use constant { STAT_DEV=>0, STAT_INODE=>1, STAT_PERM=>2, STAT_NLINKS=>3, STAT_UID=>4, STAT_GID=>5, STAT_RDEV=>6, STAT_SIZE=>7, STAT_ATIME=>8, STAT_MTIME=>9, STAT_CTIME=>10, STAT_BLOCKSIZE=>11, STAT_BLOCKS=>12, };
use Cwd qw/getcwd realpath/;
use Data::Dumper;
use Date::Parse;
use DateTime::Format::Strptime;
use Encode qw/decode encode decode_utf8 encode_utf8/;
use Errno qw/:POSIX/;
use Fcntl qw/:flock :seek F_GETFL F_SETFL O_NONBLOCK F_GETFD F_SETFD FD_CLOEXEC/;
use File::Basename;
use File::Temp qw/tempfile/;
use Getopt::Long qw/:config no_ignore_case no_bundling no_getopt_compat no_auto_abbrev require_order/;
use IPC::Run qw/run/;
use List::MoreUtils qw/all any none/;
use Pod::Usage;
use POSIX;
use Socket qw/AF_UNIX AF_INET SOCK_STREAM pack_sockaddr_in inet_aton sockaddr_un/;
no if ($] >= 5.018), 'warnings' => 'experimental::smartmatch';

$OptVerbose = 0;
$OptDirect = undef;
$OptSubsequent = undef;
@OptRemove = ();
@OptAppend = ();
@OptPrepend = ();

@ParentPATH = map { s{^$}{.}; s{/+$}{}; $_ } split /:/, $ENV{PATH};
@NewPATH = @ParentPATH;

GetOptions(
	'v|verbose!' => \$OptVerbose,
	'd|direct!' => \$OptDirect,
	's|subsequent!' => \$OptSubsequent,
	'r|remove=s@' => sub {
		my ($getopt, $remove_item) = @_;
		@NewPATH = grep { $_ ne $remove_item } @NewPATH
	},
	'remove-regex=s@' => sub {
		my ($getopt, $remove_pattern) = @_;
		@NewPATH = grep { $_ !~ $remove_pattern } @NewPATH
	},
	'a|append=s@' => sub {
		my ($getopt, $item) = @_;
		push @NewPATH, $item;
	},
	'p|prepend=s@' => sub {
		my ($getopt, $item) = @_;
		unshift @NewPATH, $item;
	},
	'i|insert-before=s@' => sub {
		my ($getopt, $pattern_item) = @_;
		my ($pattern, $item) = $pattern_item =~ /^(.*):([^:]+)$/;
		@NewPATH = map { $_ =~ $pattern ? ($item, $_) : $_ } @NewPATH;
	},
	'help' => sub { pod2usage(-exitval=>0, -verbose=>99); },
	'<>' => sub { unshift @ARGV, @_[0]; die '!FINISH'; },
) or pod2usage(-exitval=>2, -verbose=>99);


if(not defined $OptDirect and not defined $OptSubsequent)
{
	$OptDirect = 1;
}


($Command, @Arguments) = @ARGV;
$ExecCommand = $Command;

if($OptSubsequent)
{
	$ENV{PATH} = join ':', @NewPATH;
}

if($OptDirect or $OptSubsequent and not ($OptDirect and $OptSubsequent))
{
	my @lookupPATH = $OptDirect ? (@NewPATH) : (@ParentPATH);
	
	undef $ExecCommand;
	for my $dir (@lookupPATH)
	{
		$ExecCommand = "$dir/$Command";
		last if -x $ExecCommand;
		undef $ExecCommand;
	}
	
	if(not defined $ExecCommand)
	{
		warn "$0: $Command: not found\n";
		exit 127;
	}
}

exec {$ExecCommand} $Command, @Arguments;
($errno, $errstr) = (int $!, $!);
warn "$0: $ExecCommand: $errstr\n";
exit 125+$errno;


__END__

                direct only     subsequent only     direct+subsequent   none
---------------	---------------	-------------------	-------------------	---------------
PATH env        no change       change              change              no change
command path    lookup new      lookup old          keep                keep
