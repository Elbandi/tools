#!/usr/bin/env perl

use Getopt::Long qw/:config no_ignore_case bundling no_getopt_compat/;
use Pod::Usage;

$char_vert = '│';
$char_hori = '──';
$char_chld = '├';
$char_last = '└';

GetOptions(
	'v|vertical=s' => \$char_vert,
	'h|horizontal=s' => \$char_hori,
	'c|child=s' => \$char_chld,
	'l|last=s' => \$char_last,
	'a|ascii!' => sub {
		$char_vert = '|';
		$char_hori = '--';
		$char_chld = '+';
		$char_last = '`';
	},
) or pod2usage(-exitval=>2, -verbose=>99);


$indent_prev = 0;
$level = 0;
%level_indent = (0=>0);
$Tree = { subtree=>[], };
$ForkPoint = $Tree;

while(<STDIN>)
{
	s/^(\t*)//;
	$indent = length $1;
	chomp;
	$data = $_;
	while(/\\$/)
	{
		$data =~ s/\\$/\n/;
		$_ = <STDIN>;
		s/^\t{$indent}//;
		chomp;
		$data .= $_;
	}
	
	if($indent > $indent_prev)
	{
		$level++;
		$level_indent{$level} = $indent;
		$ForkPoint = $ForkPoint->{subtree}->[$#{$ForkPoint->{subtree}}];
	}
	elsif($indent < $indent_prev)
	{
		while($indent < $level_indent{$level})
		{
			$level--;
			$ForkPoint = $ForkPoint->{parent};
		}
	}
	
	push @{$ForkPoint->{subtree}}, {data=>$data, parent=>$ForkPoint, subtree=>[]};
	
	$indent_prev = $indent;
}


sub print_subtree
{
	my $subtree = shift;
	my $level = shift;
	my $sidebranches = shift;
	my $pos = 0;
	
	for my $node (@$subtree)
	{
		my $last = $pos == $#$subtree;
		
		if($level == 0)
		{
			printf "%s\n", $node->{data};
			
			print_subtree($node->{subtree}, $level+1, '');
		}
		else
		{
			my $childindex = 0;
			
			for my $data (split /\n/, $node->{data})
			{
				printf "%s%s %s\n",
					$sidebranches,
					$childindex == 0
						? ($last ? $char_last : $char_chld).$char_hori
						: ($last ? ' '        : $char_vert).'  ',
					$data;
				$childindex++;
			}
			
			print_subtree($node->{subtree}, $level+1, $sidebranches . ($last ? '    ' : $char_vert.'   '));
		}
		
		$pos++;
	}
}

print_subtree($Tree->{subtree}, 0, '');


__END__

=pod

=head1 NAME

indent2tree - Makes TAB-indented text into ascii tree chart

=head1 OPTIONS

=over 4

=item -a, --ascii

=item -v, --vertical I<CHAR>

=item -h, --horizontal I<CHAR>

=item -c, --child I<CHAR>

=item -l, --last I<CHAR>

=back

=head1 DESCRIPTION

Input: lines with leading tabs representing the depth in the tree.
Multiline records are supported by terminating lines (all but the last one) by backslash.

Output: tree diagramm with (ascii or unicode) drawing chars.
Set custom drawing chars by B<-v>, B<-h>, B<-c>, and B<-l> options.

=head1 SEE ALSO

=over 4

=item https://github.com/jez/as-tree

=back

=cut
