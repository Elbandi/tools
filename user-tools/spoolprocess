#!/usr/bin/env perl

=pod

=head1 NAME

spoolprocess - process files in a spool directory

=head1 SYNOPSIS

spoolprocess [I<OPTIONS>]

=head1 DESCRIPTION

Take all files in I<DIRECTORY> (specified by B<-d> option>),
group them by their basename, ie. name without an optional "dot + number" suffix
(C<.1>, C<.2>, ..., also known as B<version number>),
and call F<< /etc/spoolprocess/B<BASENAME> >> programm for each group for processing

The programm (usually a script) gets the spool file's path as arguments
(or arguments if there are more files in the group).

If the programm succeeds, delete the file.

=head1 OPTIONS

=over 4

=item -d, --directory I<DIRECTORY>

This option is repeatable.

=item -g, --group I<BASENAME>

Process only those files with I<BASENAME>.
This option is repeatable.

=item -L, --latest

Process only the latest (highest version number) file in each group.
The default is to process all files in ascending order of version numbers.

=item -S, --scriptdir I<DIR>

Lookup programms in I<DIR> instead of F</etc/spoolprocess>.
This option is repeatable.

=item -w, --wrapper I<COMMAND>

Prepend I<COMMAND> to handler scripts found in B<--scriptdir>.
I<COMMAND> is tokenized by whitespaces.
So B<-w "bash -x"> makes script invoked like this for example:

 bash -x /etc/spoolprocess/something spooldir/something.1

=item -v, --verbose

=back

=head1 LIMITATIONS

spoolprocess(1) does not do locking.
Run it under flock(1), singleinstance(1), cronrun(1), or similar
if you deem it necessary.

I<DIRECTORY> is scanned non-recursively.

=head1 SEE ALSO

uniproc(1)

=cut


use constant { STAT_DEV=>0, STAT_INODE=>1, STAT_PERM=>2, STAT_NLINKS=>3, STAT_UID=>4, STAT_GID=>5, STAT_RDEV=>6, STAT_SIZE=>7, STAT_ATIME=>8, STAT_MTIME=>9, STAT_CTIME=>10, STAT_BLOCKSIZE=>11, STAT_BLOCKS=>12, };
use Cwd qw/getcwd realpath/;
use Data::Dumper;
use Date::Parse;
use DateTime::Format::Strptime;
use Encode qw/decode encode decode_utf8 encode_utf8/;
use Errno qw/:POSIX/;
use Fcntl qw/:flock :seek F_GETFL F_SETFL O_NONBLOCK F_GETFD F_SETFD FD_CLOEXEC/;
use File::Basename;
use File::Temp qw/tempfile/;
use File::Glob;
use Getopt::Long qw/:config no_ignore_case no_bundling no_getopt_compat no_auto_abbrev require_order/;
use IPC::Run qw/run harness/;
use List::MoreUtils qw/all any none/;
use Pod::Usage;
use POSIX;
use Socket qw/AF_UNIX AF_INET SOCK_STREAM pack_sockaddr_in inet_aton sockaddr_un/;
no if ($] >= 5.018), 'warnings' => 'experimental::smartmatch';

$OptVerbose = 0;
@OptDirectories = ();
@OptGroups = ();
@OptScriptdirs = ();
$OptWrapperCmd = undef;
$OptProcessLatest = 0;


GetOptions(
	'v|verbose!' => \$OptVerbose,
	'd|directory=s@' => \@OptDirectories,
	'S|scriptdir=s@' => \@OptScriptdirs,
	'w|wrapper=s' => \$OptWrapperCmd,
	'g|group=s@' => \@OptGroups,
	'L|latest!' => \$OptProcessLatest,
	'help' => sub { pod2usage(-exitval=>0, -verbose=>99); },
	'<>' => sub { unshift @ARGV, @_[0]; die '!FINISH'; },
) or pod2usage(-exitval=>2, -verbose=>99);

if(not @OptDirectories)
{
	die "$0: need a directory\n";
}

if(not @OptScriptdirs)
{
	push @OptScriptdirs, "/etc/spoolprocess";
}

if(defined $OptWrapperCmd)
{
	@WrapperCmd = split /\s+/, $OptWrapperCmd;
}

%TriggerFiles = ();

for my $trigger_dir (@OptDirectories)
{
	opendir $dh, $trigger_dir;
	while(my $filename = readdir $dh)
	{
		my $filepath = "$trigger_dir/$filename";
		next if ! -f $filepath;
		
		my $basename = $filename;
		my $ver = -1;
		if($filename =~ /^(.+)\.(\d+)$/)
		{
			$basename = $1;
			$ver = $2;
		}
		next if @OptGroups and not $basename ~~ [@OptGroups];
		push @{$TriggerFiles{$basename}->{files}}, {path => $filepath, ver => $ver};
	}
	closedir $dh;
}

for my $basename (keys %TriggerFiles)
{
	my @trigger_filepaths = map {$_->{path}} sort {$a->{ver} <=> $b->{ver}} @{$TriggerFiles{$basename}->{files}};
	my $handler_found = 0;
	
	for my $script_dir (@OptScriptdirs)
	{
		my $script_path = "$script_dir/$basename";
		if(-x $script_path)
		{
			$handler_found = 1;
			my @files_to_process;
			if($OptProcessLatest)
			{
				@files_to_process = ($trigger_filepaths[-1]);
			}
			else
			{
				@files_to_process = @trigger_filepaths;
			}
			
			for my $trigger_filepath (@files_to_process)
			{
				my @handler_cmd = ();
				push @handler_cmd, @WrapperCmd if defined $OptWrapperCmd;
				push @handler_cmd, $script_path, $trigger_filepath;
				
				warn "$0: running ".join(" ", @handler_cmd)."\n" if $OptVerbose;
				my $stdin = '';
				my $harness = harness [@handler_cmd], \$stdin;
				$harness->run;
				my $result = $harness->full_result;
				
				if($result == 0)
				{
					warn "$0: successful: $basename\n" if $OptVerbose;
					if($OptProcessLatest)
					{
						# delete all versions when only the latest file is requested to process.
						unlink $_ for @trigger_filepaths;
					}
					else
					{
						unlink $trigger_filepath;
					}
				}
				else
				{
					warn sprintf "%s: error %d signal %d\n", $0, WEXITSTATUS($result), WTERMSIG($result) if $OptVerbose;
				}
			}
			last;
		}
	}
	
	if(not $handler_found)
	{
		warn "$0: handler not found for: $basename\n";
	}
}
