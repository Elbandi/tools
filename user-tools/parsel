#!/usr/bin/env python3

"""
=pod

=head1 NAME

parsel - Select parts of a HTML document based on CSS selectors

=head1 INVOCATION

parsel <B<SELECTOR>> [<B<SELECTOR>> [...]] < document.html

=head1 DESCRIPTION

This command takes an HTML document in STDIN and some CSS selectors in
arguments. See 'parsel' and 'cssselect' python modules to see which
selectors and pseudo selectors are supported.

Each B<SELECTOR> selects a part in the DOM, but unlike CSS, does not
narrow the DOM tree down for subsequent selectors. So a sequence of
C<div p> arguments (2 arguments) selects all C<< <DIV> >> and then all C<< <P> >> in
the document; in other words it is NOT equivalent to the C<div p> css
selector which selects only those <P> which are under any <DIV>.
To combine selectors, see the C</> (slash) operator below.

Each B<SELECTOR> also outputs what was matched, in the following format:
First output an integer how many distinct HTML parts were selected, then
output the selected parts themself each in its own line.
CR, LF, and Backslash chars are escaped by one Backslash char. It's
useful for programmatic consumption, because you only have to fist read
a line which tells how many subsequent lines to read: each one is one
selected DOM sub-tree on its own (or text, see C<::text> and C<[[ATTRIB]]> below).
Then just unescape Backslash-R, Backslash-N, and double Backslashes
(for example with C<sed -e 's/\\\\/\\/g; s/\\r/\r/g; s/\\n/\n/g'>)
to get the HTML content.

Additionally it takes these special arguments as well:

=over 4

=item B<@>SELECTOR

Prefix your selector with an C<@> at sign to suppress output.
Mnemonic: Command line echo suppression in DOS batch and in Makefile.

=item B<text{}> or B<::text>

Remove HTML tags and leaves text content only before output.
C<text{}> syntax is borrowed from pup(1).
C<::text> form is there for you if curly brackets are magical in your shell and you don't want to type escaping.
Note, C<::text> is not a standard CSS pseudo selector at the moment.

=item B<attr{ATTRIB}> or B<[[ATTRIB]]>

Output only the value of the uppermost selected element's ATTRIB attribute.
C<attr{}> syntax is borrowed from pup(1).
Mnemonic for the C<[[ATTRIB]]> form: in CSS you filter by tag attribute
with C<[attr]> square brackets, but as it's a valid selector,
parsel(1) takes double square brackets to actually output the attribute.

=item B</> (forward slash)

A stand-alone C</> takes the current selection as a base for the rest of the selectors.
Therefore the subsequent I<SELECTOR>s work on the previously selected elements,
not on the document root.
Mnemonic: one directory level deeper.
So this arg sequence: C<.content / p div> selects only those P and DIV elements
which are inside a "content" class. 
This is useful because with css only, you can not group P and DIV together here.
In other words neither C<.content p, div> nor C<.content E<gt> p, div> provides
the same result.

=item B<SEL1/SEL2/SEL3>

A series of selectors delmited by C</> forward slashes in a single argument
is to delve into the DOM tree, but show only those elements which the last selector yields.
In contrast to the multi-argument variant C<SEL1 / SEL2 / SEL3>, which shows everything
SEL1, SEL2, SEL3, etc produces.
Similar to this 5 words argument: C<@SEL1 / @SEL2 / SEL3>, except C<SEL1/SEL2/SEL3>
rewinds the base selection to the one before SEL1, while the former one moves the
base selection to SEL3 at the end.

You may still silence its output by prepending C<@>, like: C<@SEL1/SEL2/SEL3>, so
not even SEL3 will be shown.
This is useful when you want only its attributes or inner text (see B<text{}> and B<attr{}>).

Since slashes may occour normally in valid CSS selectors,
please double those C</> slashes which are not meant to separate selectors,
but are part of a selector - usually an URL in a tag attribute.
Eg. instead of C<a[href="http://example.net/page"]>, input C<a[href="http:////example.net//page"]>.

=item B<..> (double period)

A stand-alone C<..> rewinds the base DOM selection to the
previous base selection before the last C</>.
Mnemonic: parent directory.
Note, it does not select the parent element in the DOM tree,
but the stuff previously selected in this parsel(1) run.
To select the parent element(s) use C<parent{}>.

=item B<parent{}> or B<:parent>

Select the currently selected elements' parent elements on the DOM tree.
Note, C<:parent> is not a standard CSS selector at the moment.
Use the C<parent{}> form to disambiguate it from real (standardized) CSS selectors in your code.

=item B<@:root>

Rewind base selection back to the DOM's root.
Note, C<:root> is also a valid CSS pseudo selector, but in a subtree (entered into by C</>)
it would yield only that subtree, not the original DOM, so parsel(1) goes back to it at this point.
You likely need C<@> too to suppress output the whole document here.

=back

=head1 OPTIONS

=over 4

=item -1

Show only the first element found.
The output is not escaped in this case.

=back

=head1 EXAMPLE OUTPUT

  $ parsel input[type=text] < page.html
  2
  <input type="text" name="domain" />
  <input type="text" name="username" />

  $ parsel input[type=text] [[name]] < page.html
  2
  <input type="text" name="domain" />
  <input type="text" name="username" />
  2
  domain
  username

  $ parsel @input[type=text] [[name]] < page.html
  2
  domain
  username

  $ parsel @form ::text < page.html
  1
  Enter your logon details:\r\nDomain:\r\nUsername:\r\nPassword:\r\nClick here to login:\r\n


=head1 REFERENCE

=over 4

=item https://www.w3schools.com/cssref/css_selectors.php

=item https://developer.mozilla.org/en-US/docs/Web/CSS/Reference#selectors

=item https://github.com/scrapy/cssselect

=item https://cssselect.readthedocs.io/en/latest/#supported-selectors

=back

=head1 SIMILAR TOOLS

=over 4

=item L<https://github.com/ericchiang/pup>

=item L<https://github.com/suntong/cascadia>

=item L<https://github.com/mgdm/htmlq>

=back

=cut

"""


import sys
import parsel
from parsel import Selector
import w3lib.html
import re
import argparse


argparser = argparse.ArgumentParser(formatter_class=argparse.ArgumentDefaultsHelpFormatter)
argparser.add_argument('-1', action='store_true', help="show only 1 element unescaped")
argparser.add_argument('SELECTORS', nargs='*', help="see man page for details")
cli_args = argparser.parse_args()
opt_single_hit = getattr(cli_args, '1')


def parsel_escape(s):
	s = s.replace('\\', '\\\\')
	s = s.replace('\r', '\\r')
	s = s.replace('\n', '\\n')
	return s

def show_hits(selection):
	if not silenced:
		if not opt_single_hit:
			print(len(selection))
		
		for hit in selection:
			out = hit.get()
			
			if output_text_only:
				out = w3lib.html.remove_tags(out)
			if output_attribute_only is not None:
				out = hit.attrib.get(output_attribute_only, '')
			
			if opt_single_hit:
				print(out)
				sys.exit(0)
			else:
				print(parsel_escape(out))


html = ''.join(sys.stdin.readlines())
whole_selection = Selector(text = html)

base_selection = parsel.selector.SelectorList([whole_selection])
curr_selection = base_selection
prev_selections = []

for arg in cli_args.SELECTORS:
	
	silenced = False
	output_text_only = False
	output_attribute_only = None
	apply_current_selector = True
	
	if arg.startswith('@'):
		silenced = True
		arg = arg[1:]
	
	sub_selectors = re.split(r'(?<!/)/(?!/)', arg)
	if len(sub_selectors) > 1 and arg != '/':
		sub_selectors = [sel.replace('//', '/') for sel in sub_selectors]
		sub_selection = base_selection
		
		for sel in sub_selectors:
			try:
				sub_selection = sub_selection.css(sel)
			except:
				sys.stderr.write("CSS selection error at '%s' in '%s'.\n" % (sel, arg))
				raise
		
		show_hits(sub_selection)
		
		curr_selection = sub_selection
		continue
	
	arg = arg.replace('//', '/')
	
	if arg == '/':
		prev_selections.append(curr_selection)
		base_selection = curr_selection
		continue
	
	if arg == '..':
		base_selection = prev_selections.pop()
		continue

	if arg == ':root':
		# cssselector knows this ':root' pseudo selector, but it'd select
		# only the current scope's root which we have narrowed, so step in
		# here and rewind to the original DOM.
		base_selection = parsel.selector.SelectorList([whole_selection])
	
	if arg == ':parent' or arg == 'parent{}':
		curr_selection = curr_selection.xpath('..')
		apply_current_selector = False
	
	if arg == '::text' or arg == 'text{}':
		output_text_only = True
		apply_current_selector = False
	
	attr_match = re.search('^attr\{(.+)\}$', arg) or re.search('^\[\[(.+)\]\]$', arg)
	if attr_match:
		output_attribute_only = attr_match.group(1)
		apply_current_selector = False
	
	if apply_current_selector:
		try:
			curr_selection = base_selection.css(arg)
		except:
			sys.stderr.write("CSS selection error at '%s'.\n" % arg)
			raise
	
	show_hits(curr_selection)
