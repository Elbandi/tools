#!/usr/bin/env perl

use POSIX;
use Getopt::Long qw/:config no_ignore_case permute/;
use Pod::Usage;

$0 = "reportcmdstatus";

$report_start = 0;
$clone_status = 0;

GetOptions(
	's|report-start!' => \$report_start,
	'c|clone!' => \$clone_status,
	'help|?' => sub{ pod2usage(-exitval=>0, -verbose=>99); },
	'<>' => sub{ unshift @ARGV, @_; die '!FINISH'; },
) or pod2usage(-exitval=>2, -verbose=>99);

if($report_start)
{
	eval q{ use String::ShellQuote; 1; } or die $@;
	printf STDERR "starting: %s\n", join(' ', map {shell_quote $_} @ARGV);
}

system @ARGV;
$status = ${^CHILD_ERROR_NATIVE};

if(WIFSIGNALED($status))
{
	printf STDERR "command terminated by signal %d.\n", WTERMSIG($status);
	$mystatus = 128 + WTERMSIG($status);
}
else
{
	printf STDERR "command exited with status %d.\n", WEXITSTATUS($status);
	$mystatus = WEXITSTATUS($status);
}

exit $mystatus if $clone_status;
exit 0;


__END__

=pod

=head1 NAME

reportcmdstatus - Textually show how the given command finished (exit status/signal)

=head1 SYNOPSIS

reportcmdstatus [I<OPTIONS>] [--] I<COMMAND> [I<ARGS>]

=head1 OPTIONS

=over 4

=item -c, --clone

Take I<COMMAND>'s status and itself exits with it.
Default is to exit 0.

If I<COMMAND> did not exit normally, but it is terminated by a signal,
exit 128 + I<SIGNAL>, like most shells do.

=item -s, --report-start

Report what is being started, ie. I<COMMAND> I<ARGS>, to the STDERR.

=back

=cut

