#!/usr/bin/env perl

use POSIX;
use Getopt::Long qw/:config no_ignore_case bundling no_getopt_compat no_auto_abbrev/;
use Pod::Usage;
use IPC::Run qw/start finish/;
use Data::Dumper;

$0 = "reportcmdstatus";

$opt_report_start = 0;
$opt_clone_status = 0;
$opt_wait_end = 0;

GetOptions(
	's|report-start!' => \$opt_report_start,
	'c|clone|clone-status!' => \$opt_clone_status,
	'w|wait-end!' => \$opt_wait_end,
	'help|?' => sub{ pod2usage(-exitval=>0, -verbose=>99); },
	'<>' => sub{ unshift @ARGV, @_; die '!FINISH'; },
) or pod2usage(-exitval=>2, -verbose=>99);

if($opt_wait_end)
{
	eval q{ use Term::ReadKey; 1; } or die $@;
}

if($opt_report_start)
{
	eval q{ use String::ShellQuote; 1; } or die $@;
	$COMMAND_STRING_QUOTED = join(' ', map {String::ShellQuote::shell_quote($_)} @ARGV);
}

sub child_process_forked
{
	if($opt_report_start)
	{
		printf STDERR "starting process %d: %s\n", $$, $COMMAND_STRING_QUOTED;
	}
}

$ipc = start [@ARGV], init=>\&child_process_forked;
$COMMAND_PID = $ipc->{KIDS}->[0]->{PID};
finish $ipc;
$status = $?;

if(WIFSIGNALED($status))
{
	$end_mode = "terminated by signal";
	$end_code = WTERMSIG($status);
	$mystatus = 128 + WTERMSIG($status);
}
else
{
	$end_mode = "exited with status";
	$end_code = WEXITSTATUS($status);
	$mystatus = WEXITSTATUS($status);
}

printf STDERR "command (pid %d) %s: %d%s\n", $COMMAND_PID, $end_mode, $end_code, $opt_wait_end ? ", waiting for the user to press Enter." : "";

if($opt_wait_end)
{
	$got_sigint = 0;
	$SIG{'INT'} = sub { $got_sigint = 1; };
	ReadMode('cbreak');
	while(not $got_sigint)
	{
		my $buf;
		my $n = POSIX::read(fileno(STDIN), $buf, 1);
		last if $buf =~ /\n/;
	}
	ReadMode('restore');
}

exit $mystatus if $opt_clone_status;
exit 0;


__END__

=pod

=head1 NAME

reportcmdstatus - Textually show how the given command finished (exit status/signal)

=head1 SYNOPSIS

reportcmdstatus [I<OPTIONS>] [--] I<COMMAND> [I<ARGS>]

=head1 OPTIONS

=over 4

=item -c, --clone-status

Take I<COMMAND>'s status and itself exits with it.
Default is to exit 0.

If I<COMMAND> did not exit normally, but it is terminated by a signal,
exit 128 + I<SIGNAL>, like most shells do.

=item -s, --report-start

Report what is being started, ie. I<COMMAND> I<ARGS>, to the STDERR.

=item -w, --wait-end

Wait when I<COMMAND> ended for the user to press Enter before quit.

=back

=cut

