#!/bin/bash

set -e -o pipefail
set -u


true <<'EOF'

=pod

=head1 NAME

trackrun - Record when the given command was started and ended and expose to it in environment variables

=head1 SYNOPSIS

trackrun [I<OPTIONS>] [--] I<COMMAND> [I<ARGS>]

=head1 DESCRIPTION

It records when it starts COMMAND and when it ends, identifying COMMAND either by one of 4 options:

=over 4

=item Full command line including I<ARGS>.

=item Only the command name, I<COMMAND>.

=item By the name given by the user in I<NAME>.

=item By the environment variable value given by name I<ENV>.

=back

Set B<TRACKRUN_LAST_STARTED> and B<TRACKRUN_LAST_ENDED> environments for COMMAND to the ISO 8601 representation
of the date and time when COMMAND was last started and ended respectively.
Set B<TRACKRUN_LAST_STATUS> to the status COMMAND last exited with.
Those are left empty if no data yet.

On every run, a UUID is generated, so you can connect events of concurrent runs in the track report.
It is exposed in B<TRACKRUN_UUID> env.

=head1 OPTIONS

=over 4

=item -f, --full-command

=item -b, --command-basename (default)

=item -n, --name I<NAME>

=item -e, --env-var I<ENV>

=item -h, --show-hash

Show the hash generated from either of those options above before run the I<COMMAND>.
This hash is used for the filename in which command-related events are stored.

=item -u, --show-uuid

Show the current run's UUID before actually start the command.

=item -U, --write-uuid I<FILE>

Write current run's UUID in the given file before start the command.

=item -R, --report

Do not run I<COMMAND>, instead display its tracked history.

=back

=head1 FILES

Store tracking data in F<~/.trackrun> directory.

=head1 ENVIRONMENT

=over 4

=item TRACKRUN_LAST_STARTED

=item TRACKRUN_LAST_ENDED

=item TRACKRUN_LAST_STATUS

=item TRACKRUN_LAST_UUID

=item TRACKRUN_LAST_SUCCESSFUL_STARTED

=item TRACKRUN_LAST_SUCCESSFUL_ENDED

=item TRACKRUN_LAST_SUCCESSFUL_UUID

The last successful run's UUID, date-time when started and ended.

=item TRACKRUN_UUID

The current run's UUID

=back

=head1 LIMITATIONS

Trackrun does not do locking. You may take care of it if you need using flock(1), cronrun(1), or similar.

=cut

EOF


cmd_id=''
cmd_id_by=basename
do_report=''
uuid_outfile=''
do_show_hash=''
do_show_uuid=''


while [ $# -gt 0 ]
do
	case "$1" in
	(--help)
		pod2text "$0"
		exit 0;;
	(-f|--full-command)
		cmd_id_by=full
		;;
	(-b|--command-basename)
		cmd_id_by=basename
		;;
	(-n|--name)
		cmd_id_by=name
		shift
		cmd_id=$1
		;;
	(-e|--env-var)
		cmd_id_by=env
		shift
		cmd_id=${!1}
		;;
	(-R|--report)
		do_report=1
		;;
	(-h|--show-hash)
		do_show_hash=1
		;;
	(-u|--show-uuid)
		do_show_uuid=1
		;;
	(-U|--write-uuid)
		shift
		uuid_outfile=$1
		;;
	(--)
		shift
		break;;
	(-*)
		echo "$0: unknown option: $1" >&1
		exit -1;;
	(*)
		break;;
	esac
	shift
done


declare -a cmd_args=()

if [ -z "$cmd_id" ]
then
	case "$cmd_id_by" in
	(full|basename)
		if [ $# = 0 ]
		then
			pod2text "$0" >&2
			exit -1
		fi
		cmd_args=("$@")
		;;
	esac
	case "$cmd_id_by" in
	(full)
		cmd_id=${cmd_args[*]}
		;;
	(basename)
		cmd_id=`basename "${cmd_args[0]}"`
		;;
	(name)
		echo "$0: empty --name" >&2
		exit 1
		;;
	(env)
		echo "$0: value empty in --env-var" >&2
		exit 1
		;;
	esac
fi


track_dir=~/.trackrun
cmd_id_hash=`printf %s "$cmd_id" | md5sum | cut -c 1-32`
track_file=$track_dir/$cmd_id_hash


if [ $do_show_hash ]
then
	echo $cmd_id_hash
	exit
fi
if [ $do_report ]
then
	cat "$track_file" | tac | td-add-headers UUID EVENT DATETIME STATUS COMMAND
	exit
fi


lookup()
{
	# lookup A B [A B [A B]]
	# search a line in STDIN of which field A's value is B for all pair of A and B,
	# if A is not a number but "return", then return the B field's value.
	# Fields are counted form zero.
	perl -e 'while(<STDIN>) {
		chomp;
		@field = split /\t/;
		@Filters = @ARGV;
		while(@Filters)
		{
			$filter_field = shift @Filters;
			$filter_value = shift @Filters;
			if($filter_field eq "return") { print $filter_value eq "record" ? $_ : $field[$filter_value]; exit; }
			elsif($field[$filter_field] ne $filter_value) { last; }
		}
	}' -- "$@"
}

mkdir -p "$track_dir"
set +e +o pipefail
last_record_end=`tac "$track_file" 2>/dev/null | lookup 1 end return record`
export TRACKRUN_LAST_UUID=`echo "$last_record_end" | lookup return 0`
export TRACKRUN_LAST_STARTED=`tac "$track_file" 2>/dev/null | lookup 0 "$TRACKRUN_LAST_UUID" 1 start return 2`
export TRACKRUN_LAST_ENDED=`echo "$last_record_end" | lookup return 2`
export TRACKRUN_LAST_STATUS=`echo "$last_record_end" | lookup return 3`
last_successful_record_end=`tac "$track_file" 2>/dev/null | lookup 1 end 3 0 return record`
export TRACKRUN_LAST_SUCCESSFUL_UUID=`echo "$last_successful_record_end" | lookup return 0`
export TRACKRUN_LAST_SUCCESSFUL_STARTED=`tac "$track_file" 2>/dev/null | lookup 0 "$TRACKRUN_LAST_SUCCESSFUL_UUID" 1 start return 2`
export TRACKRUN_LAST_SUCCESSFUL_ENDED=`echo "$last_successful_record_end" | lookup return 2`
set -e -o pipefail

if [ -z "${cmd_args[0]}" ]
then
	echo "$0: no command given" >&2
	exit 1
fi

type uuidgen >/dev/null
export TRACKRUN_UUID=`uuidgen`

if [ $do_show_uuid ]
then
	echo "${0##*/}: command run uuid: $TRACKRUN_UUID" >&2
fi
if [ -n "$uuid_outfile" ]
then
	echo "$TRACKRUN_UUID" > "$uuid_outfile"
fi

record()
{
	printf "%s\t%s\t%(%FT%T%z)T\t%s\t%s\n" "$TRACKRUN_UUID" "$1" -1 "${2:-}" "${cmd_args[*]}" >> "$track_file"
}

record start

{
	exec -- setsid ${cmd_args[@]}
	exit 127
} &

child_pid=$!
signal_handler() { interrupted=yes; }
trap signal_handler INT
while true
do
	interrupted=''
	set +e
	wait $child_pid
	exit_code=$?
	set -e
	if [ $interrupted ]
	then
		exit_code=''
		kill -s INT $child_pid || true
	else
		break
	fi
done

record end $exit_code

exit $exit_code
