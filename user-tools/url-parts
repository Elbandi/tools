#!/usr/bin/env python

"""
=pod

=head1 NAME

url-parts - Extract specified parts from URLs given in input stream

=head1 SYNOPSIS

echo <URL> | url-parts <PART> [<PART> [<PART> [...]]]

=head1 DESCRIPTION

Supported parts:
fragment, hostname, netloc, password, path, port, query, scheme, username,
and query.I<NAME> for the query parameter I<NAME>,
and query.I<NAME>.I<N> for I<N>th element of the array parameter I<NAME>.

Run C<url-parts --help> for the definitive list of URL part names
supported by the python urlparse module installed on your system.

=cut

"""

from __future__ import print_function
import sys
import re
import urlparse

delimiter = '\t'

if '--help' in sys.argv:
	sample = urlparse.urlsplit('')
	print("Usage: echo URL | url-parts [PART-1 [PART-2 [...]]]")
	print("PART-N is one of:", ' '.join([attr for attr in dir(sample) 
		if not attr.startswith('_') and not hasattr(getattr(sample, attr), '__call__')]))
	print("or 'query.PARAM' to access individual query string parameters,")
	print("or 'query.PARAM.N' where N is an integer to access array-like parameters.")
	sys.exit(0)

while True:
	line = sys.stdin.readline()
	if line == '':
		break
	line = line.strip()
	url = urlparse.urlsplit(line)
	was_output = False
	for param_name, param_values in urlparse.parse_qs(url.query).iteritems():
		field_name = 'query.%s' % param_name
		if len(param_values) == 1:
			setattr(url, field_name, param_values[0])
		for index, param_value in enumerate(param_values):
			setattr(url, '%s.%d' % (field_name, index), param_value)
	for arg in sys.argv[1:]:
		if hasattr(url, arg):
			value = getattr(url, arg)
		else:
			value = ''
		if was_output:
			print(delimiter, end='')
		print(value, end='')
		was_output = True
	print('')
