#!/bin/bash

true <<'EOF'
=pod

=head1 NAME

foreach - Run an OS or shell command on each input line, similar to xargs(1)

=head1 SYNOPSIS

 foreach [I<OPTIONS>] I<COMMAND> [I<ARGS> ...]

=head1 OPTIONS

=over 4

=item -e, --sh

=item -l, --data

=item -f, --fields

=item -d, --delimiter DELIM

=item -t, --tab

=item -P, --no-placeholder

=item -v, --verbose

=item -n, --dry-run

=item -E, --errexit

=back

=head1 DESCRIPTION

Take each input line from stdin as B<DATA>, and run I<COMMAND> with B<DATA> appended to the end of I<ARGS> as a single argument.
If C<{}> is there in I<ARGS> then it's substituted with B<DATA> rather than append to the end,
unless I<--no-placeholder> is given, because then C<{}> is read literally.
Additionally parse B<DATA> into fields and add each of them to the end of I<ARGS> if I<--fields> is given.

So if you have not specified any I<ARGS> in the command line and type both I<--data> and I<--fields>,
then B<DATA> goes into argv[1], and the first field goes into argv[2], second to argv[3] and so on.
If have not given I<--data> nor I<--fields>, then I<--data> is implied.

If called with I<--sh> option, I<COMMAND> is run within a shell context;
input line goes to C<$DATA>, individual fields go to C<${FIELD[@]}>.

Set I<-d> B<DELIM> if you want to split B<DATA> not by C<$IFS> but by other delimiter,
eg. C<$'\t'> (tab).

=head1 EXAMPLES

 ls -l --time-style +%FT%T%z | foreach --data --fields sh -c 'echo size: $5, file: $7'"
 ls -l --time-style +%FT%T%z | foreach --sh 'echo size: ${FIELD[4]}, file: ${FIELD[6]}'"

=head1 SEE ALSO

xargs(1)

=cut

EOF


# syntax highlighter correction: '



FOREACH_MODE=command
FOREACH_VERBOSE=no
unset FOREACH_DELIM
FOREACH_PASS_DATA=maybe
FOREACH_PASS_FIELDS=no
FOREACH_REPLACE_PLACEHOLDER=yes
FOREACH_DRYRUN=no
FOREACH_ERREXIT=no


while [ $# != 0 ]
do
	case "$1" in
	--help)
		pod2text "$0"
		exit
		;;
	-e|--sh)
		FOREACH_MODE=sh
		;;
	-l|--data)
		FOREACH_PASS_DATA=yes
		;;
	-f|--fields)
		FOREACH_PASS_FIELDS=yes
		;;
	-d|--delimiter)
		shift
		FOREACH_DELIM=$1
		;;
	-t|--tab)
		FOREACH_DELIM=$'\t'
		;;
	-P|--no-placeholder)
		FOREACH_REPLACE_PLACEHOLDER=no
		;;
	-v|--verbose)
		FOREACH_VERBOSE=yes
		;;
	-n|--dry-run)
		FOREACH_DRYRUN=yes
		;;
	-E|--errexit)
		FOREACH_ERREXIT=yes
		;;
	--)
		shift
		break;;
	-*)
		echo "foreach: unknown option: $1" >&2
		exit -1
		;;
	*)	break;;
	esac
	shift
done

if [ $# = 0 ]
then
	pod2text "$0" >&2
	exit -1
fi

if [ $FOREACH_PASS_FIELDS = yes -a $FOREACH_PASS_DATA != yes ]
then
	FOREACH_PASS_DATA=no
fi
if [ $FOREACH_PASS_FIELDS != yes ]
then
	FOREACH_PASS_DATA=yes
fi

declare -a FOREACH_COMMAND=("$@")

while read -r DATA
do
	declare -a FIELD=()
	IFS=${FOREACH_DELIM+$FOREACH_DELIM}${FOREACH_DELIM-$IFS} read -r -a FIELD <<< "$DATA"
	
	FOREACH_COMMAND_STATUS=0
	
	if [ "$FOREACH_MODE" = command ]
	then
		declare -a cmd_and_args=()
		placeholder_found=no
		if [ "$FOREACH_REPLACE_PLACEHOLDER" = yes ]
		then
			for arg in "${FOREACH_COMMAND[@]}"
			do
				if [[ $arg =~ \{\} ]]
				then
					placeholder='{}'
					arg=${arg//$placeholder/$DATA}
					placeholder_found=yes
				fi
				cmd_and_args+=("$arg")
			done
		fi
		if [ "$FOREACH_REPLACE_PLACEHOLDER" != yes -o $placeholder_found = no ]
		then
			if [ "$FOREACH_PASS_DATA" = yes ]; then cmd_and_args+=("$DATA"); fi
			if [ "$FOREACH_PASS_FIELDS" = yes ]; then cmd_and_args+=("${FIELD[@]}"); fi
		fi
		
		if [ "$FOREACH_VERBOSE" = yes ]
		then
			echo "foreach: ${cmd_and_args[*]}" >&2
		fi
		
		if [ "$FOREACH_DRYRUN" = no ]
		then
			command "${cmd_and_args[@]}"
			FOREACH_COMMAND_STATUS=$?
		fi
	else
		if [ "$FOREACH_VERBOSE" = yes ]
		then
			echo "foreach: ${FOREACH_COMMAND[*]}" >&2
		fi
		
		if [ "$FOREACH_DRYRUN" = no ]
		then
			eval "${FOREACH_COMMAND[@]}"
			FOREACH_COMMAND_STATUS=$?
		fi
	fi
	
	if [ $FOREACH_ERREXIT = yes -a $FOREACH_COMMAND_STATUS != 0 ]
	then
		exit $status
	fi
done
