#!/bin/bash

true <<EOF
=pod

=head1 NAME

ssh-agent-finder - Find a working ssh agent on the system so you get the same in each of your logon sessions

=head1 USAGE EXAMPLE

. ssh-agent-finder -Iva

=cut

EOF


interactive=1
must_have_keys=1
list_all_sockets=''
verbose=''
sourced=''

. /usr/lib/tool/bash-utils

parse_opts()
{
	local OPTIND=1
	Usage="Usage: $0 [-IkKav]
 -I   No interactive, use first socket
 -k   Use socket having keys (default)
 -K   Use socket not necessary having keys
 -a   List all sockets
 -v   Verbose"
 	if [ ."$1" = .--help ]
 	then
 		echo "$Usage" >&2
 		return 1
 	fi
	while getopts hIkKav opt "$@"
	do
		case "$opt" in
		h)		echo "$Usage" >&2
				return 1;;
		I)		interactive='';;
		k)		must_have_keys=1;;
		K)		must_have_keys='';;
		a)		list_all_sockets=1;;
		v)		verbose=1;;
		'?')	return 1;;
		esac
	done
	return 0
}

if [ $must_have_keys ]
then
	might_have_keys_or_not=''
else
	might_have_keys_or_not=1
fi		



if [ "$0" != "$BASH_SOURCE" ]
then
	sourced=1
fi


parse_opts "$@"
code=$?
if [ $code != 0 ]
then
	if [ $sourced ]
	then
		return $code
	else
		exit $code
	fi
fi


for file in /tmp/ssh-*/agent.* $HOME/.gnupg/S.gpg-agent.ssh $HOME/.cache/keyring-*/ssh
do
	if [ -S "$file" ]
	then
		SSH_AUTH_SOCK=$file capture2 ssh-add -l
		code=$?
		if [ $code = 0 ]
		then
			live_socket=1
			has_keys=1
			use=1
		elif [ $code = 1 ]
		then
			live_socket=1
			has_keys=''
			if [ $must_have_keys ]
			then
				use=''
			else
				use=1
			fi
		else
			# code == 2: non-functioning socket
			live_socket=0
			has_keys=''
			use=''
		fi
		
		if [[ ( ( $might_have_keys_or_not || $has_keys ) && ( $interactive || $verbose ) ) || $list_all_sockets ]]
		then
			echo =============
			if [ "$SSH_AUTH_SOCK" = "$file" ]
			then
				echo -n "(current) *** "
			fi
			echo "SSH_AUTH_SOCK $file"
			[ -n "$capture2_stdout" ] && echo "$capture2_stdout"
			[ -n "$capture2_stderr" ] && echo "$capture2_stderr" >&2
		fi
		
		if [[ $live_socket && ( ( $might_have_keys_or_not || $has_keys ) || $list_all_sockets ) ]]
		then
			if [ $interactive ]
			then
				use=''
				[[ $might_have_keys_or_not || $has_keys ]] && default=Y || default=N
				read -e -p "Use this socket? [$default] "
				[ -n "$REPLY" ] || REPLY=$default
				REPLY=${REPLY^^}
				REPLY=${REPLY:0:1}
				[ "$REPLY" = Y ] && use=1
			fi
			if [ $use ]
			then
				if [ $sourced ]
				then
					export SSH_AUTH_SOCK=$file
					return 0
				else
					echo "export SSH_AUTH_SOCK='${file//\'/\'\\\'\'}'"
					exit 0
				fi
				break
			fi
		fi
	fi
done

false
