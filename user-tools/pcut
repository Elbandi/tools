#!/usr/bin/env perl

=pod

=head1 NAME

pcut - Cut given fields of text input separated by the given Perl regex

=head1 SYNOPSIS

pcut [I<OPTIONS>] [I<FILE> [I<FILE> [...]]]

=head1 DESCRIPTION

Standard cut(1) breaks up input lines by a given single char.
pcut(1) does this by the given perl(1)-compatible regular expression.
cut(1) outputs fields always in ascending order, without duplication.
pcut(1) outputs fields in the requested order, even multiple times if asked so by the B<-f> option.

=head1 OPTIONS

=over 4

=item -f, --fields I<NUMBERS>

Counted from 1.
See cut(1) for syntax.

=item -d, --delimiter I<REGEX>

Default is whitespace (C<\s+>).

=item --complement

TODO

=item -s, --only-delimited

TODO

=item -D, --output-delimiter I<STRING>

Define the output field delimiter.
Default is not to use a constant output delimiter,
but to preserve the separator substrings as they matched to the pattern of B<-d> option
(see B<--prefer-preceding-delimiter> and B<--prefer-succeeding-delimiter> options).

=item -P, --prefer-preceding-delimiter

=item --prefer-succeeding-delimiter (default)

Contrary to cut(1), pcut(1) does not always use a constant delimiter char,
but a regexp pattern which may match to different substrings between fields in the input lines.

Each output field (except the last one) is followed by that substring
which was matched to the delimiter pattern just right after that field in the input.

With B<--prefer-preceding-delimiter>, each output field (except the first one) is similarly preceded by that substring
which was matched to the delimiter pattern just before that field in the input.

=item --delimiter-before-first I<STRING>

Write I<STRING> before field 1 if it is not the first field on the output (in B<--prefer-preceding-delimiter> mode).

=item --delimiter-after-last I<STRING>

Write I<STRING> after the last field if it is written not as the last field on the output.

=item -z, --zero-terminated

Terminate output records (lines) by NUL char instead of LineFeed.

=back

=head1 LIMITATIONS

=head1 SEE ALSO

cut(1)

=cut


use Data::Dumper;
use Errno qw/:POSIX/;
use Getopt::Long qw/:config no_ignore_case no_bundling no_getopt_compat no_auto_abbrev require_order/;
use List::MoreUtils qw/all any none/;
use Pod::Usage;
no if ($] >= 5.018), 'warnings' => 'experimental::smartmatch';

@OptFields = ();
$OptDelimiter = '\s+';
$OptOutputDelimiter = undef;
$OptPreferPreceding = 0;
$OptDelimBeforeFirst = undef;
$OptDelimAfterLast = undef;

GetOptions(
	'f|fields=s@' => \@OptFields,
	'd|delimiter=s' => \$OptDelimiter,
	'z|zero-terminated' => \$OptZeroTerminated,
	'D|output-delimiter=s' => \$OptOutputDelimiter,
	'P|prefer-preceding-delimiter' => \$OptPreferPreceding,
	'prefer-succeeding-delimiter' => sub { $OptPreferPreceding = 0; },
	'delimiter-before-first=s' => \$OptDelimBeforeFirst,
	'delimiter-after-last=s' => \$OptDelimAfterLast,
	'help' => sub { pod2usage(-exitval=>0, -verbose=>99); },
	'<>' => sub { unshift @ARGV, @_[0]; die '!FINISH'; },
) or pod2usage(-exitval=>2, -verbose=>99);

if(defined $OptOutputDelimiter)
{
	if($OptPreferPreceding)
	{
		die "$0: Options -D and -P are mutually exclusive.\n";
	}
	if(defined $OptDelimBeforeFirst or defined $OptDelimAfterLast)
	{
		die "$0: Options -D and --delimiter-before-first/--delimiter-after-last are mutually exclusive.\n";
	}
}

if(not @OptFields)
{
	push @OptFields, '1-';
}

@OptFields = map {split /,/} @OptFields;

for my $fields (@OptFields)
{
	die "$0: invalid fields: $fields\n" if
		$fields !~ /^(\d+(-(\d+)?)?|-\d+)$/
		or ($fields =~ /^(\d+)-(\d+)$/ and $2 < $1)
		or ($fields =~ /\b0\b/);
}

sub unzip
{
	[map { $_[$_*2]   } (0 .. $#_ / 2)],
	[map { $_[$_*2+1] } (0 .. $#_ / 2)];
}

sub zip_evenlist
{
	map { $_[$_], $_[$_ + ($#_+1)/2] } (0 .. $#_/2);
}

sub precedingDelimiter
{
	my %p = @_;
	if($p{fieldIndex} == 0)
	{
		if(defined $OptDelimBeforeFirst) { return $OptDelimBeforeFirst; }
		else { return $p{succeedingDelimiters}->[0]; }
	}
	return $p{succeedingDelimiters}->[$p{fieldIndex} - 1];
}

$\ = "";

eval 'use ARGV::readonly; 1' or die;

while(<>)
{
	chomp;
	my ($Field, $Delimiter) = unzip split /($OptDelimiter)/;
	
	for my $requested_fieldnumbers_idx (0 .. $#OptFields)
	{
		my $requested_fieldnumbers = $OptFields[$requested_fieldnumbers_idx];
		my @fields = do {
			if($requested_fieldnumbers =~ /^(\d+)$/) { ($1-1); }
			elsif($requested_fieldnumbers =~ /^(\d+)-(\d+)$/) { ($1-1 .. $2-1); }
			elsif($requested_fieldnumbers =~ /^(\d+)-$/) { ($1-1 .. $#$Field); }
			elsif($requested_fieldnumbers =~ /^-(\d+)$/) { (0 .. $1-1); }
			else { die 'SHOULD-NOT-REACHED'; }
		};
		for my $field_idx_idx (0 .. $#fields)
		{
			my $field_idx = $fields[$field_idx_idx];
			if($OptPreferPreceding and $requested_fieldnumbers_idx+$field_idx_idx > 0)
			{
				print precedingDelimiter(fieldIndex=>$field_idx, succeedingDelimiters=>$Delimiter);
			}
			print $Field->[$field_idx];
			if(not $OptPreferPreceding and ($requested_fieldnumbers_idx < $#OptFields or $field_idx_idx < $#fields))
			{
				print $OptOutputDelimiter // $Delimiter->[$field_idx] // $OptDelimAfterLast;
			}
		}
	}
	
	if($OptZeroTerminated)
	{
		print chr(0);
	}
	else
	{
		print "\n";
	}
}
