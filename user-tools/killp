#!/bin/bash

true <<'EOF'

=pod

=head1 NAME

killp - Send signal to processes (kill, terminate, ...) by PID until they end

killpgrp - Send signal to processes (kill, terminate, ...) by PGID until they end

killcmd - Send signal to processes (kill, terminate, ...) by command line until they end

killexe - Send signal to processes (kill, terminate, ...) by executable path until they end

=head1 SYNOPSIS

killp [OPTIONS] <PID> [<PID> [...]]

=head1 DESCRIPTION

Send signal to process(es) by PID, PGID (process group ID), command name, or by executable path
until the selected process(es) exists.
Ie. in usuall invocation, eg. C<killcmd java> tries to SIGTERM all java processes until at
least 1 exists, and returns only afterwards.

=head1 OPTIONS

The following options control how B<killcmd> and B<killexe> finds processes.
Semantics are the same as in grep(1):

  -E --extended-regexp
  -F --fixed-strings
  -G --basic-regexp
  -P --perl-regexp
  -i --ignore-case
  -w --word-regexp
  -x --line-regexp

Other options:

=over 4

=item -a

B<killcmd> looks for matching substring in the command's arguments too.
By default, only the command name is considered (first word in the command line).

=item -f

B<killcmd> and B<killexe> look for matching substring in the command's full path too.
By default, only the basename is considered.

=item [--]signal=I<SIG>, [-]s=I<SIG>

Which signal to send.
See kill(1) and signal(7) for valid I<SIG> signal names and numbers.

=item [--]interval=I<IVAL>

How much to wait between attempts.
See sleep(1) for valid I<IVAL> intervals.

=item -q, --quiet

=item -v, --verbose

By default, prints what is being killed on the second attempt onward.
With --verbose, prints the first attempt too.
With --quiet, does not print what is being killed.

=item -n, --dryrun

=back

=head1 SEE ALSO

kill(1), pkill(1), pgrep(1), killall(1), signal(7)

=cut

EOF



set -e
set -o pipefail

. /usr/lib/tool/bash-utils



case "${0##*/}" in
killp)
	mode=pid
	;;
killpgrp)
	mode=pgid
	;;
killcmd)
	mode=cmd
	;;
killexe)
	mode=exe
	;;
*)
	errx -2 "Call by either of these names: killp, killpgrp, killcmd, killexe"
	;;
esac


opt_verbose=''
opt_quiet=''
opt_dryrun=''
opt_match_command_args=''
opt_match_full_path=''
Signal=TERM
Interval=0.2
declare -A processes_left
declare -a grep_opts=()
declare -a args=()

# explode "-abc" arguments into separate "-a -b -c" pieces.
for arg in "$@"
do
	case "$arg" in
	-[!-]*)
		pos=1
		while [ -n "${arg:$pos:1}" ]
		do
			args+=("-${arg:$pos:1}")
			let pos++
		done
		;;
	*)
		args+=("$arg")
		;;
	esac
done

for arg in "${args[@]}"
do
	case "$arg" in
	signal=*|sig=*|s=*|--signal=*|--sig=*|-s=*)
		Signal=${arg#*=}
		;;
	interval=*|--interval=*)
		Interval=${arg#*=}
		;;
	--help)
		pod2text "$0"
		exit 0
		;;
	-E|--extended-regexp|-F|--fixed-strings|-G|--basic-regexp|-P|--perl-regexp|-i|--ignore-case|-w|--word-regexp|-x|--line-regexp)
		grep_opts+=("$arg")
		;;
	-a)
		if [ "$mode" != cmd ]
		then
			pod2text "$0" >&2
			exit 2
		fi
		opt_match_command_args=1
		;;
	-f)
		if [ "$mode" != cmd -a "$mode" != exe ]
		then
			pod2text "$0" >&2
			exit 2
		fi
		opt_match_full_path=1
		;;
	-q|--quiet)
		opt_quiet=1
		;;
	-v|--verbose)
		opt_verbose=1
		;;
	-n|--dryrun|--dry-run)
		opt_dryrun=1
		;;
	-*|*=*)
		pod2text "$0" >&2
		exit 2
		;;
	*)
		processes_left[$arg]=''
		;;
	esac
done


find_processes()
{
	# fill global $processes and $ps_title arrays
	
	declare -g -a processes
	
	case "$mode" in
	cmd)
		proclist=`ps -e o pid:1=,cmd= ww`
		;;
	exe)
		proclist=`rcmod any=0 find /proc -mindepth 2 -maxdepth 2 -name exe -printf '%h %l\n' 2>/dev/null | cut -b7-`
		;;
	esac
	
	proclist_to_search=$proclist
	
	if [ "$mode" = cmd -a ! "$opt_match_command_args" ]
	then
		# discard the command arguments (keep the pid and the first word)
		proclist_to_search=`cut -f 1,2 -d ' ' <<< "$proclist_to_search"`
	fi
	if [ \( "$mode" = cmd -o "$mode" = exe \) -a ! "$opt_match_full_path" ]
	then
		# discard everything except pid (everything before space) and the basename (everything after the last slash)
		proclist_to_search=`sed -e 's, .*/\([^/]\+\)$, \1,' <<< "$proclist_to_search"`
	fi
	
	
	case "$mode" in
	pid|pgid)
		processes=("${!processes_left[@]}")
		;;
	cmd|exe)
		grep_params=()
		for cmd in "${!processes_left[@]}"
		do
			grep_params+=(-e "$cmd")
		done
		lines=`echo "$proclist_to_search" | cut -d' ' -f2- | rcmod 1=0 grep --line-number "${grep_opts[@]}" "${grep_params[@]}" | cut -d: -f1`
		
		declare -g -A ps_title=()
		while read -r pid title
		do
			if [ $pid = $$ -o $pid = "$PPID" ]; then continue; fi  # except ourself and parent
			ps_title[$pid]=$title
		done < <(echo "$proclist" | lines $lines)
		
		processes=("${!ps_title[@]}")
		;;
	esac
}



# don't use bash built-in kill command
enable -n kill


attempt=0

while [ ${#processes_left[@]} -gt 0 ]
do
	if [ $attempt -gt 0 -a \( $mode = cmd -o $mode = exe \) ]
	then
		# leave some time for the processes to exit.
		# it's usually faster to wait here a bit,
		# than rush to find processes, then wait a longer time if the processes 
		# were still there which we killed.
		sleep 0.1
	fi
	
	find_processes
	
	if [ ${#processes[@]} = 0 ]
	then
		# did not find any more of the named commands
		if [ $attempt = 0 ]
		then
			warnx "no such process found"
		fi
		break
	fi
	
	
	if [ $attempt -gt 0 ]
	then
		sleep $Interval
		
		find_processes
		
		if [ ${#processes[@]} = 0 ]
		then
			# did not find more of the named commands
			break
		fi
	fi
	
	
	for proc in "${processes[@]}"
	do
		case "$mode" in
		pid|cmd|exe)
			id=$proc
			what="process"
			;;
		pgid)
			id=-$proc
			what="process group"
			;;
		esac
		
		if kill -- -0 "$id"
		then
			if [ ! $opt_quiet ]
			then
				if [ "$opt_verbose" -o $attempt -gt 0 ]
				then
					msg_end=''
					case "$mode" in
					cmd|exe)
						msg_end=": ${ps_title[$proc]}"
						;;
					esac
					warnx "attempt $attempt: $id$msg_end"
				fi
			fi
			
			if [ ! $opt_dryrun ]
			then
				kill -- -$Signal "$id" || true
			fi
		else
			case "$mode" in
			pid|pgid)
				warnx "$what $proc terminated"
				unset processes_left[$proc]
				;;
			cmd|exe)
				warnx "$what $proc terminated: ${ps_title[$proc]}"
				;;
			esac
		fi
	done
	
	
	attempt=$[attempt + 1]
done
