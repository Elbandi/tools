#!/usr/bin/env perl

use Getopt::Long;
use Pod::Usage;
use Data::Dumper;

my $do_sort = 0;
my $stop_pattern = undef;
my $DIRSEP = '/';

GetOptions(
	's|sort!' => \$do_sort,
	'd|separator|dir-separator=s' => \$DIRSEP,
	't|stop=s' => \$stop_pattern,
) or pod2usage(-exitval=>2, -verbose=>99);

my %parsed;

while(my $line = <STDIN>)
{
	chomp $line;
	my $ref = \%parsed;
	my ($path, $stopsep, $suffix);
	
	if(defined $stop_pattern)
	{
		($path, $stopsep, $suffix) = split /($stop_pattern)/, $line, 2;
	}
	else
	{
		$path = $line;
	}
	
	my @elements = split /\Q$DIRSEP\E/, $path;
	
	for my $element (@elements)
	{
		next if $element eq '';
		$ref->{'children'}->{$element} = {
			'index' => (scalar keys %{$ref->{'children'}}),
			'name' => $element,
			'children' => {},
			'suffixes' => [],
		} if not exists $ref->{'children'}->{$element};
		$ref = $ref->{'children'}->{$element};
	}
	
	if(defined $stop_pattern and @elements)
	{
		push @{$ref->{'suffixes'}}, {
			'sep' => $stopsep,
			'suffix' => $suffix,
		};
	}
}

sub output
{
	my $indent = shift;
	my $ref = shift;
	for my $child (sort {$do_sort ? ($a->{'name'} cmp $b->{'name'}) : ($a->{'index'} <=> $b->{'index'})} values %{$ref->{'children'}})
	{
		printf "%s%s%s\n", "\t"x$indent, $child->{'name'}, join('', map {$_->{'sep'}.$_->{'suffix'}} @{$child->{'suffixes'}});
		output($indent+1, $child);
	}
}

output(0, \%parsed);


__END__

=pod

=head1 NAME

paths2indent - Transform list of filesystem paths to an indented list of the leaf elements

=head1 SYNOPSIS

paths2indent [I<OPTIONS>]

=head1 DESCRIPTION

Input: list of file paths line-by-line

Output: leaf file names indented by as many tabs as deep the file is on the tree

=head1 OPTIONS

=over 4

=item -d, --separator I<CHAR>

=item -t, --stop I<PATTERN>

=item -s, --sort

=back

=head1 LIMITATIONS

Can not have empty path elements (ie. consecutive slashes).

=head1 SEE ALSO

=over 4

=item https://github.com/jez/as-tree

=back

=cut
