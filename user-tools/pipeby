#!/bin/bash

true <<'EOF'
=pod

=head1 NAME

pipeby - Run a command and pipe its output to an other one

=head1 SYNOPSIS

pipeby I<CMD_1> [I<ARGS>] -- I<CMD_2> [I<ARGS>]

=head1 DESCRIPTION

Equivalent to this shell command:

 CMD_1 | CMD_2

The first command's (I<CMD_1>) arguments can not contain a double-dash (C<-->),
because it's the command separator for pipeby(1).
However, since only a total of 2 commands are supported,
arguments for I<CMD_2> may contain double-dash(es).

You can chain pipeby(1) commands together to get a pipeline equivalent to
C<CMD_1 | CMD_2 | CMD_3>, like:

 pipeby CMD_1 -- pipeby CMD_2 -- CMD_3

=head1 RATIONALE

It's sometimes more convenient to don't involve shell command-line parser.

=head1 SEE ALSO

pipexec(1)

=cut

EOF


set -e
set -o pipefail
set -u

if [ $# = 0 ]
then
	pod2text "$0" >&2
	exit 1
fi
if [ "$1" = --help ]
then
	pod2text "$0"
	exit 0
fi

cmd_n=1
declare -a cmd_1=()
declare -a cmd_2=()

while [ $# != 0 ]
do
	if [ ".$1" = '.--' -a $cmd_n == 1 ]
	then
		cmd_n=2
	else
		eval "cmd_${cmd_n}+=(\"\$1\")"
	fi
	shift
done

"${cmd_1[@]}" | "${cmd_2[@]}"
