#!/bin/bash

true <<EOF
=pod

=head1 NAME

vifiles - Edit multiple files as one

=head1 LIMITATIONS

If a LF char at the end of any files is missing, it'll be added after edit.

=cut

EOF



Recursive=no
Force=no
shopt -s nullglob

cleanup()
{
	rm "$tmpfile"
}

prepcat()
{
	dir_depth=$[dir_depth + 1]
	for file in "$@"
	do
		if [ -d "$file" ]
		then
			if [ $dir_depth -le 1 -o $Recursive = yes ]
			then
				prepcat "$file"/*
			fi
		else
			cat "$file" | filename=$file perl -pe 's/^/$ENV{filename}:/; s/\n?$/\n/'
			nfiles=$[nfiles + 1]
		fi
	done
}

tmpfile=`mktemp -t vifiles.tmp-XXXXXX`
trap cleanup EXIT
set -e

while [ $# -gt 0 ]
do
	case "$1" in
	-R|-r|--recursive)
		Recursive=yes;;
	-f|--force)
		Force=yes;;
	-h|--help)
		echo "vifiles - edit multiple files at once

Usage: vifiles [-R] [FILES]
Options:
 -R, -r, --recursive    open all files within the directories specified in parameters
 -f, --force            don't ask confirmation to save changes (provided that the editor exited without error code)

vifiles opens up your text editor (search list: \$EDITOR, \$VISUAL, vi) to edit a file with the content of all of the files specified in parameters, each line prefixed with the file name from which it's coming from. Save changes back to the original files."
		exit;;
	--)	shift
		break;;
	-*)	echo "Unknown option: $1" >&2
		false;;
	*)	break;;
	esac
	shift
done

nfiles=0
dir_depth=0
prepcat "$@" >"$tmpfile"

echo "Opening $nfiles files to edit ..." >&2

command ${EDITOR:-${VISUAL:-vi}} "$tmpfile"
# 'errexit' is set

read -e -p "Apply changes? [y/n] " -i n
if [ "${REPLY^^}" != Y ]
then
	exit
fi

# create directories if any new added in the file paths
cat "$tmpfile" | cut -s -f1 -d: | sed -e 's@\(.\+\)/[^/]\+@\1@' | sort -u | xargs --verbose -d "\n" mkdir -v -p

echo "Saving edited files ..." >&2

cat "$tmpfile" | perl -ne '
	if(($path, $line) = /([^:]+):(.*)/s)
	{
		if(not exists $fhs{$path})
		{
			if(not open $fhs{$path}, ">", $path)
			{
				warn "vifiles: $path: $!\n";
				$fhs{$path} = undef;
			}
		}
		if(defined $fhs{$path})
		{
			print {$fhs{$path}} $line or warn sprintf "vifiles: %s while writing %d bytes to %s\n", $!, length $line, $path;
		}
	}'
