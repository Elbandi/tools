#!/usr/bin/env perl

=pod

=head1 NAME

hlcal - Highlight BSD cal(1) output

hlncal - Highlight BSD ncal(1) output

=head1 SYNOPSIS

hlcal [OPTIONS] [CAL-OPTIONS]

hlncal [OPTIONS] [NCAL-OPTIONS]

=head1 DESCRIPTION

Wrap cal(1), ncal(1) around and highlight specific days.

=head1 OPTIONS

=over 4

=item I<DOW>=I<COLOR>

=item I<DATE>=I<COLOR>

=item I<START-DATE>...I<END-DATE>[,I<DOW>[,I<DOW>[,...]]]=I<COLOR>

=back

Where I<DOW> is a day-of-week name (3 letters),
I<COLOR> is a space- or hyphen-delimited list of ANSI color or other
formatting style name,
I<DATE> (and I<START-DATE>, I<END-DATE>) is in I<[[YYYY-]MM-]DD> format,
ie. year and month are optional,
and lack of them interpreted as "every year" and "every month"
respectively.

In single date definition, I<DATE>, may enter an asterisk C<*> as month
to select a given date in every month in the given year, or in every
year if you leave out the year as well.
Example: C<1917-*-15>

In the interval definition, may add several I<DOW> days which makes only
those days highlighted in the specified interval.
Examples:
C<04-01...06-30,WED> means every Wednesday in the second quarter.
C<1...7,FRI> means the first Friday in every month.

=head1 SUPPORTED ANSI COLORS AND STYLES

Colors: black, red, green, yellow, blue, magenta, cyan, white, default.

May be preceded by C<bright>, eg: C<bright red>.
May be followed by C<bg> to set the background color instead of the
foreground, eg: C<yellow-bg>.

Styles: bold, faint, italic, underline,
blink_slow, blink_rapid, inverse, conceal, crossed,

=cut


use Data::Dumper;
use Getopt::Long qw/:config no_ignore_case bundling no_getopt_compat pass_through/;
use feature qw/switch/;
no if ($] >= 5.018), 'warnings' => 'experimental::smartmatch';
use Pod::Usage;
use Carp qw/croak/;
use List::MoreUtils qw/all any none/;

use POSIX qw/strftime setlocale LC_TIME/;
use DateTime;
use DateTime::Duration;
use DateTime::Format::Strptime;
use DateTime::Locale;
use locale;


# take the basename of the command as procname.
$0 =~ s/.*\/([^\/]+)$/$1/;

use constant {
	VERTICAL => 'v',
	HORIZONTAL => 'h',
};

use constant {
	MON => 0,
	TUE => 1,
	WED => 2,
	THU => 3,
	FRI => 4,
	SAT => 5,
	SUN => 6,
};

my %Months = (
	jan=>1,
	feb=>2,
	mar=>3,
	apr=>4,
	may=>5,
	jun=>6,
	jul=>7,
	aug=>8,
	sep=>9,
	'oct'=>10,
	nov=>11,
	dec=>12,
);
my $re_months = join '|', keys %Months;
my $re_mon = qq/(0?[1-9]|1[012]|$re_months)/;
my $re_dom = q/(0[1-9]|[12]\d|3[01])/;
my $re_dow = 'MON|TUE|WED|THU|FRI|SAT|SUN';


my %ANSIcolor = (
	black=>30, red=>31, green=>32, yellow=>33, blue=>34, magenta=>35, cyan=>36, white=>37,
);
my %ANSIcode = (
	'reset'=>0, bold=>1, faint=>2, italic=>3, underline=>4,
	blink_slow=>5, blink_rapid=>6, inverse=>7, conceal=>8, crossed=>9,
	normal=>22,
	noitalic=>23, nounderline=>24, noblink=>25, noinverse=>27, noconceal=>28, nocrossed=>29,
	%ANSIcolor,
	default=>39,
);
sub get_ansi_codes
{
	my $str = shift;
	my @codes = ();
	$str =~ s/[- ]bg/_bg/g;
	$str =~ s/bright[- ]/bright_/g;
	for my $word (split /[\s-]+/, $str)
	{
		my $code = 0;
		if($word =~ /^(?'BRIGHT'bright_|)(?'COLOR'.+?)(?'BG'_bg|)$/ and any {$_ eq $+{'COLOR'}} (keys %ANSIcolor))
		{
			$code += 10 if $+{'BG'};
			$code += 60 if $+{'BRIGHT'};
			$word = $+{'COLOR'};
		}
		if(exists $ANSIcode{$word}) { $code += $ANSIcode{$word}; }
		else { $code = ''; }
		push @codes, $code;
	}
	return @codes;
}
sub ansicode
{
	my @codes = grep {length} get_ansi_codes join " ", @_;
	return '' if not @codes;
	return sprintf "\x1B[%sm", join(';', @codes);
	#return join '', map { sprintf "\x1B[%sm", $_ } @codes;
}

sub verify_color
{
	my $color = shift;
	warn "$0: no ANSI code: $color\n" unless all {length} get_ansi_codes $color;
}


$OptNoHighlightToday = 0;
# weeks starts on Sunday by default in cal
$week_start_on = SUN;
$week_start_day_explicite = 0;
$calcmd = 'cal';
$calcmd = 'ncal' if $0 =~ /ncal/;


while(@ARGV)
{
	my $arg = shift @ARGV;
	
	# TODO: get highlight parameters from config files
	# TODO: mix dow/date/interval definitions under @Highlight list
	
	$arg =~ s{(today|yesterday|tomorrow)(?=.*=)}{
		my $date = $1;
		$date = DateTime->now(time_zone=>'local')->strftime('%F') if $date eq 'today';
		$date = DateTime->now(time_zone=>'local')->subtract(days=>1)->strftime('%F') if $date eq 'yesterday';
		$date = DateTime->now(time_zone=>'local')->add(days=>1)->strftime('%F') if $date eq 'tomorrow';
		$date
	}ige;
	
	if(my ($day, $color) = $arg =~ /^($re_dow)=(.+)$/i)
	{
		$Highlight->{'days-of-week'}->{eval $day} = $color;
		verify_color $color;
	}
	elsif($arg =~ /^(((?'YEAR'\d\d\d\d)-|)(?'MON'$re_mon|\*)-|)(?'DOM'$re_dom)=(?'COLOR'.+)$/i)
	{
		my $year = $+{'YEAR'} || '*';
		my $mon = $+{'MON'} || '*';
		my $dom = $+{'DOM'};
		my $color = $+{'COLOR'};
		$mon =~ s/^0//;
		$dom =~ s/^0//;
		$mon = $Months{$mon} if exists $Months{$mon};
		$Highlight->{'date'}->{$year}->{$mon}->{$dom} = $color;
		verify_color $color;
	}
	elsif($arg =~ /^(((?'Y1'\d\d\d\d)-|)((?'M1'$re_mon)-)|)(?'D1'$re_dom)\.\.\.(?('M1')(?('Y1')((?'Y2'\d\d\d\d)-|))((?'M2'$re_mon)-|))(?'D2'$re_dom)(?'DOW'(,($re_dow))*)=(?'COLOR'.+)$/i)
	{
		push @{$Highlight->{'interval'}}, {
			'start' => {'y'=>$+{'Y1'}, 'm'=>$Months{lc$+{'M1'}}||$+{'M1'}, 'd'=>$+{'D1'}},
			'end'   => {'y'=>$+{'Y2'}, 'm'=>$Months{lc$+{'M2'}}||$+{'M2'}, 'd'=>$+{'D2'}},
			'dow'   => [map {eval} grep {$_} split /,/, $+{'DOW'}],
			'color' => $+{'COLOR'},
		};
		verify_color $+{'COLOR'};
	}
	elsif($arg =~ /=/)
	{
		pod2usage(-exitval=>2, -verbose=>99);
	}
	else
	{
		# unknown parameter.
		# give it back to cal/ncal.
		unshift @ARGV, $arg;
		last;
	}
}

#warn Dumper $Highlight;  # DEBUG


@cal_args = @ARGV;

GetOptions(
	'M' => sub { $week_start_on = MON; $week_start_day_explicite = 1; },
	'S' => sub { $week_start_on = SUN; $week_start_day_explicite = 1; },
	'C' => sub { $calcmd = 'cal'; },
	'N' => sub { $calcmd = 'ncal'; },
	'b' => sub { $layout = HORIZONTAL; },
	'h' => \$OptNoHighlightToday,  # TODO
	'help|?' => sub {
		pod2usage(-exitval=>'NOEXIT', -verbose=>99);
		system("sh", "-c", "cal --help 2>&1");
		exit 0;
	},
) or pod2usage(-exitval=>2, -verbose=>99);


if(not defined $layout)
{
	$layout = HORIZONTAL;
	$layout = VERTICAL if $calcmd eq 'ncal';
}

if(!$week_start_day_explicite and $calcmd eq 'ncal')
{
	# ncal takes locale settings for the week's first day
	($first_weekday) = `locale -k first_weekday` =~ /=(\d+)/;
	if(defined $first_weekday)
	{
		$week_start_on = ($first_weekday+5) % 7;
	}
}



my $month_parser = new DateTime::Format::Strptime(pattern=>'%Y %b', on_error=>'croak', locale=>setlocale(LC_TIME));



# if this bsdcal version supports -h flag,
if(system("$calcmd -h >/dev/null 2>&1") == 0)
{
	# prevent cal to highlight today. we will do it.
	unshift @cal_args, "-h";
}

open my $pipe, '-|:utf8', $calcmd, @cal_args or croak "$0: popen: $calcmd: $!";
binmode STDOUT, ':utf8';

$title_passed = 0;

while(<$pipe>)
{
	my $is_week_row = 0;
	
	if(/(\d\d\d\d)/)
	{
		$year = $1;
	}
	
	my @words = /([^\d\s]+)/g;
	if(scalar @words >= 1 and scalar @words <= 3 and (not /\d/ or /\d\d\d\d/))
	{
		# seems to be 1, 2, or 3 month names
		@month_column = ();
		for my $word (@words)
		{
			push @month_column, int $month_parser->parse_datetime("$year $word")->strftime('%m');
		}
	}
	
	my @years = /(\d\d\d\d)/g;
	if(@years)
	{
		@year_column = @years;
	}
	
	if(/([^\d\s]+\s+){7}/)
	{
		# at least 7 groups of letters (not space or digit),
		# it's probably day of week names;
		# assuming horizontal layout.
		
		# TODO: any locale setting in which month names have space?
		
		$layout = HORIZONTAL;
		$title_passed = 1;
		$week_of_month = 0;
		$is_week_row = 1;
		
		%dow_bgn = ();
		%dow_end = ();
		my $day_spacing = 1;
		for my $dow ($week_start_on, MON..SUN)
		{
			my $repeats = ($dow - $week_start_on) % 7 + 1;
			/^(\s*[^\d\s]+){$repeats}/;
			$dow_end{$dow} = length $&;
			$dow_bgn{$dow} = $dow eq $week_start_on ? 0 : $dow_end{($dow-1)%7} + $day_spacing;
		}
	}
	
	if(/^\s*$/)
	{
		$title_passed = 0;
	}
	
	if($layout eq HORIZONTAL)
	{
		if(/\d/ and $title_passed)
		{
			# at least 1 number -> a row of a week
			$week_of_month++;
			$is_week_row = 1;
		}
		
		if($is_week_row)
		{
			my $month_spacing = 2;
			my $where_last_dow_column_ends = $dow_end{($week_start_on-1)%7};
			my $how_many_month_columns = int(length($_) / $where_last_dow_column_ends);
			my $accum_shift = 0;
			
			for my $month_column (0..$how_many_month_columns-1)
			{
				my $week_start_offset = $month_column * ($where_last_dow_column_ends + $month_spacing);
				
				my %hldow = map {$_=>$Highlight->{'days-of-week'}->{$_}} keys %{$Highlight->{'days-of-week'}};
				my $cur_year = $year_column[$month_column] || $year;
				my $cur_month = $month_column[$month_column];
				
				for my $dow ( $week_start_on .. SUN, MON .. ($week_start_on-1) )
				{
					my $dom = int substr($_, $dow_bgn{$dow} + $week_start_offset + $accum_shift, $dow_end{$dow}-$dow_bgn{$dow});
					next unless $dom;
					my $this_date = DateTime->new(year=>$cur_year, month=>$cur_month, day=>$dom, time_zone=>'local');
					
					for my $ival (@{$Highlight->{'interval'}})
					{
						next if @{$ival->{'dow'}} and not $dow ~~ @{$ival->{'dow'}};
						
						my $s = $ival->{'start'};
						my $e = $ival->{'end'};
						
						my $sy = $s->{'y'}||$cur_year;
						my $sm = $s->{'m'}||$cur_month;
						my $start = DateTime->new(year=>$sy, month=>$sm, day=>$s->{'d'}, time_zone=>'local');
						my $end = DateTime->new(year=>$e->{'y'}||$sy, month=>$e->{'m'}||$sm, day=>$e->{'d'}, time_zone=>'local');
						
						if($end < $start)
						{
							if   (! $e->{'m'}) { $end->add(months=>1); }
							elsif(! $e->{'y'}) { $end->add(years=>1); }
						}
						if($this_date < $start)
						{
							if   (! $s->{'m'}) { $_->subtract(months=>1) for $start, $end; }
							elsif(! $s->{'y'}) { $_->subtract(years=>1) for $start, $end; }
						}
						
						#warn $this_date->ymd, ": ", $start->ymd, "...", $end->ymd, "\n";  # DEBUG
						
						if($this_date >= $start and $this_date <= $end)
						{
							$hldow{$dow} .= " " . $ival->{'color'};
						}
					}
				}
				
				my %dates = ();
				$dates{$d} = $c while ($d, $c) = each %{$Highlight->{'date'}->{'*'}->{'*'}};
				$dates{$d} = $c while ($d, $c) = each %{$Highlight->{'date'}->{'*'}->{$cur_month}};
				$dates{$d} = $c while ($d, $c) = each %{$Highlight->{'date'}->{$cur_year}->{$cur_month}};
				for my $date (keys %dates)
				{
					my $dow = int strftime('%u', 0, 0, 0, $date, $cur_month-1, $cur_year-1900) - 1;
					my $date_at_dow_location = substr($_, $dow_bgn{$dow} + $week_start_offset + $accum_shift, $dow_end{$dow}-$dow_bgn{$dow});
					$hldow{$dow} .= " " . $dates{$date} if $date == $date_at_dow_location;
				}
				
				for my $dow ( $week_start_on .. SUN, MON .. ($week_start_on-1) )
				{
					if(exists $hldow{$dow})
					{
						my $color = $hldow{$dow};
						my $insert1 = ansicode($color);
						my $insert2 = ansicode('reset');
						my $bgn = $dow_bgn{$dow} + $week_start_offset + $accum_shift;
						my $end = $dow_end{$dow} + $week_start_offset + $accum_shift;
						
						$_ = substr($_, 0, $bgn) . $insert1 . substr($_, $bgn, $end-$bgn) . $insert2 . substr($_, $end);
						$accum_shift += length($insert1) + length($insert2);
					}
				}
				
			}
		}
	}
	else  # $layout eq VERTICAL
	{
		if(not /\b\d\d?\b/)
		{
			# no 1 or 2 digit numbers, assuming month name(s) header.
			# TODO: any locale setting in which month names have numbers?
			
			$day_of_week = $week_start_on - 1;
			$is_date_row = 0;
		}
		
		if(/(\d+\s+){4}/)
		{
			# at least 4 numbers -> it's a new row of days
			$day_of_week = ($day_of_week + 1) % 7;
			$is_date_row = 1;
		}
		
		if($is_date_row)
		{
			# TODO: hilight dates
			
			while (my ($hldow, $color) = each %{$Highlight->{'days-of-week'}})
			{
				if($day_of_week == $hldow)
				{
					s/^/ansicode($color)/e;
					s/$/ansicode('reset')/e;
				}
			}
		}
	}
	
	print;
}

close $pipe;
