#!/bin/bash

true <<EOF
=pod

=head1 NAME

rsacrypt - Encrypt/decrypt files with RSA

=cut

EOF


say()
{
	echo "$*" >&2
}
die()
{
	say "$@"
	exit 1
}
shasum()
{
	if [ $sign = yes ]
	then
		sha256sum -b | cut -b 1-64
	fi
}
subshell_exception()
{
	say Error occured in subprocess, killing main process
	kill $mainpid 2>/dev/null
}
set_filename()
{
	if [ -z "$filename" ]
	then
		if [ -n "$1" -a "$1" != - ]
		then
			filename=$1
		else
			filename=/dev/stdin
		fi
	else
		die Give at most one file or pipe data on STDIN for ${mode}ion
	fi
}


# Default key files are the user's own RSA keys default used for ssh.
# Use -r and -k options to change.
keyfile=$HOME/.ssh/id_rsa
pubfile=$HOME/.ssh/id_rsa.pub
# Default mode is encryption.
mode=encrypt
filename=
# Sign encrypted data and verify signature by default.
sign=yes
signfile=
signbytes=
bs=256
mainpid=$$


while [ -n "$1" ]
do
case "$1" in
-h|--help)
	say "Usage: $0 [Options] [FILE]
Options:
 --encrypt, -e  encrypt (default)
 --decrypt, -d  decrypt
 --recipient, -r PUBLIC_KEY
 --key, -k PRIVATE_KEY
 --no-sign, -S  do not sign the secret, and do not search for the signature
                at the end of data when decrypting
 --ignore-sign --sign-bytes, -S -b N
                there is an N bytes long signature at the end of data, but
                do not verify it
 --signature-file FILE
                write/read signature to/from a separated file
"
	exit 0
	;;
-r|--recipient)
	shift
	pubfile=$1
	;;
-k|--key)
	shift
	keyfile=$1
	;;
-e|--encrypt)
	mode=encrypt
	;;
-d|--decrypt)
	mode=decrypt
	;;
-S|--no-sign|--ignore-sign)
	sign=no
	;;
-b|--sign-bytes)
	shift
	let signbytes=$1
	;;
--signature-file)
	shift
	signfile=$1
	;;
--)
	shift
	break
	;;
-*)
	die Invalid option: $1
	;;
*)
	set_filename "$1"
	;;
esac
shift
done

for arg in "$@"
do
	set_filename "$arg"
done

if [ -z "$filename" ]
then
	filename=/dev/stdin
fi

if [ $mode = encrypt -a -t 1 ]
then
	die Encrypted data not written to a terminal. Use output redirection.
fi


set -o nounset
set -o errexit -o pipefail


if [ -e "$pubfile" ]
then
	if file -b "$pubfile" | grep -q OpenSSH
	then
		if [ ! -e "$pubfile.pem" ]
		then
			say Convert $pubfile to $pubfile.pem
			ssh-keygen -f "$pubfile" -e -m PKCS8 >"$pubfile.pem"
		fi
		pubfile=$pubfile.pem
	fi
	say Using public key: $pubfile
else
	if [ $mode = encrypt -o \( $mode = decrypt -a $sign = yes \) ]
	then
		die Public key not found: $pubfile
	fi
fi
if [ -e "$keyfile" ]
then
	say Using private key: $keyfile
else
	if [ $mode = decrypt -p \( $mode = encrypt -a $sign = yes \) ]
	then
		die Private key not found: $keyfile
	fi
fi




if [ $mode = encrypt ]
then
	say Generating passkey
	pass=`openssl rand -base64 32`
	echo -n "$pass" | openssl rsautl -encrypt -inkey "$pubfile" -pubin
	
	say Encrypting
	exec 3>&1
	hash=`tee /dev/fd/4 <"$filename" \
		4> >(set -o errexit -o pipefail;
			trap subshell_exception ERR;
			openssl enc -aes-256-cbc -salt -pass pass:$pass >&3) |\
		shasum`
	
	if [ $sign = yes ]
	then
		say Signing
		if [ -z "$signfile" ]
		then
			signfile=/dev/stdout
		fi
		echo "$hash" |\
		xxd -r -p |\
		openssl rsautl -sign -inkey "$keyfile" >"$signfile"
	fi
elif [ $mode = decrypt ]
then
	if [ -z "$signbytes" ]
	then
		# Find out how many byte the signature is.
		if [ $sign = yes ]
		then
			if [ -z "$signfile" ]
			then
				# There is no separated signature file,
				# signature is as long as recipient's key.
				bits=`openssl rsa -text -noout -in "$pubfile" -pubin | sed -e '1s/.*(\([0-9]\+\) bit.*/\1/;q'`
				let signbytes=bits/8
				say Signature bytes: $signbytes
			else
				signbytes=0
			fi
		else
			signbytes=0
		fi
	fi
	
	{
	say Extracting passkey
	pass=`head -c $bs | openssl rsautl -decrypt -inkey "$keyfile"`
	
	say Decrypting
	# Feed openssl with crypted data except the signature at the end of it,
	# send openssl's output to main stdout (ie. fd/3 in the inner subshell),
	# calc checksum and put it on outer subshell's stdout captured by $hashes.
	# In parallel, feed an other openssl with data stream's end for signature
	# verification, let stored signature also captured by $hashes.
	exec 3>&1
	hashes=(`tee /dev/fd/4 \
		4> >(set -o errexit -o pipefail;
			trap subshell_exception ERR;
			head -c -$signbytes |\
			openssl enc -d -aes-256-cbc -pass pass:$pass |\
			tee /dev/fd/3 |\
			shasum) \
		1> >(set -o errexit -o pipefail;
			trap subshell_exception ERR;
			if [ $sign = yes ]
			then
				if [ -z "$signfile" ]
				then
					tail -c $signbytes
				else
					cat "$signfile"
				fi |\
				openssl rsautl -verify -inkey "$pubfile" -pubin |\
				xxd -p -c 32
			fi)`)
	
	if [ $sign = yes ]
	then
		say Verify signature
		if [ "${hashes[0]}" = "${hashes[1]}" ]
		then
			say Signature OK
		else
			die Signatures mismatch
		fi
	fi
	}<"$filename"
fi

say Done
