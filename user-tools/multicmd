#!/usr/bin/env perl

=pod

=head1 NAME

multicmd - Run multiple commands in series

=head1 SYNOPSIS

multicmd [I<OPTIONS>] [--] I<COMMAND-1> I<ARGS-1> ";" I<COMMAND-2> I<ARGS-2> ";" ...

Run I<COMMAND-1>, I<COMMAND-2>, ... I<COMMAND-n> after each other,
similarly like shells would do, except not involving any shell.

=head1 OPTIONS

=over 4

=item -d, --delimiter I<STRING>

Set command delimiter to I<STRING>.
Default is a literal C<;> semicolon.
Probably need to shell-escape.
If you want C<--> (double dash) for delimiter, to avoid confusion, put it as:
C<--delimiter=-->.

=item -e, --errexit

Exit if a command did not run successfully (ie. non-zero exit status or signaled)
and do not run further commands.
Similar to bash(1)'s errexit (set -e) mode.
multicmd(1)'s exit code will be the failed command exit code
(128+B<n> if terminated by a signal B<n>).

=back

=head1 CAVEATS

Note, that C<;> (or the non-default delimiter set by B<--delimiter>) is a shell meta-char
in your shell, so you need to escape/quote it, but it's a separate literal argument
when you call multicmd(1) in other layers (eg. execve(2)),
so don't just stick to the preceding word. Ie:

B<WRONG>: multicmd date\; ls

B<WRONG>: multicmd 'date; ls'

B<WRONG>: multicmd 'date ; ls'

B<CORRECT>: multicmd date \; ls

B<CORRECT>: multicmd date ';' ls

=head1 EXIT STATUS

multicmd(1) exit with the exit code of the last command.

=cut


use Getopt::Long qw/:config no_ignore_case no_bundling no_getopt_compat no_auto_abbrev require_order pass_through/;
use Pod::Usage;
use Data::Dumper;
use POSIX;

$Delimiter = ';';
$Errexit = 0;

GetOptions(
	'd|delimiter=s' => \$Delimiter,
	'e|errexit!' => \$Errexit,
	'help' => sub { pod2usage(-exitval=>0, -verbose=>99); },
) or pod2usage(-exitval=>2, -verbose=>99);

# Getopt's pass_through mode leaves "--" there
shift @ARGV if $ARGV[0] eq '--';

if(not @ARGV)
{
	pod2usage(-exitval=>2, -verbose=>99);
}

@cmd_args = ([]);
$cmd_idx = 0;

for my $arg (@ARGV)
{
	if($arg eq $Delimiter)
	{
		$cmd_idx++;
		$cmd_args[$cmd_idx] = [];
	}
	else
	{
		push @{$cmd_args[$cmd_idx]}, $arg;
	}
}

# filter out empty commands
@cmd_args = grep {@$_} @cmd_args;

$last_cmd_ref = pop @cmd_args;

for my $cmd_ref (@cmd_args)
{
	system @$cmd_ref;
	my $error_code = ${^CHILD_ERROR_NATIVE};
	my $sys_errmsg = $!;
	my $sys_errno = int $!;
	my $exit_status = 0;
	
	if($error_code == -1)
	{
		warn "$0: $cmd_ref->[0]: $sys_errmsg\n";
		$exit_status = 125 + $sys_errno;  # "file not found" becomes 127.
	}
	else
	{
		if(WIFSIGNALED($error_code)) { $exit_status = 128 + WTERMSIG($error_code); }
		else { $exit_status = WEXITSTATUS($error_code); }
	}
	
	if($Errexit and $exit_status != 0)
	{
		exit $exit_status;
	}
}

exec @$last_cmd_ref;

# if last command not found:
exit 127;
