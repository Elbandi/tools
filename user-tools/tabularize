#!/bin/bash

true <<EOF
=pod

=head1 NAME

tabularize - Takes TAB-delimited lines of text and outputs formatted table.

=head1 SYNOPSIS

I<COMMAND> | tabularize [I<OPTIONS>]

=head1 OPTIONS

=over 4

=item -a, --ascii

7-bit ascii borders

=item -u, --unicode

borders with nice graphical chars

=item -H, --no-horizontal

no horizontal lines in the output

=item -M, --no-margins

no margins, ie. no right-most and left-most vertical borders

=item -v, --output-vertical-separator I<CHAR>

vertical separator character(s) in the output

=item -r, --align-right I<NUM>

align these columns (0-indexed) to the right,
others are auto-detected and if deemed to contain numeric data,
only then aligned to the right.
this option is repeatable.

=item -l, --align-left I<NUM>

similar to --align-right option

=back

=head1 ENVIRONMENT

=over 4

=item PAGER

If B<$PAGER> is set and standard output is a terminal
and the resulting table is wider than the terminal,
then pipe the table through B<$PAGER>.

=back

=head1 SEE ALSO

column(1), untabularize(1)

=cut

EOF


TAB=$'\t'
IFS=''

set_ascii()
{
	verticalBar='|'
	horizontalBar='-'
	topleftCorner='+'
	toprightCorner='+'
	bottomleftCorner='+'
	bottomrightCorner='+'
	leftCross='+'
	middleCross='+'
	rightCross='+'
	topCross='+'
	bottomCross='+'
}
set_unicode()
{
	verticalBar='│'
	horizontalBar='─'
	topleftCorner='┌'
	toprightCorner='┐'
	bottomleftCorner='└'
	bottomrightCorner='┘'
	leftCross='├'
	middleCross='┼'
	rightCross='┤'
	topCross='┬'
	bottomCross='┴'
}


set_unicode

declare -a columnAlignment=()
horizontalLines=yes
margins=yes

while [ $# -gt 0 ]
do
case "$1" in
-a|--ascii)
	set_ascii
	;;
-u|--unicode)
	set_unicode
	;;
-H|--no-horizontal)
	horizontalLines=''
	;;
-M|--no-margins)
	margins=''
	;;
-r|--align-right)
	shift
	columnAlignment[$1]=right
	;;
-l|--align-left)
	shift
	columnAlignment[$1]=left
	;;
-v|--output-vertical-separator)
	shift
	verticalBar=$1
	topleftCorner=$1
	toprightCorner=$1
	bottomleftCorner=$1
	bottomrightCorner=$1
	leftCross=$1
	middleCross=$1
	rightCross=$1
	topCross=$1
	bottomCross=$1
	;;
-h|--help)
	pod2text "$0"
	exit
	;;
-*)
	echo "$0: unknown option: $1" >&2
	exit -1
	;;
esac
shift
done


explode()
{
	local separator=$1
	local string=$2
	local new_string
	declare -g -a EXPLODE_ARRAY=()
	
	while [ -n "$string" ]
	do
		EXPLODE_ARRAY+=("${string%%$separator*}")
		new_string=${string#*$separator}
		if [ "$string" = "$new_string" ]
		then
			break
		fi
		string=$new_string
	done
	
	# return $EXPLODE_ARRAY
}

is_numeric_check_sep()
{
	local thousands_sep=$2
	local fraction_sep=$3
	[[ $1 =~ ^[+-]?[0-9]+($thousands_sep[0-9]+)*($fraction_sep[0-9]+($thousands_sep[0-9]+)*)?$ ]]
}
is_numeric()
{
	is_numeric_check_sep "$1" ',' . && return 0
	is_numeric_check_sep "$1" ' ' , && return 0
	is_numeric_check_sep "$1" '.' , && return 0
	return 1
}


# compute width of each column

column_width=()
num_line=0
text=''
numericals_by_col=()
non_numericals_by_col=()
while read -r line
do
	text="$text${text:+$'\n'}$line"
	explode $'\t' "$line"
	
	column=0
	for cell in "${EXPLODE_ARRAY[@]}"
	do
		width=${#cell}
		if [ -z "${column_width[$column]}" ] || [ $width -gt "${column_width[$column]}" ]
		then
			column_width[$column]=$width
		fi
			
		# guess if this cell has numerical content (skip 1st line as it's likely a header)
		if [ $num_line -gt 0 -a -n "$cell" -a -z "${columnAlignment[$column]:-}" ]
		then
			if is_numeric "$cell"
			then
				let numericals_by_col[$column]++
			else
				let non_numericals_by_col[$column]++
			fi
		fi
		let column++
	done
	
	let num_line++
done

if [ $num_line = 0 ]
then
	# no input, no output
	exit 0
fi


set -u

# compose the format string

table_width=0
cellFmt=''
topFmt=''
innerFmt=''
bottomFmt=''
segments=()
sequentColumn=''
for column in "${!column_width[@]}"
do
	if [ -z "${columnAlignment[$column]:-}" ]
	then
		if [ ${numericals_by_col[$column]:-0} -ge ${non_numericals_by_col[$column]:-0} ]
		then
			columnAlignment[$column]=right
		else
			columnAlignment[$column]=left
		fi
	fi
	
	table_width=$[table_width + (column == 0 ? (0${margins:+1} ? ${#verticalBar} : 0) : ${#verticalBar}) + ${column_width[$column]}]
	
	cellFmt="${cellFmt:-${margins:+$verticalBar}}${sequentColumn:+$verticalBar}%*s"
	topFmt="${topFmt:-${margins:+$topleftCorner}}${sequentColumn:+$topCross}%${column_width[$column]}s"
	innerFmt="${innerFmt:-${margins:+$leftCross}}${sequentColumn:+$middleCross}%${column_width[$column]}s"
	bottomFmt="${bottomFmt:-${margins:+$bottomleftCorner}}${sequentColumn:+$bottomCross}%${column_width[$column]}s"
	segments+=('')
	
	sequentColumn=yes
done
table_width=$[table_width + (0${margins:+1} ? ${#verticalBar} : 0)]
cellFmt="$cellFmt${margins:+$verticalBar}"
topFmt="$topFmt${margins:+$toprightCorner}"
innerFmt="$innerFmt${margins:+$rightCross}"
bottomFmt="$bottomFmt${margins:+$bottomrightCorner}"


topGrid=''
innerGrid=''
bottomGrid=''
if [ $horizontalLines ]
then
	topGrid=`printf -- "$topFmt" "${segments[@]}"`
	topGrid=${topGrid// /$horizontalBar}$'\n'
	innerGrid=`printf -- "$innerFmt" "${segments[@]}"`
	innerGrid=${innerGrid// /$horizontalBar}$'\n'
	bottomGrid=`printf -- "$bottomFmt" "${segments[@]}"`
	bottomGrid=${bottomGrid// /$horizontalBar}$'\n'
fi


print_table_g()
{
	line_no=1
	while read -r line
	do
		if [ $line_no = 1 ]
		then
			echo -n "$topGrid"
		else
			echo -n "$innerGrid"
		fi
		
		explode $'\t' "$line"
		printf_args=()
		for column in "${!column_width[@]}"
		do
			[ $column -lt ${#EXPLODE_ARRAY[@]} ] && cell=${EXPLODE_ARRAY[$column]} || cell=''
			chars=${#cell}
			bytes=`LANG=C; echo "${#cell}"`
			swidth=$[ ${column_width[$column]} + ( $bytes - $chars ) ]
			[ ${columnAlignment[$column]} = left ] && swidth=-$swidth
			printf_args+=($swidth "$cell")
		done
		printf -- "$cellFmt\n" "${printf_args[@]}"
		
		let line_no++
	done <<<"$text"
	
	echo -n "$bottomGrid"
}


if [ -t 1 -a -n "$PAGER" ]
then
	terminal_cols=`tput cols`
	if [ "${terminal_cols:-0}" -le $table_width ]
	then
		print_table_g | exec "$PAGER"
		exit ${PIPESTATUS[1]}
	fi
fi

print_table_g
