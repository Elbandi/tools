#!/usr/bin/env perl

=pod

=head1 NAME

symlinks2dot - Generate a graph in dot(1) format representing the symlink-target relations among the given files

=cut


use Cwd qw/getcwd realpath/;
use File::Basename;
use Pod::Usage;
use Data::Dumper;
$LF = "\n";


%shape_by_type = (qw/symlink diamond  dir box  missing none  normal oval/);


sub normalize_path_1
{
	my $path = shift;
	# reduce multiple slashes
	$path =~ s{/+}{/}g;
	# strip trailing slash
	$path =~ s{(.)/$}{$1}g;
	return $path;
}

sub normalize_path_2
{
	my $path = shift;
	# reduce self-dir elements
	$path =~ s{/\.(/|$)}{/}g;
	#$path =~ s{/[^/]+/\.\.(/|$)}{/}g;
	# reduce root-parent elements
	1 while $path =~ s{^/\.\.(/|$)}{/};
	return $path;
}

sub normalize_path
{
	return normalize_path_2(normalize_path_1(shift));
}

sub gettype
{
	my $path = shift;
	if(-l $path){ return "symlink" }
	elsif(-d $path){ return "dir" }
	elsif(!-e $path){ return "missing" }
	else { return "normal" }
}

sub add_path_to_nodes
{
	my $path = shift;
	my $ftype = gettype($path);
	$node{$path} = {
		'basename' => basename($path),
		'shape' => $shape_by_type{$ftype},
	};
}


for my $path (@ARGV)
{
	$path = normalize_path_1($path);
	# make absolute path
	if($path !~ /^\//) { $path = getcwd . '/' . $path; }
	$path = normalize_path_2($path);
	$paths_to_traverse{$path} = 1;
	# TODO resolve parent-dir elements
}


$node{'/'} = {
	'basename' => '/',
	'shape' => $shape_by_type{"dir"},
};


while(grep {$paths_to_traverse{$_}} keys %paths_to_traverse)
{
	for my $path (grep {$paths_to_traverse{$_}} keys %paths_to_traverse)
	{
		my $is_physical = 1;
		my @elems = split /\//, $path;
		$max_depth = scalar @elems if scalar @elems > $max_depth;
		for my $depth (1 .. $#elems)
		{
			my $elem = $elems[$depth];
			my $ancestor = join '/', @elems[0..$depth];
			if($elem eq '..')
			{
				my $cwd = getcwd;
				if(chdir $ancestor)
				{
					$resolved_path{$ancestor} = getcwd;
				}
				else
				{
					$resolved_path{$ancestor} = join('/', @elems[0..($depth-2)]) || '/';
				}
				chdir $cwd or die;
			}
			while(my ($prefix, $rest) = $ancestor =~ m{^(.*?/\.\.)(/.*|$)})
			{
				$ancestor = $resolved_path{$prefix}.$rest;
			}
			if(not exists $node{$ancestor})
			{
				add_path_to_nodes($ancestor);
				my $realpath = realpath($ancestor);
				if(-l $ancestor)
				{
					$is_physical = 0;
					my $target = readlink $ancestor;
					$node{$ancestor}->{'target'} = $target;
					my $target_abs = $target;
					if($target !~ /^\//) { $target_abs = dirname($ancestor) . '/' . $target; }
					$target_abs = normalize_path($target_abs);
					# TODO resolve parent-dir elements
					$node{$ancestor}->{'target_abs_path'} = $target_abs;
					$paths_to_traverse{$target_abs} = 1 unless exists $paths_to_traverse{$target_abs};
					if(not defined $realpath)
					{
						# broken symlink
						$realpath = $target_abs;
					}
					$symlinks{$ancestor} = $realpath;
				}
				$paths_to_traverse{$realpath} = 1 unless exists $paths_to_traverse{$realpath};
			}
		}
		$node{$path}->{'is_physical'} = $is_physical;
		$paths_to_traverse{$path} = 0;
	}
}

for my $path (keys %node)
{
	my $parent = dirname $path;
	if(-l $parent)
	{
		delete $node{$path};
	}
	else
	{
		$phy_pedigree{$path} = $parent;
	}
}


$\ = $LF;

print "digraph \"symlinks\" {
	rankdir=TB;
	concentrate=true;
	bgcolor=transparent;
	node [fontsize=10,width=.1,height=.1];";

for my $path (sort {$node{$a}->{'basename'} cmp $node{$b}->{'basename'}} keys %node)
{
	my $basename = $node{$path}->{'basename'};
	my $shape = $node{$path}->{'shape'};
	print "\"$path\" [label=\"$basename\",shape=\"$shape\"];"
}

for my $depth (2..$max_depth)
{
	print "  { rank=\"same\";";
	for my $path (grep {scalar(split /\//, $_) == $depth} keys %node)
	{
		print "    \"$path\";";
	}
	print "  }";
}

for my $child (keys %phy_pedigree)
{
	my $parent = $phy_pedigree{$child};
	my $attrs;
	if(!-l $child and !-e $child) { $attrs .= ",style=\"dashed\""; }
	print "\"$parent\" -> \"$child\" [color=\"black\"$attrs]";
}

for my $symlink_abs_path (keys %symlinks)
{
	my $target = $node{$symlink_abs_path}->{'target'};
	my $target_abs_path = $node{$symlink_abs_path}->{'target_abs_path'};
	my $target_realpath = $symlinks{$symlink_abs_path};
	my $attrs;
	if($target !~ /^\// or !$node{$target_abs_path}->{'is_physical'}) { $attrs .= ",label=\"$target\""; }
	my $color = "blue";
	if(!-e $symlink_abs_path) { $color = "red"; } 
	print "\"$symlink_abs_path\" -> \"$target_realpath\" [color=\"$color\",fontcolor=\"$color\"$attrs]";
}

print "}";
