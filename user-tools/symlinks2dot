#!/usr/bin/env perl

=pod

=head1 NAME

symlinks2dot - Generate a graph in dot(1) format representing the symlink-target relations among the given files

=cut


use Cwd qw/getcwd realpath/;
use File::Basename;
use Pod::Usage;
use Data::Dumper;
$LF = "\n";


%shape_by_type = (qw/symlink diamond  dir box  missing none  normal oval/);


sub normalize_path_1
{
	my $path = shift;
	# reduce multiple slashes
	$path =~ s{/+}{/}g;
	# strip trailing slash
	$path =~ s{(.)/$}{$1}g;
	return $path;
}

sub normalize_path_2
{
	my $path = shift;
	# reduce self-dir elements
	$path =~ s{/\.(/|$)}{/}g;
	# reduce root-parent elements
	1 while $path =~ s{^/\.\.(/|$)}{/};
	return $path;
}

sub normalize_path
{
	return normalize_path_2(normalize_path_1(shift));
}

sub gettype
{
	my $path = shift;
	if(-l $path){ return "symlink" }
	elsif(-d $path){ return "dir" }
	elsif(!-e $path){ return "missing" }
	else { return "normal" }
}

sub get_ancestors
{
	my $path = shift;
	my @ancestors;
	my @elems = split /\//, $path;
	for my $depth (1 .. ($#elems-1))
	{
		push @ancestors, join '/', @elems[0..$depth];
	}
	return @ancestors;
}

sub add_symlink_target
{
	my $path = shift;
	my $hashref = shift;
	
	my $target = readlink $path;
	my $target_abs;
	if($target =~ /^\//)
	{
		$target_abs = $target;
	}
	else
	{
		$target_abs = dirname($path) . '/' . $target;
	}
	$target_abs = normalize_path($target_abs);
	$hashref->{$target_abs} = 1 unless exists $hashref->{$target_abs};
}


for my $path (@ARGV)
{
	if($path !~ /^\//) { $path = getcwd . '/' . $path; }
	$path = normalize_path($path);
	$paths_to_traverse{$path} = 1;
	$paths_given_at_cli{$path} = 1;
}


$node{'/'} = {};


while(grep {$paths_to_traverse{$_}} keys %paths_to_traverse)
{
	for my $path (grep {$paths_to_traverse{$_}} keys %paths_to_traverse)
	{
		for my $ancestor (get_ancestors($path))
		{
			my $basename = basename($ancestor);
			if($basename eq '..')
			{
				# we don't get here via symlinked dirs, because we stop walking through the path when a symlink is found, see below.
				# so it's safe to go back the same path where we got here.
				$ancestor =~ s{/[^/]+/\.\.$}{};
			}
			
			$node{$ancestor} = {} unless exists $node{$ancestor};
			
			if(-l $ancestor)
			{
				add_symlink_target($ancestor, \%paths_to_traverse);
				$soft_links{$ancestor} = 1;
				last;
			}
		}
		
		if($paths_given_at_cli{$path})
		{
			$node{$path}->{'emphasis'} = 1;
		}
		
		if(-l $path)
		{
			add_symlink_target($path, \%paths_to_traverse);
		}
		
		$paths_to_traverse{$path} = 0;
	}
}



$\ = $LF;

print "digraph \"symlinks\" {
	rankdir=TB;
	concentrate=true;
	bgcolor=transparent;
	node [fontsize=10,width=.1,height=.1];";

for my $path (keys %node)
{
	$node{$path}->{'basename'} = basename($path);
}

for my $path (sort {$node{$a}->{'basename'} cmp $node{$b}->{'basename'}} keys %node)
{
	my $basename = $node{$path}->{'basename'};
	my $shape = $shape_by_type{gettype($path)};
	my $attrs;
	if($node{$path}->{'emphasis'}) { $attrs .= ",style=\"bold\""; }
	print "\"$path\" [label=\"$basename\",shape=\"$shape\"$attrs];"
}

my $level = 2;
while(1)
{
	my @same_rank_nodes = grep {scalar(split /\//, $_) == $level} keys %node;
	last if scalar @same_rank_nodes == 0;
	if(scalar @same_rank_nodes > 1)
	{
		print "  { rank=\"same\";";
		for my $path (@same_rank_nodes)
		{
			print "    \"$path\";";
		}
		print "  }";
	}
	$level++;
}

for my $child (keys %solid_edge)
{
	my $parent = $solidedge{$child};
	my $attrs;
	if(!-l $child and !-e $child) { $attrs .= ",style=\"dashed\""; }
	print "\"$parent\" -> \"$child\" [color=\"black\"$attrs]";
}

for my $symlink_node_path (keys %soft_links)
{
	my $target_node_path = $soft_links{$symlink_node_path};
	my $attrs;
	#TODOif($target !~ /^\// or !$node{$target_abs_path}->{'is_physical'}) { 
	$attrs .= ",label=\"$target\"";
	my $color = "blue";
	if(!-e $symlink_node_path) { $color = "red"; } 
	print "\"$symlink_abs_path\" -> \"$target_node_path\" [color=\"$color\",fontcolor=\"$color\"$attrs]";
}

print "}";
