#!/usr/bin/env perl

=pod

=head1 NAME

lines - Output only the given lines of the input stream

=head1 SYNOPSIS

lines [I<RANGES> [I<RANGES> [...]]] [-- I<FILE> [I<FILE> [...]] | < I<FILE>]

=head1 DESCRIPTION

Read from from I<FILE>s if specified, STDIN otherwise.
I<RANGES> is comma-delimited list of line numbers and inclusive ranges.
Special word "B<EOF>" in a range's upper limit represents the end of the file.

Starts the line numbering from 1.

If multiple files are given, restart the line numbering on each file.

Always displays the lines in the in-file order, not in arguments-order,
how they were given in I<RANGES> arguments; ie. does not buffer or seek in the input files.
So I<lines 1,2> and I<lines 2,1> both display the 1st line before the 2nd.

=head1 EXAMPLES

=over 4

=item lines 1

=item lines 2-10

=item lines 1,5-10 3

=item lines 2-4 6,8 10-EOF

=back

=head1 EXIT STATUS

Exit 2 if there was a range which was not found,
ie. a file had less lines than requested.

=cut

use Data::Dumper;
use Pod::Usage;
use List::MoreUtils qw/all any none/;


if(grep {$_ eq '--help'} @ARGV)
{
	pod2usage(-exitval=>0, -verbose=>99);
}

my @ranges;

while(exists $ARGV[0])
{
	if($ARGV[0] eq '--')
	{
		shift @ARGV;
		last;
	}
	for my $range (split /,/, $ARGV[0])
	{
		if($range =~ /^(\d+)(?:-(\d+|EOF))?$/)
		{
			push @ranges, {'from'=>$1, 'to'=>$2, 'found'=>1};
		}
		else
		{
			die "invalid range: $range\n";
		}
	}
	shift @ARGV;
}

# load this delayed
eval 'use ARGV::readonly; 1' or die;

$status = 0;

while(<>)
{
	if($ARGV ne $prev_ARGV)
	{
		$. = 1;
		$status = 2 if any {$_->{'found'} != 1} @ranges;
		map {$_->{'found'} = 0} @ranges;
	}
	my $include = 0;
	for my $range (@ranges)
	{
		my $from = $range->{'from'};
		my $to = $range->{'to'};
		if(defined $to)
		{
			if($. >= $from and ($to eq 'EOF' or $. <= $to)) { $range->{'found'} = 1; $include = 1; }
		}
		else
		{
			if($. == $from) { $range->{'found'} = 1; $include = 1; }
		}
	}
	if($include)
	{
		print;
	}
	$prev_ARGV = $ARGV;
}

$status = 2 if any {$_->{'found'} != 1} @ranges;

exit $status;
