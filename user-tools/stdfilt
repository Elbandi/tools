#!/usr/bin/env perl

use Data::Dumper;
use Getopt::Long qw/:config no_ignore_case bundling no_getopt_compat/;
use Fcntl qw/F_GETFL F_SETFL O_NONBLOCK/;
use POSIX;
use Pod::Usage;
use List::MoreUtils qw/all any none/;
no if ($] >= 5.018), 'warnings' => 'experimental::smartmatch';


@Filters = ();
@initialARGV = @ARGV;


sub debug
{
	warn @_ if $ENV{DEBUG};
}

sub process_args
{
	@ARGV = @initialARGV;
	pop @Filters while @Filters;
	return GetOptions(
		'F|filter-file=s@' => sub { parse_filter_file($_[1]); },
		'f|filter=s@' => sub {
			eval { push @Filters, parse_filter_expr($_[1], \@Filters); 1; }
			or die sprintf "%s: error in filter expression %d: %s\n%s", $0, scalar @Filters, $_[1], $@;
		},
		'help' => sub {
			pod2usage(-exitval=>0, -verbose=>99);
			exit 0;
		},
		'<>' => sub { unshift @ARGV, @_[0]; die '!FINISH'; },
	);
}

process_args or exit 2;

if(not @ARGV)
{
	pod2usage(-exitval=>2, -verbose=>99);
}


sub parse_filter_file
{
	my $filepath = shift;
	open my $fh, '<', $filepath or die "$filepath: $!\n";
	while(<$fh>)
	{
		chomp;
		s/(^|\s+)#.*$//;
		next if /^$/;
		eval {
			push @Filters, parse_filter_expr($_, \@Filters);
			1;
		} or die "$0: filter expression error in $filepath in line $.:\n$@";
	}
	close $fh;
}

sub parse_filter_expr
{
	local $_ = shift;
	my $prev_filters = shift;
	my $prev_filter = $prev_filters->[-1];
	my $filt = { expr=>$_, };
	
	if(@$prev_filters and %{$prev_filter->{section_tags}})
	{
		$filt->{section_tags}->{$_} = $filt->{match_tags}->{$_} = $prev_filter->{section_tags}->{$_} for keys %{$prev_filter->{section_tags}};
	}
	
	my $remainder = $_;
	while($_)
	{
		s/^\s*//;
		if(s{^(?'negate'!|)\s*/(?'pattern'.*?)(?<!\\)/(?'modifiers'[a-zA-Z]*)\s*(\+(?'offset'\d+))?}{})
		{
			if(exists $filt->{replacer})
			{
				die "$0: pattern matching can not follow a replace: $remainder\n";
			}
			$filt->{negate} = $+{negate} ? 1 : 0;
			$filt->{pattern} = $+{pattern};
			$filt->{modifiers} = $+{modifiers};
			$filt->{offset} = $+{offset};
		}
		elsif(s/^\[\/(.+?)\]//)
		{
			if(exists $filt->{pattern})
			{
				push @{$filt->{tag_end}}, $1;
			}
			else
			{
				delete $filt->{match_tags}->{$1};
			}
		}
		elsif(s/^\[(.+?)\]//)
		{
			if(exists $filt->{pattern})
			{
				push @{$filt->{tag_start}}, $1;
			}
			else
			{
				$filt->{match_tags}->{$1} = 1;
			}
		}
		elsif(s{^(s/.*?(?<!\\)/.*?(?<!\\)/[a-zA-Z]*)}{})
		{
			my $replacer = $1;
			eval 'my $test = ""; $test =~ '.$replacer.'; 1' or die "$0: error in s/// expression: $@\n";
			$filt->{replacer} = $replacer;
		}
		else
		{
			die "$0: can not parse expression: $_\n";
		}
		
		$remainder = $_;
	}
	
	# if it's a "[blue]" type of line, ie. a lone tag specification, then it opens a section of rules, all of which must match to "blue" tag.
	if(all {not exists $filt->{$_}} qw/pattern replacer tag_start tag_end/)
	{
		if(exists $filt->{match_tags})
		{
			$filt->{section_tags} = {};
			$filt->{section_tags}->{$_} = $filt->{match_tags}->{$_} for keys %{$filt->{match_tags}};
		}
	}
	
	debug Dumper $filt;
	return $filt;
}

sub stream_tags_match
{
	my $current_tags = shift;
	my $mandatory_tags = shift;
	return all { $_ ~~ [keys %$current_tags] } keys %$mandatory_tags;
}

sub apply_filter_rule
{
	my $rule = shift;
	my $line = shift;
	my $context = shift;
	my $result = shift;
	my $applied = 0;
	
	if(exists $rule->{replacer})
	{
		eval '$line =~ '.$rule->{replacer}.'; 1' or warn "$0: $@\n";
		$result->{line} = $line;
		$applied = 1;
	}
	if(exists $rule->{tag_start})
	{
		$context->{tags}->{$_} = 1 for @{$rule->{tag_start}};
		$applied = 1;
	}
	if(exists $rule->{tag_end})
	{
		delete $context->{tags}->{$_} for @{$rule->{tag_end}};
		$applied = 1;
	}
	return $applied;
}

sub evaluate_filters
{
	my $line = shift;
	my $context = shift;
	my $result = {pass => 1, line => $line,};
	
	for my $fnum (0 .. $#Filters)
	{
		my $filt = $Filters[$fnum];
		
		debug Dumper { filter => $filt, context => $context, };
		
		$context->{delayed_rule}->[$fnum]->{count_down} -= 1 if $context->{delayed_rule}->[$fnum]->{count_down} > 0;
		if(%{$context->{delayed_rule}->[$fnum]} and $context->{delayed_rule}->[$fnum]->{count_down} <= 0)
		{
			debug Dumper { apply_delayed_rule => $context->{delayed_rule}->[$fnum]->{rule}, };
			apply_filter_rule($context->{delayed_rule}->[$fnum]->{rule}, $line, $context, $result);
			delete $context->{delayed_rule}->[$fnum];
		}
		
		next if not stream_tags_match($context->{tags}, $filt->{match_tags});
		
		my %applicable_rule = map {($_=>$filt->{$_})} grep {$_ ~~ [qw/tag_start tag_end replacer/]} keys %$filt;
		
		if(exists $filt->{pattern})
		{
			my $pattern_matched = $line =~ m/(?$filt->{modifiers})$filt->{pattern}/;
			$pattern_matched = !$pattern_matched if $filt->{negate};
			if($pattern_matched)
			{
				if($filt->{offset})
				{
					debug Dumper { delay_rule_application => \%applicable_rule, };
					$context->{delayed_rule}->[$fnum]->{count_down} = $filt->{offset};
					$context->{delayed_rule}->[$fnum]->{rule} = \%applicable_rule;
				}
				else
				{
					$result->{pass} = 1;
					apply_filter_rule(\%applicable_rule, $line, $context, $result);
				}
			}
			else
			{
				if(not %applicable_rule)
				{
					$result->{pass} = 0;
				}
			}
		}
		else
		{
			apply_filter_rule(\%applicable_rule, $line, $context, $result);
		}
	}
	
	return $result;
}

sub process_line
{
	my $line = shift;
	my $stream = shift;
	my $filt_result = evaluate_filters($line, $stream->{filter_context});
	print {$stream->{'write_fh'}} $filt_result->{line} if $filt_result->{pass};
}

sub process_stream
{
	my $stream = shift;
	while(1)
	{
		my $nl = index $stream->{'buf'}, "\n";
		last if $nl == -1;
		$nl++;
		
		my $line = substr $stream->{'buf'}, 0, $nl;
		process_line $line, $stream;
		
		$stream->{'buf'} = substr $stream->{'buf'}, $nl;
	}
}



pipe($stdout_r, $stdout_w) or die "$0: pipe: $!\n";
pipe($stderr_r, $stderr_w) or die "$0: pipe: $!\n";


$CHILD_PID = fork // die "$0: fork: $!\n";

if($CHILD_PID == 0)
{
	open STDOUT, '>&', $stdout_w or die "$0: replace stdout: $!\n";
	open STDERR, '>&', $stderr_w or die "$0: replace stderr: $!\n";
	select STDERR; $|++;
	select STDOUT; $|++;
	
	exec {$ARGV[0]} @ARGV;
	my ($errno, $errstr) = (int $!, $!);
	warn "$0: ${ARGV[0]}: $errstr\n";
	exit 125+$errno;
}


my $child_status = undef;
close STDIN;
close $stdout_w;
close $stderr_w;
fcntl($stdout_r, F_SETFL, fcntl($stdout_r, F_GETFL, 0) | O_NONBLOCK);
fcntl($stderr_r, F_SETFL, fcntl($stderr_r, F_GETFL, 0) | O_NONBLOCK);
select STDERR; $|++;
select STDOUT; $|++;


$streams = {
	'out' => {
		'fh' => $stdout_r,
		'write_fh' => \*STDOUT,
		'fd' => fileno $stdout_r,
		'buf' => '',
	},
	'err' => {
		'fh' => $stderr_r,
		'write_fh' => \*STDERR,
		'fd' => fileno $stderr_r,
		'buf' => '',
	},
};

sub reset_stream_contexts
{
	$streams->{'out'}->{'filter_context'} = {
		'tags' => {
			'STDOUT' => 1,
		},
	};
	$streams->{'err'}->{'filter_context'} = {
		'tags' => {
			'STDERR' => 1,
		},
	};
}

reset_stream_contexts();

$SIG{'HUP'} = sub { $do_reload = 1; };


while(1)
{
	$fds = '';
	for my $stream_name (keys %$streams)
	{
		vec($fds, $streams->{$stream_name}->{'fd'}, 1) = 1 if defined $streams->{$stream_name}->{'fh'};
	}
	last if $fds eq '';
	
	$! = 0;
	select($fds, undef, undef, undef);
	my $errno = int $!;
	
	if($do_reload)
	{
		$do_reload = 0;
		reset_stream_contexts();
		process_args();
	}
	
	next if $errno;
	
	for my $stream_name (keys %$streams)
	{
		if(vec($fds, $streams->{$stream_name}->{'fd'}, 1) == 1)
		{
			my $bytes = sysread $streams->{$stream_name}->{'fh'}, $streams->{$stream_name}->{'buf'}, 1024, length $streams->{$stream_name}->{'buf'};
			if($bytes)
			{
				process_stream($streams->{$stream_name});
			}
			else
			{
				# this stream is closed.
				undef $streams->{$stream_name}->{'fh'};
				# process last unterminated line (if any)
				process_line($streams->{$stream_name}->{'buf'}, $streams->{$stream_name}) if length $streams->{$stream_name}->{'buf'};
			}
		}
	}
}

waitpid($CHILD_PID, 0);
$child_status = $?;
$exit_status = WEXITSTATUS($child_status);
$exit_status = 128 + WTERMSIG($child_status) if WIFSIGNALED($child_status);
exit $exit_status;


__END__

=pod

=head1 NAME

stdfilt - Run a command but filter its STDOUT and STDERR

=head1 SYNOPSIS

stdfilt [I<OPTIONS>] [--] I<COMMAND> [I<ARGS>]

=head1 DESCRIPTION

Run I<COMMAND> and match each of its output lines (both stdout and stderr separately) against
the filter rules given by command arguments (B<-f>) or in files (B<-F>).
All filter expressions are evaluated and the last matching rule wins.
So it's a good idea to add wider matching patterns first, then the more specific ones later.

=head1 OPTIONS

=over 4

=item -F, --filter-file I<FILE>

=item -f, --filter I<EXPR>

=back

=head1 FILTER FILE FORMAT

Empty and comments are ignored as well as leading whitespace.
Comment is everything after a hashmark (C<#>) preceded by whitespace or the while line if it starts with a hashmark.

Each line is a filter rule, of which syntax is:

[B<match_tags>] [B<pattern> [B<offset>]] [B<replacer>] [B<set_tags>]

=over 4

=item B<match_tags>

Tag names, each of them in square-bracket (eg. C<[blue] [red]>).
The rest of the rule will be evaluated only if the tags are on the current stream.
Tags can be added, removed by the B<set_tags> element.

If a rule only consists of B<match_tags> tags, it opens a section in the filter file (and in B<-f> arguments too).
In this section, all rules are interpreted as they had the given B<match_tags> of the section written in them.
For example this filter-set selects all ranges in the output (and stderr) stream bound by those regexp patterns inclusively,
and blocks everying in them except "errors":

 /begin checking procedure/ [checking]
 /checking finished/+1 [/checking]
 [checking]
 !//
 /error/i
 [/checking]

The 2 streams, stdout and stderr are tagged by default by "STDOUT" and "STDERR" respectively:
So this filters out everying in the stdout except "errors":

 [STDOUT]
 !//
 /error/i
 [/STDOUT]

=item B<pattern>

Regexp pattern (perlre(1)) to match to the streams' (stdout and stderr) lines.
In the form of C<< /B<PATTERN>/B<MODIFIERS> >>.
Optionally prefixed with an exclamation mark (C<!>) which negates the result.

Pass every line by C<//>.
Exclude every line by C<!//>.

If there is a B<pattern> in the rule, replacement or tagging will only take place
if the pattern matched (or not matched if it was negated).

If there is no B<pattern>, only B<match_tags> controls if the rest will be applied or not.

You may escape slash (C</>) in the B<PATTERN> normally as it's customary in Perl,
by backslash, but to keep the filter expression parsing simple,
an escaped backslash itself (double backslash) at the end of the regexp pattern,
ie. just before the closing slash,
won't be noticed.
So type it as C<\x5C> instead.

Further limitation, that only slash C</> can be used, others, eg. C<m{...}> not.

=item B<offset>

A B<pattern> may be followed by a plus sign and a number (C<< +B<N> >>)
to denote that the given action (string replacement, or tagging)
should take effect after the given number of lines.

This way you can exclude the triggering line from the tagging.

A B<pattern> with B<offset> but without B<replacer> or B<set_tags> is meaningless.

=item B<replacer>

A C<s///> string substitution Perl expression.
Optionally with modifiers.
This can be abused to execute any perl code (with the "e" modifier).

=item B<set_tags>

The syntax is the same as for B<match_tags>.
But is the square-bracketed tags are at the right side of the B<pattern>,
then the tags are applied to the stream.

Remove tags by a leading slash, like C<[/blue]>.

B<set_tags> is useful with a B<pattern>.

Example filter:

 /BEGIN/ [keyblock]
 /END/ [/keyblock]
 [keyblock] s/^/\t/

This prepends a TAB char to each lines in the output stream which are between the lines containing "BEGIN" and "END".

=back

=head1 SIGNALS

HUP - re-read filter files given at command line

=head1 EXAMPLES

Prefix each output (and stderr) lines with the I<COMMAND> process'es PID:

 stdfilt -f 's/^/$CHILD_PID: /' some_command...

Prefix each line with literal STDOUT/STDERR string:

 stdfilt -f '[STDOUT]' -f 's/^/STDOUT: /' -f '[/STDOUT]' -f '[STDERR]' -f 's/^/STDERR: /' -f '[/STDERR]' some_command...

=head1 SEE ALSO

grep(1), stdbuf(1), logwall(8), perlre(1)

=cut

EOF
