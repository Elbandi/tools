#!/usr/bin/env perl

use Data::Dumper;
use Getopt::Long qw/:config no_ignore_case bundling no_getopt_compat/;
use Fcntl qw/F_GETFL F_SETFL O_NONBLOCK/;
use POSIX;


$0 = 'stdfilt';


$Filters = {
	'out' => [],
	'err' => [],
};
@savedARGV = @ARGV;


sub process_args
{
	@ARGV = @savedARGV;
	pop @{$Filters->{'out'}} while scalar @{$Filters->{'out'}};
	pop @{$Filters->{'err'}} while scalar @{$Filters->{'err'}};
	return GetOptions(
		'F|filter-file=s@' => sub { process_file($_[1]); },
		'o|po|pass-stdout=s@' => sub { push @{$Filters->{'out'}}, {'pass'=>1, 'pattern'=>$_[1]}; },
		'e|pe|pass-stderr=s@' => sub { push @{$Filters->{'err'}}, {'pass'=>1, 'pattern'=>$_[1]}; },
		'O|fo|filter-stdout=s@' => sub { push @{$Filters->{'out'}}, {'pass'=>0, 'pattern'=>$_[1]}; },
		'E|fe|filter-stderr=s@' => sub { push @{$Filters->{'err'}}, {'pass'=>0, 'pattern'=>$_[1]}; },
		'p|pass=s@' =>   sub { push @{$Filters->{$_}}, {'pass'=>1, 'pattern'=>$_[1]} for ('out', 'err'); },
		'f|filter=s@' => sub { push @{$Filters->{$_}}, {'pass'=>0, 'pattern'=>$_[1]} for ('out', 'err'); },
	);
}


process_args or pod2usage(-exitval=>2, -verbose=>99);

if(not @ARGV)
{
	pod2usage(-exitval=>2, -verbose=>99);
}


sub process_file
{
	my $filepath = shift;
	open my $fh, '<', $filepath or die "$filepath: $!\n";
	my @channels = ['out', 'err'];
	while(<$fh>)
	{
		chomp;
		next if /^\s*(#|$)/;
		if(/^\[std(out|err)\]$/)
		{
			@channels = [$1];
			next;
		}
		if(/^\[\*\]$/)
		{
			@channels = ['out', 'err'];
			next;
		}
		my $pass = 0;
		$pass = 1 if s/^!\s*//;
		my $pattern = $_;
		push @{$Filters->{$_}}, {'pass'=>$pass, 'pattern'=>$pattern} for @channels;
	}
	close $fh;
}


sub filter_pass
{
	my $line = shift;
	my $filters = shift;
	my $pass = 1;
	
	for my $filt (@$filters)
	{
		if($line =~ $filt->{'pattern'})
		{
			$pass = $filt->{'pass'};
		}
	}
	return $pass;
}

sub process_line
{
	my $line = shift;
	my $stream = shift;
	print {$stream->{'write_fh'}} $line if filter_pass $line, $stream->{'filter'};
}

sub process_stream
{
	my $stream = shift;
	while(1)
	{
		my $nl = index $stream->{'buf'}, "\n";
		last if $nl == -1;
		$nl++;
		
		my $line = substr $stream->{'buf'}, 0, $nl;
		process_line $line, $stream;
		
		$stream->{'buf'} = substr $stream->{'buf'}, $nl;
	}
}



pipe($stdout_r, $stdout_w) or die "$0: pipe: $!\n";
pipe($stderr_r, $stderr_w) or die "$0: pipe: $!\n";


my $child_pid = fork // die "$0: fork: $!\n";

if($child_pid == 0)
{
	open STDOUT, '>&', $stdout_w or die "$0: replace stdout: $!\n";
	open STDERR, '>&', $stderr_w or die "$0: replace stderr: $!\n";
	select STDERR; $|++;
	select STDOUT; $|++;
	exec @ARGV;
	exit 127;
}


my $child_status = undef;
close STDIN;
close $stdout_w;
close $stderr_w;
fcntl($stdout_r, F_SETFL, fcntl($stdout_r, F_GETFL, 0) | O_NONBLOCK);
fcntl($stderr_r, F_SETFL, fcntl($stderr_r, F_GETFL, 0) | O_NONBLOCK);
select STDERR; $|++;
select STDOUT; $|++;


$pipe = {
	'out' => {
		'fh' => $stdout_r,
		'write_fh' => \*STDOUT,
		'fd' => fileno $stdout_r,
		'buf' => '',
		'filter' => $Filters->{'out'},
	},
	'err' => {
		'fh' => $stderr_r,
		'write_fh' => \*STDERR,
		'fd' => fileno $stderr_r,
		'buf' => '',
		'filter' => $Filters->{'err'},
	},
};


$SIG{'HUP'} = sub { $do_reload = 1; };


while(1)
{
	$fds = '';
	for my $n ('out', 'err')
	{
		vec($fds, $pipe->{$n}->{'fd'}, 1) = 1 if defined $pipe->{$n}->{'fh'};
	}
	last if $fds eq '';
	
	$! = 0;
	select($fds, undef, undef, undef);
	my $errno = int $!;
	
	if($do_reload)
	{
		$do_reload = 0;
		process_args;
	}
	
	next if $errno;
	
	for my $n ('out', 'err')
	{
		if(vec($fds, $pipe->{$n}->{'fd'}, 1) == 1)
		{
			my $bytes = sysread $pipe->{$n}->{'fh'}, $pipe->{$n}->{'buf'}, 1024, length $pipe->{$n}->{'buf'};
			if($bytes)
			{
				process_stream($pipe->{$n});
			}
			else
			{
				# this stream is closed.
				undef $pipe->{$n}->{'fh'};
				# process last unterminated line (if any)
				process_line($pipe->{$n}->{'buf'}, $pipe->{$n}) if length $pipe->{$n}->{'buf'};
			}
		}
	}
}

waitpid($child_pid, 0);
$child_status = $?;
$exit_status = WEXITSTATUS($child_status);
$exit_status = 128 + WTERMSIG($child_status) if WIFSIGNALED($child_status);
exit $exit_status;


__END__

=pod

=head1 NAME

stdfilt - Run a command but filter its STDOUT and STDERR

=head1 SYNOPSIS

stdfilt [I<OPTIONS>] [--] I<COMMAND> [I<ARGS>]

=head1 OPTIONS

=over 4

=item -F, --filter-file I<FILE>

=item -o, -po, --pass-stdout I<PATTERN>

=item -e, -pe, --pass-stderr I<PATTERN>

=item -p, --pass I<PATTERN>

=item -O, -fo, --filter-stdout I<PATTERN>

=item -E, -fe, --filter-stderr I<PATTERN>

=item -f, --filter I<PATTERN>

=back

=head1 DESCRIPTION

Run I<COMMAND> and match each of its output lines (both stdout and stderr separately) against
the given perl-compatible regexp patterns.

=head1 FILTER FILE FORMAT

Each line is a filter pattern, or the literal string C<[stdout]>, C<[stderr]>, or C<[*]>,
which indicates which standard fd will be filtered through the following patterns.
If not indicated, C<[*]> (all fd) is implied.

A pattern may start with an C<!> exclamation mark, in which case, the lines matching it,
will be passed, not filtered.

=head1 SIGNALS

HUP - re-read filer files given at command line

=head1 SEE ALSO

grep(1), stdbuf(1), logwall(8)

=cut

EOF
