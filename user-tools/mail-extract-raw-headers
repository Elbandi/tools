#!/usr/bin/env perl

=pod

=head1 NAME

mail-extract-raw-headers - Get named headers from RFC822-format input.

=head1 SYNOPSIS

mail-extract-raw-headers [OPTIONS] <NAME> [<NAME> [...]]

=head1 OPTIONS

=over 4

=item -k, --keep-newlines, --keep-linefeeds

Keep linefeeds in multiline text.

=item -n, --header-names

Output the header name(s) too, not only the contents.

=back

=cut


use Getopt::Long qw/:config no_ignore_case bundling no_getopt_compat/;
use Pod::Usage;
use Data::Dumper;
no if ($] >= 5.018), 'warnings' => 'experimental::smartmatch';

$OptKeepLF = 0;
$OptNames = 0;

GetOptions(
	'k|keep-newlines|keep-linefeeds' => \$OptKeepLF,
	'n|header-names' => \$OptNames,
	'help|?' => sub { pod2usage(-exitval=>0, -verbose=>99); },
) or pod2usage(-exitval=>2, -verbose=>99);

if(not @ARGV)
{
	pod2usage(-exitval=>2, -verbose=>99);
}

@asked_headers = map {lc} @ARGV;


sub getheaders($)
{
	my $hname = lc shift;
	my @return;
	
	for my $header_ref (@Headers)
	{
		if(lc $header_ref->{"name"} eq $hname)
		{
			push @return, $header_ref->{"content"};
		}
	}
	return @return;
}

%found_headers = ();

# read headers
while(<STDIN>)
{
	if(/^\r?\n?$/)
	{
		# End of Headers
		last;
	}
	
	# does not care line ending
	s/\r?\n?$//;
	
	if(my($header_name, $content) = /^(\S+?):[ ]?(.*)/)
	{
		if(lc $header_name ~~ @asked_headers)
		{
			my $header_name_pretty = $header_name =~ s/[^-]*/\L\u$&/gr;
			my $header_hash = { "name" => $header_name, "pretty_name" => $header_name_pretty, "content" => $content, };
			push @{$found_headers{lc $header_name}}, $header_hash;
			$last_header_ref = $header_hash;
		}
		else
		{
			$last_header_ref = undef;
		}
	}
	elsif(/^\s+(.*)/)
	{
		# it is a folded header
		if(defined $last_header_ref)
		{
			$last_header_ref->{"content"} .= "\n" if $OptKeepLF;
			$last_header_ref->{"content"} .= $1;
		}
	}
	else
	{
		die "$0: can not parse line $.\n";
	}
}

for my $asked_header (@asked_headers)
{
	for my $header (@{$found_headers{$asked_header}})
	{
		# avoid non-whitespace character at the beginning of lines in the header content,
		# so header names can not be spoofed.
		my $safe_content = $header->{'content'} =~ s/\n([^\t ])/\n  $1/gr;
		
		if($OptNames)
		{
			printf "%s: %s\n", $header->{'name'}, $safe_content;
		}
		else
		{
			printf "%s\n", $safe_content;
		}
	}
}
