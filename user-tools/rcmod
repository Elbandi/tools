#!/usr/bin/env perl

=pod

=head1 NAME

rcmod - Run a given command and modify its Return Code according to the rules given by the user

=head1 SYNOPSIS

rcmod [<FROM>=<TO> [<FROM>=<TO> [...]]] <COMMAND> [<ARGS>]

=head1 DESCRIPTION

If I<COMMAND> returned with code I<FROM> then rcmod(1) returns with I<TO>.
I<FROM> may be a comma-delimited list.
Keyword B<any> means any return code not specified in I<FROM> parameters.
Keyword B<same> makes the listed exit codes to be preserved.

  rcmod any=0 1=13 2,3=same user-command

It runs I<user-command>, then exits with status 13 if I<user-command> exited
with 1, 2 if 2, 3 if 3, and 0 for any other return value.

If I<COMMAND> was terminated by a signal, rcmod(1) exits with 128 + signal number
like bash(1) does.

=head1 SEE ALSO

reportcmdstatus(1), sigdispatch(1)

=cut


use POSIX;
use Pod::Usage;

%RCmap = ();

while(@ARGV)
{
	if(my ($from, $to) = $ARGV[0] =~ /^([\d,]+|any)=(\d+|same)$/)
	{
		shift @ARGV;
		
		for my $inner_rc (split /,/, $from)
		{
			my $outer_rc = $to;
			$outer_rc = $inner_rc if $to eq 'same';
			$RCmap{$inner_rc} = $outer_rc;
		}
	}
	else
	{
		last;
	}
}

system {$ARGV[0]} @ARGV;
$status = ${^CHILD_ERROR_NATIVE};

if(WIFSIGNALED($status))
{
	$mystatus = 128 + WTERMSIG($status);
}
else
{
	$mystatus = WEXITSTATUS($status);
}


if(exists $RCmap{$mystatus})
{
	$mystatus = $RCmap{$mystatus};
}
elsif(exists $RCmap{'any'})
{
	$mystatus = $RCmap{'any'};
}

exit $mystatus;
