#!/bin/bash

true <<EOF
=pod

=head1 NAME

partial - Show an earlier started long-running command's partial output

=cut

EOF


set -e
set -o pipefail
set -u

print_partial()
{
	cat "$dir/stdout"
}

warnx()
{
	echo "${0##*/}: $*" >&2
}

help()
{
	warnx "Usage: partial [--restart|--forget|--pid] <COMMAND> [<ARGUMENTS>]

Description
  On first invocation 'partial' starts COMMAND in the background.
  On subsequest invocations, it outputs everything COMMAND's output so far and
  keep COMMAND running in the background. Hence the name 'partial', because it
  shows a command's partial outputs. When COMMAND finished, 'partial' outputs
  the whole output and exits with COMMAND exit status code.

Options
  -f,--forget    terminate (kill SIGTERM) previous instance of the same command
                 and clean up status directory
  -r,--restart   terminate if running (like -f) and start again
  -p,--pid       display PID file path

Exit codes
  115  COMMAND started
  114  partial output showed
  *    COMMAND returned with this status code"
}

opt_restart=no
opt_forget=no
opt_pid=no

while [ $# -gt 0 ]
do
	case "${1:-}" in
	--restart|-r)
		opt_restart=yes
		;;
	--forget|-f)
		opt_forget=yes
		;;
	--pid|-p)
		opt_pid=yes
		;;
	--help)
		help
		exit
		;;
	--)
		shift
		break
		;;
	-*)
		warnx "unknown option '$1'"
		exit -1
		;;
	*)
		break
		;;
	esac
	shift
done

if [ $# = 0 ]
then
	help
	exit -1
fi

declare -a command=("$@")
command_str=${command[*]}
commandhash=`echo "$command_str" | sha256sum | cut -f1 -d' '`

dir=~/.cache/partial/$commandhash

if [ $opt_pid = yes ]
then
	echo "$dir/pid"
	exit
fi
if [ $opt_forget = yes -o $opt_restart = yes ]
then
	if [ -d "$dir" ]
	then
		pid=`cat "$dir/pid"`
		while kill -0 "$pid"
		do
			kill "$pid"
			sleep 0.2
		done
		rm -r "$dir"
	fi
	if [ $opt_forget = yes ]
	then
		exit
	fi
fi

mkdir -p "$dir"

exec {lockfd}>>"$dir/lock"
flock -x $lockfd

exec {runlockfd}>>"$dir/running.lock"
warnx "state in $dir"

if flock -n -x $runlockfd
then
	if [ -e "$dir/status" ]
	then
		warnx "command finished: $(stat -c %y "$dir/status")"
		print_partial
		exit `cat "$dir/status"`
	else
		echo "$command_str" > "$dir/command.txt"
		
		(
			flock -u $lockfd
			set +e
			command "${command[@]}" > "$dir/stdout"
			echo -n $? >"$dir/status"
		) &
		
		echo $! > "$dir/pid"
		warnx "command started"
		exit 115
	fi
else
	flock -u $runlockfd
	
	warnx "command is in progress since $(stat -c %y "$dir/command.txt"), partial output follows."
	print_partial
	exit 114
fi
