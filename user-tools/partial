#!/bin/bash

true <<EOF
=pod

=head1 NAME

partial - Show an earlier started long-running command's partial output

=head1 SYNOPSIS

partial [--restart|--forget|--wait|--pid] <B<COMMAND>> [<B<ARGUMENTS>>]

=head1 DESCRIPTION

On first invocation partial(1) starts B<COMMAND> in the background.
On subsequent invocations, it prints the command's output to stdout which is
generated so far, including the parts which are shown before too,
and keep it running in the background.
Hence the name 'partial', because it shows a command's partial output.
When the command finished, partial(1) prints the whole output
and exits with B<COMMAND>'s exit code.

=head1 OPTIONS

=over 4

=item -f, --forget

Terminate (SIGTERM) previous instance of the same command
and clean up status directory, even if it's running.

=item -r, --restart

Terminate command if running (like with --forget) and start it again.

=item -w, --wait

On first run, wait for the complete output.

=item -p, --pid

display PID

=item -q, --quiet

less verbose

=back

=head1 STATUS CODES

=over 4

=item 115

command started

=item 114

partial output shown

=item I<nnn>

called command returned with this status code I<nnn>

=back

=head1 LIMITS

If B<COMMAND> does not exit normally, but gets terminated by a signal,
the exit code is indistinguishable from a normal exit's status code,
due to bash(1) uses the value of 128+B<N> as the exit status
when a command terminates on a fatal signal B<N>.

=cut

EOF


set -e
set -o pipefail
set -u

print_partial()
{
	cat "$dir/stdout"
}

warnx()
{
	echo "${0##*/}: $*" >&2
}

verbose()
{
	if [ $opt_quiet = no ]
	then
		"$@"
	fi
}

help()
{
	pod2text "$0"
}

remove()
{
	[ ! -e "$1" ] || command remove "$1"
}

opt_restart=no
opt_forget=no
opt_wait=no
opt_pid=no
opt_quiet=no

while [ $# -gt 0 ]
do
	case "${1:-}" in
	--restart|-r)
		opt_restart=yes
		opt_forget=yes
		;;
	--forget|-f)
		opt_forget=yes
		;;
	--wait|-w)
		opt_wait=yes
		;;
	--pid|-p)
		opt_pid=yes
		;;
	--quiet|-q)
		opt_quiet=yes
		;;
	--help)
		help
		exit 0
		;;
	--)
		shift
		break
		;;
	-*)
		warnx "unknown option: $1"
		exit -1
		;;
	*)
		break
		;;
	esac
	shift
done

if [ $# = 0 ]
then
	help
	exit -1
fi

declare -a command=("$@")
command_str=${command[*]}
commandhash=`echo "$command_str" | sha256sum | cut -f1 -d' '`

dir=~/.cache/partial/$commandhash

if [ $opt_pid = yes ]
then
	cat "$dir/pid"
	exit
fi

if [ $opt_forget = yes ]
then
	if [ -d "$dir" ]
	then
		pid=`cat "$dir/pid" 2>/dev/null || true`
		if [ -n "$pid" ]
		then
			while kill -0 "$pid"
			do
				kill "$pid"
				sleep 0.2
			done
		fi
		remove "$dir/pid"
		remove "$dir/lock"
		remove "$dir/stdout"
		remove "$dir/running.lock"
		remove "$dir/status"
		remove "$dir/command.txt"
		remove "$dir"
	fi
	
	if [ $opt_restart = no ]
	then
		exit
	fi
fi

mkdir -p "$dir"

exec {lockfd}>>"$dir/lock"
flock -x $lockfd

exec {runlockfd}>>"$dir/running.lock"
verbose warnx "state in $dir"

if flock -n -x $runlockfd
then
	if [ -e "$dir/status" ]
	then
		verbose warnx "command finished: $(stat -c %y "$dir/status")"
		print_partial
		status=`cat "$dir/status"`
		exit $status
	else
		echo "$command_str" > "$dir/command.txt"
		
		if [ $opt_wait = yes ]
		then
			set +e
			command "${command[@]}" | tee "$dir/stdout"
			status=${PIPESTATUS[0]}
			echo -n $status >"$dir/status"
			
			exit $status
		else
			(
				flock -u $lockfd
				set +e
				command "${command[@]}" > "$dir/stdout"
				echo -n $? >"$dir/status"
			) &
			
			echo $! > "$dir/pid"
			verbose warnx "command started"
			
			exit 115
		fi
	fi
else
	flock -u $runlockfd
	
	verbose warnx "command is in progress since $(stat -c %y "$dir/command.txt"), partial output follows."
	print_partial
	exit 114
fi
