# this config file takes effect when your login shell is sh.ssh (or bash.ssh).
# sh.ssh looks up which commands (shell command lines) are allowed by the
# invoking user's group membership.
#
# using sh.ssh as login shell enables sysadmins to:
#  - allow ~/.ssh/rc system wide
#     - but don't allow it for anyone here only for certain groups
#  - users still can write their files including ~/.ssh/rc
#  - allow both password and pubkey auth
#     - because running .ssh/rc can only be disabled globally or per-pubkey
#  - while not worrying about arbitrary commands called by ~/.ssh/rc
#     - because it is not allowed here only for certain groups

# Show error message when ~/.ssh/rc is going to be run.
# Valid parameters: on, off
!report-dotsshrc off

# Allow any command lines and interactive shell for shell group.
shell	--- **

# shell group users can run anything anyways
shell	/bin/sh .ssh/rc

# Allow sftp only for sftp group, no parameter allowed.
sftp	/usr/lib/openssh/sftp-server

# Allow a single parameter.
nogroup	ls *

# Allow any num of parameters.
nogroup	date **

# Strip single (') and double (") quotation marks from arguments
# of the command line which matches to the following rules.
!strip-quotes on

# This is useful because ssh client thinks she is issuing a shell
# command, therefore quoting arguments, but we are converting it
# to a pure execve(2) command-arguments sequence.
#
# N.B. This is NOT a real shell interpolation.
# So e.g. bash -c "echo '$LANG'" will result in ["echo", "$LANG"] 
# with literal string "$LANG".
#
# git(1) calls git-upload-pack/git-receive-pack over ssh with plain
# arguments, no shell-synatax in them, so it's safe to "convert" to
# OS command.

gitusers	git-upload-pack **
gitusers	git-receive-pack **

!strip-quotes off
# Rules after "!strip-quotes off" don't involve dump quote-stripping
