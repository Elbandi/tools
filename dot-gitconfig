[core]
	pager = less $LESS -F

[merge]
	ff = false

[diff]
	renames = copies
	algorithm = patience

[color]
	ui = auto
	status = auto

[color "diff"]
	#plain =
	meta = bold yellow
	frag = magenta
	func = bold white
	#old =
	#new =
	#commit =
	whitespace = normal white

[color "decorate"]

[color "log"]
	
[color "branch"]
	#current
	#local
	#remote

[alias]
	graph = log --graph --format=format:'%C(magenta)%h%C(reset) %C(bold yellow)%an%C(reset) %C(bold green)%ar%C(reset)%C(red)%d%C(reset) <%ae> %C(cyan)%ai%C(reset)%n%w(0,8,8)%s%n' --all
	graph-branches = log --simplify-by-decoration --graph --format=format:'%C(magenta)%h%C(reset)%C(red)%d%n%C(reset)%C(bold yellow)%an%C(reset) <%ae>%C(reset) %C(bold green)%ar %C(reset)%C(cyan)%ai%n' --all
	
	hash = show -s --format=%H
	r = remote -v
	b = for-each-ref --sort=committerdate refs/heads/ --format='[31m%(refname:short)[0m %(contents:subject) ([33m%(authorname)[0m [32m%(committerdate:relative)[0m)'
	br = branch -v
	remote-branches = ls-remote --heads
	unmerged = branch -v --no-merged
	master = checkout master
	switch-to = checkout
	back = ! "fn(){ git checkout $(git log -g --format=%gs | grep -m${1:-1} \"^checkout: moving from\" | tail -n1 | cut -d' ' -f4); }; fn"
	newbranch = checkout -b
	prev = checkout HEAD~1
	next = ! "fn(){ git checkout $(git rev-list --all --children | grep ^$(git show -s --format=%H) | cut -f2 -d' ' -s); }; fn"
	co = checkout
	remote-track = ! "fn(){ [ -n \"$1\" ] && b=$1 || b=$(git symbolic-ref --quiet --short HEAD); git branch --set-upstream \"$b\" \"${2:-origin}/$b\"; }; fn"
	
	search = ! "fn(){ git rev-list --all | GIT_PAGER='' xargs -L 32 git grep \"$@\" | less $LESS -F; }; fn"
	search-commit = log -p --pickaxe-all -S
	grep-commit = log -p --pickaxe-all -G
	history = log --follow --patch --
	
	ls = ls-files --cached
	last-modified = log -1 --format=%ad --
	st = status -s -b --untracked-files=normal
	stt = status -s -b --untracked-files=no
	status-tracked = status --untracked-files=no
	conflicts = diff --name-only --diff-filter=UXB
	
	summary = diff --stat --summary --find-copies --find-renames --ignore-all-space
	sum = diff --stat --summary --find-copies --find-renames --ignore-all-space
	sum-log = log --stat --summary --find-copies --find-renames
	sum-stage = diff --stat --summary --find-copies --find-renames --ignore-all-space --staged
	sum-commit = ! "fn(){ if [ -n \"$1\" ]; then REV=$1; shift; else REV=HEAD; fi; git diff --stat --summary --find-copies --find-renames \"$REV~1..$REV\" \"$@\"; }; fn"
	sum-head = diff --stat --summary --find-copies --find-renames --ignore-all-space HEAD
	
	diff-stage = diff --staged --ignore-all-space
	diff-commit = ! "fn(){ if [ -n \"$1\" ]; then REV=$1; shift; else REV=HEAD; fi; git show \"$REV~1..$REV\" --irreversible-delete --ignore-all-space \"$@\"; }; fn"
	# --word-diff=color 
	diff-head = diff --find-copies --find-renames HEAD
	diff-remote = ! "fn(){ git diff --find-copies --find-renames origin/$(git symbolic-ref --quiet --short HEAD); }; fn"
	diff-to-branch = ! "fn(){ git diff --find-copies --find-renames $(git merge-base HEAD \"$1\"); }; fn"
	
	update = ! "git add --update '/*' ; git st"
	add-all = ! "git add '/*' ; git st"
	commit-all = ! "fn(){ git commit -a -m \"$*\"; }; fn"
	commit-stage = ! "fn(){ git commit -m \"$*\"; }; fn"
	push-branch = ! "fn(){ branch=$(git symbolic-ref --quiet --short HEAD); if [ -z \"$branch\" ]; then echo \"not on a branch\" >&2; return 1; fi; git push \"${@:-origin}\" \"$branch\"; }; fn"
	fixup = ! "hash=$(git show -s --format=%H); git commit -a -m \"fixup! $hash\"; EDITOR=true VISUAL=true git rebase --interactive --autosquash $hash^"
	edit-commit = ! "fn(){ subs=''; for com in \"$@\"; do hash=$(git show -s --format=%h \"$1\"); subs=\"$subs${subs:+; }s/^pick \\($hash\\)/edit \\1/\"; done; GIT_SEQUENCE_EDITOR=\"sed -i -e '$subs'\" git rebase --interactive $hash^; }; fn"
	rebase-commit = ! "fn(){ git commit -m \"$(cat .git/rebase-merge/message)\" \"$@\"; }; fn"
	
	undo-commit = reset --soft HEAD~
	unstage = ! "fn(){ git reset -q HEAD -- \"$@\"; git st; }; fn"
	restore = checkout HEAD --
	discard-all = checkout HEAD -- '/*'
	patch = cherry-pick --no-commit --edit -x
	
	save = stash save --no-keep-index --include-untracked
	stash-as = stash save --no-keep-index --include-untracked
	stash-get = ! "fn(){ ref=$(git stash list | grep -m1 \"$*\" | cut -f1 -d:); if [ -n \"$ref\" ]; then git stash show -p \"$ref\"; git stash apply \"$ref\"; else echo \"Can not find such a stashed commit with substring '$*'.\" >&2; git stash list >&2; fi; }; fn"
	stash-list = stash list
	slist = stash list
	
	change-commits = ! "fn(){ if [ $# -lt 3 ]; then echo \"Arguments: git-attribute old-value new-value\" >&2; return 1; fi; VAR=$1; OLD=$2; NEW=$3; shift 3; git filter-branch --env-filter \"if [ \\\"$`echo $VAR`\\\" = '$OLD' ]; then export $VAR='$NEW'; fi\" \"$@\"; }; fn"
	# Example: git change-commits GIT_AUTHOR_EMAIL oldemail newemail HEAD~1..HEAD
	#   git push origin +myBranch
	
	common-ancestor = ! "fn(){ b1=$1 b2=$2 bash -c 'diff --old-line-format=\"\" --new-line-format=\"\" <(git rev-list --first-parent \"$b1\") <(git rev-list --first-parent \"${b2:-HEAD}\")' | head -n1; }; fn"
	diff-branch = ! "fn(){ b1=$1; shift; case \"$1\" in -*|'') b2='';; *) b2=$1; shift;; esac; git diff \"$@\" \"$(git common-ancestor \"$b1\" \"$b2\")\" \"$b1\"; }; fn"
	which-branches-merged-this-branch = branch --list --contains
	note = ! "fn(){ if [ -z \"$*\" ]; then git notes show; else git notes append -m \"$*\"; fi; }; fn"
	notes-list = log --format=format:'%C(yellow)commit %H%C(reset) %C(red)%d%C(reset)%nDate: %C(cyan)%ai%C(reset) (%ar)%nAuthor: %C(bold yellow)%an%C(reset) <%ae>%nNote: %N%n%n%s%n'
